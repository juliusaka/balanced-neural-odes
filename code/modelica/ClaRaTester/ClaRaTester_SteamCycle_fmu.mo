within ClaRaTester;
model ClaRaTester_SteamCycle_fmu
  "A closed steam cycle with a simple boiler model including single reheat, feedwater tank, LP and HP preheaters"
extends fmuIcon;
// Model automatically generated by Dymola from FMI model description
public
encapsulated package importedFMUTypes
  type ClaRa_Basics_Units_AbsolutePressure = Real (unit = "Pa", displayUnit = "Pa", nominal = 100000.0, quantity = "PressureDifference", min = 0.0);
  type ClaRa_Basics_Units_Area = Real (unit = "m2", displayUnit = "m2", nominal = 1.0, quantity = "Area", min = 0.0);
  type ClaRa_Basics_Units_CoefficientOfHeatTransfer = Real (unit = "W/(m2.K)", displayUnit = "W/(m2.K)", nominal = 1.0, quantity = "CoefficientOfHeatTransfer", min = 0.0);
  type ClaRa_Basics_Units_DensityMassSpecific = Real (unit = "kg/m3", displayUnit = "kg/m3", nominal = 1000.0, quantity = "DensityVolumeSpecific", min = 0.0);
  type ClaRa_Basics_Units_Enthalpy = Real (unit = "J", displayUnit = "J", nominal = 100000.0, quantity = "Enthalpy");
  type ClaRa_Basics_Units_EnthalpyFlowRate = Real (unit = "W", displayUnit = "W", nominal = 100000.0, quantity = "EnthalpyFlowRate");
  type ClaRa_Basics_Units_EnthalpyMassSpecific = Real (unit = "J/kg", displayUnit = "J/kg", nominal = 1000.0, quantity = "MassSpecificEnthalpy");
  type ClaRa_Basics_Units_EntropyMassSpecific = Real (unit = "J/(kg.K)", displayUnit = "J/(kg.K)", nominal = 1000.0, quantity = "MassSpecificEntropy", min = 0.0);
  type ClaRa_Basics_Units_Force = Real (unit = "N", displayUnit = "N", nominal = 1.0, quantity = "Force");
  type ClaRa_Basics_Units_Frequency = Real (unit = "1/s", displayUnit = "1/min", nominal = 1000.0, quantity = "Frequency");
  type ClaRa_Basics_Units_HeatCapacityFlowRate = Real (unit = "W/(K)", displayUnit = "W/(K)", nominal = 1000.0, quantity = "HeatCapacityFlow");
  type ClaRa_Basics_Units_HeatCapacityMassSpecific = Real (unit = "J/(kg.K)", displayUnit = "J/(kg.K)", nominal = 1000.0, quantity = "SpecificHeatCapacity");
  type ClaRa_Basics_Units_HeatFlowRate = Real (unit = "W", displayUnit = "W", nominal = 100000.0, quantity = "Power");
  type ClaRa_Basics_Units_InternalEnergy = Real (unit = "J", displayUnit = "J", nominal = 1000.0, quantity = "Energy", min = 0.0);
  type ClaRa_Basics_Units_Length = Real (unit = "m", displayUnit = "m", nominal = 1.0, quantity = "Length");
  type ClaRa_Basics_Units_Mass = Real (unit = "kg", displayUnit = "kg", nominal = 1.0, quantity = "Mass", min = 0.0);
  type ClaRa_Basics_Units_MassFlowRate = Real (unit = "kg/s", displayUnit = "kg/s", nominal = 1.0, quantity = "MassFlowRate");
  type ClaRa_Basics_Units_MassFraction = Real (displayUnit = "kg/kg", nominal = 1.0, quantity = "MassFraction", min = 0.0);
  type ClaRa_Basics_Units_MomentOfInertia = Real (unit = "kg.m2", quantity = "MomentOfInertia");
  type ClaRa_Basics_Units_Momentum = Real (unit = "kg.m/s", displayUnit = "kg.m/s", nominal = 1.0, quantity = "Momentum");
  type ClaRa_Basics_Units_Power = Real (unit = "W", displayUnit = "W", nominal = 100000.0, quantity = "Power");
  type ClaRa_Basics_Units_PrandtlNumber = Real (displayUnit = "1", quantity = "PrandtlNumber");
  type ClaRa_Basics_Units_Pressure = Real (unit = "Pa", displayUnit = "Pa", nominal = 100000.0, quantity = "Pressure", min = 0.0);
  type ClaRa_Basics_Units_PressureDifference = Real (unit = "Pa", displayUnit = "Pa", nominal = 100000.0, quantity = "PressureDifference");
  type ClaRa_Basics_Units_RPM = Real (quantity = "RotationsPerMinute");
  type ClaRa_Basics_Units_RelativeHumidity = Real (displayUnit = "1", quantity = "RelativeHumidity", min = 0.0);
  type ClaRa_Basics_Units_ReynoldsNumber = Real (displayUnit = "1", quantity = "ReynoldsNumber");
  type ClaRa_Basics_Units_Temperature = Real (unit = "K", displayUnit = "K", quantity = "Temperature", min = 0.0);
  type ClaRa_Basics_Units_TemperatureDifference = Real (unit = "K", displayUnit = "K", quantity = "TemperatureDifference");
  type ClaRa_Basics_Units_Temperature_DegC = Real (quantity = "Temperature", min = -273.15);
  type ClaRa_Basics_Units_ThermalResistance = Real (unit = "K/W", displayUnit = "K/W", nominal = 0.001, quantity = "ThermalResistance");
  type ClaRa_Basics_Units_Time = Real (unit = "s", displayUnit = "s", nominal = 1.0, quantity = "Time");
  type ClaRa_Basics_Units_Velocity = Real (unit = "m/s", displayUnit = "m/s", nominal = 1.0, quantity = "Velocity");
  type ClaRa_Basics_Units_Volume = Real (unit = "m3", displayUnit = "m3", nominal = 1.0, quantity = "Volume", min = 0.0);
  type ClaRa_Basics_Units_VolumeFlowRate = Real (unit = "m3/s", displayUnit = "m3/s", nominal = 1.0, quantity = "VolumeFlowRate");
  type ClaRa_Basics_Units_VolumeMassSpecific = Real (unit = "m3/kg", displayUnit = "m3/kg", nominal = 0.001, quantity = "MassSpecificVolume", min = 0.0);
  type Modelica_Blocks_Interfaces_BooleanInput = Boolean;
  type Modelica_Blocks_Interfaces_BooleanOutput = Boolean;
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
  type ClaRa_Basics_Choices_GeometryOrientation = enumeration(
        vertical                                                       "Vertical orientation",
        horizontal "Horizontal orientation");
end importedFMUTypes;
  parameter Real P_target_INIT(fixed=false) "Initial Power read from input signal u, see initial equation.";
protected
  record simCenter_rec
    constant importedFMUTypes.ClaRa_Basics_Units_AbsolutePressure p_amb = 101300.0 "Ambient pressure";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_amb = 293.15 "Ambient temperature";
    constant importedFMUTypes.ClaRa_Basics_Units_RelativeHumidity rh_amb = 0.2 "Ambient relative humidity (0 < rh < 1)";
    parameter importedFMUTypes.ClaRa_Basics_Units_AbsolutePressure p_amb_start(fixed=false) "Initial ambient pressure (automatically calculated)";
    parameter importedFMUTypes.ClaRa_Basics_Units_Temperature T_amb_start(fixed=false) "Initial ambient temperature (automatically calculated)";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean largeFonts = false "|Summary and Visualisation||True if visualisers shall be displayed as large as posible";
    constant Boolean contributeToCycleSummary = true "True if components shall contribute to automatic efficiency calculation";
    constant Boolean steamCycleAllowFlowReversal = true "Allow flow reversal in steam cycle";
    constant Boolean useClaRaDelay = true "True for using ClaRa delay implementation / false for built in Modelica delay";
    constant Real MaxSimTime = 10000.0 "Maximum time for simulation, must be set for Modelica delay blocks with variable delay time";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_amb_fluid1 "Ambient enthalpy of VLE fluid 1";
    importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s_amb_fluid1 "Ambient entropy of VLE fluid 1";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_amb_fluid2 "Ambient enthalpy of VLE fluid 2";
    importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s_amb_fluid2 "Ambient entropy of VLE fluid 2";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_amb_fluid3 "Ambient enthalpy of VLE fluid 3";
    importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s_amb_fluid3 "Ambient entropy of VLE fluid 3";
  protected
    record fuelModel1_rec
      constant Integer N_c = 3 "Number of components";
      constant Integer N_e = 7 "Number of elements";
      constant Real 'C_LHV[1]' = 30769230.769230768 "Coefficients for LHV calculation";
      constant Real 'C_LHV[2]' = 0.0 "Coefficients for LHV calculation";
      constant Real 'C_LHV[3]' = -2500000.0 "Coefficients for LHV calculation";
      constant Real 'C_cp[1]' = 1266.67 "Coefficients for cp calculation";
      constant Real 'C_cp[2]' = 1000.0 "Coefficients for cp calculation";
      constant Real 'C_cp[3]' = 4190.0 "Coefficients for cp calculation";
      constant Real 'C_rho[1]' = 500 "Coefficients for rho calculation";
      constant Real 'C_rho[2]' = 7000 "Coefficients for rho calculation";
      constant Real 'C_rho[3]' = 1000 "Coefficients for rho calculation";
      constant Integer waterIndex = 3 "Index of water in composition";
      constant Integer ashIndex = 2 "Index of ash in composition";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'defaultComposition[1]' = 0.975 "Elemental compostion of combustible, e.g. {C,H,O,N,S, H2O, ash}";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'defaultComposition[2]' = 0.025 "Elemental compostion of combustible, e.g. {C,H,O,N,S, H2O, ash}";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,1]' = 0.8205128205128206 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,2]' = 0.05128205128205129 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,3]' = 0.05128205128205129 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,4]' = 0.05128205128205129 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_ref = 273.15 "Reference temperature";
    end fuelModel1_rec;
  public
    fuelModel1_rec fuelModel1;
  protected
    record fuelModel2_rec
      constant Integer N_c = 3 "Number of components";
      constant Integer N_e = 7 "Number of elements";
      constant Real 'C_LHV[1]' = 30769230.769230768 "Coefficients for LHV calculation";
      constant Real 'C_LHV[2]' = 0.0 "Coefficients for LHV calculation";
      constant Real 'C_LHV[3]' = -2500000.0 "Coefficients for LHV calculation";
      constant Real 'C_cp[1]' = 1266.67 "Coefficients for cp calculation";
      constant Real 'C_cp[2]' = 1000.0 "Coefficients for cp calculation";
      constant Real 'C_cp[3]' = 4190.0 "Coefficients for cp calculation";
      constant Real 'C_rho[1]' = 500 "Coefficients for rho calculation";
      constant Real 'C_rho[2]' = 7000 "Coefficients for rho calculation";
      constant Real 'C_rho[3]' = 1000 "Coefficients for rho calculation";
      constant Integer waterIndex = 3 "Index of water in composition";
      constant Integer ashIndex = 2 "Index of ash in composition";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'defaultComposition[1]' = 0.975 "Elemental compostion of combustible, e.g. {C,H,O,N,S, H2O, ash}";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'defaultComposition[2]' = 0.025 "Elemental compostion of combustible, e.g. {C,H,O,N,S, H2O, ash}";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,1]' = 0.8205128205128206 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,2]' = 0.05128205128205129 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,3]' = 0.05128205128205129 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFraction 'xi_e_waf[1,4]' = 0.05128205128205129 "water and ash free elementary composition of the two pure fuels";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_ref = 273.15 "Reference temperature";
    end fuelModel2_rec;
  public
    fuelModel2_rec fuelModel2;
  protected
    record slagModel_rec
      constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific cp = 800;
    end slagModel_rec;
  public
    slagModel_rec slagModel;
  protected
    record cycleSumPort_rec
      importedFMUTypes.ClaRa_Basics_Units_Power power_in;
      importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech;
      constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
      importedFMUTypes.ClaRa_Basics_Units_Power power_aux;
    end cycleSumPort_rec;
  public
    cycleSumPort_rec cycleSumPort;
  protected
    record summary_rec
      Real eta_gross "Gross electrical efficiency";
      Real eta_net "Net electrical efficiency";
      Real eta_util "Utilization efficiency";
      Real spec_heat_cons "Specific heat consumption";
    end summary_rec;
  public
    summary_rec summary;
  end simCenter_rec;
public
  simCenter_rec simCenter;
protected
  record Turbine_HP1_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      constant Modelica.Units.SI.Torque tau = 0.0 "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_HP1_rec;
public
  Turbine_HP1_rec Turbine_HP1;
protected
  record steamGenerator_rec
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput QF_setl_ "Set value of thermal output in p.u.";
    constant Modelica.Units.SI.Pressure p_LS_nom = 26200000.0 "Nominal life steam pressure";
    constant Modelica.Units.SI.Pressure p_RH_nom = 5100000.0 "Nominal reheat pressure";
    Modelica.Units.SI.SpecificEnthalpy h_LS_nom "Nominal life steam specific enthlapy";
    Modelica.Units.SI.SpecificEnthalpy h_RH_nom "Nominal reheat specific enthlapy";
    constant Modelica.Units.SI.Pressure Delta_p_nomHP = 4000000.0 "Nominal main pressure loss";
    constant Modelica.Units.SI.Pressure Delta_p_nomIP = 491000.0 "Nominal reheat pressure loss";
    constant Modelica.Units.SI.MassFlowRate m_flow_nomLS = 420.0 "Nominal life steam flow rate";
    Modelica.Units.SI.HeatFlowRate Q_flow_F_nom "Nominal firing power";
    constant Real 'CL_Delta_pHP_mLS_[1,1]' = 0.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[1,2]' = 0.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[2,1]' = 0.1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[2,2]' = 0.01 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[3,1]' = 0.2 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[3,2]' = 0.04 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[4,1]' = 0.3 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[4,2]' = 0.09 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[5,1]' = 0.4 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[5,2]' = 0.16 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[6,1]' = 0.5 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[6,2]' = 0.25 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[7,1]' = 0.6 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[7,2]' = 0.36 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[8,1]' = 0.7 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[8,2]' = 0.49 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[9,1]' = 0.8 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[9,2]' = 0.64 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[10,1]' = 0.9 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[10,2]' = 0.81 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[11,1]' = 1.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pHP_mLS_[11,2]' = 1.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[1,1]' = 0.0 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[1,2]' = 0.0 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[2,1]' = 0.1 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[2,2]' = 0.01 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[3,1]' = 0.2 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[3,2]' = 0.04 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[4,1]' = 0.3 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[4,2]' = 0.09 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[5,1]' = 0.4 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[5,2]' = 0.16 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[6,1]' = 0.5 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[6,2]' = 0.25 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[7,1]' = 0.6 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[7,2]' = 0.36 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[8,1]' = 0.7 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[8,2]' = 0.49 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[9,1]' = 0.8 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[9,2]' = 0.64 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[10,1]' = 0.9 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[10,2]' = 0.81 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[11,1]' = 1.0 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_Delta_pIP_mLS_[11,2]' = 1.0 "Characteristic line of reheat pressure drop as function of mass flow rate";
    constant Real 'CL_yF_QF_[1,1]' = 0.4207 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_yF_QF_[1,2]' = 0.8341 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_yF_QF_[2,1]' = 0.6246 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_yF_QF_[2,2]' = 0.8195 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_yF_QF_[3,1]' = 0.8171 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_yF_QF_[3,2]' = 0.8049 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_yF_QF_[4,1]' = 1.0 "Characteristic line of relative heat release in life steam as function of rel. firing power";
    Real 'CL_yF_QF_[4,2]' "Characteristic line of relative heat release in life steam as function of rel. firing power";
    constant Real 'CL_etaF_QF_[1,1]' = 0.0 "Characteristic line of furnace efficiency as function of rel. firing power";
    constant Real 'CL_etaF_QF_[1,2]' = 0.9 "Characteristic line of furnace efficiency as function of rel. firing power";
    constant Real 'CL_etaF_QF_[2,1]' = 1.0 "Characteristic line of furnace efficiency as function of rel. firing power";
    constant Real 'CL_etaF_QF_[2,2]' = 0.95 "Characteristic line of furnace efficiency as function of rel. firing power";
    constant Modelica.Units.SI.Time Tau_dead = 100 "Equivalent dead time of steam generation";
    constant Modelica.Units.SI.Time Tau_bal = 50 "Balancing time of steam generation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    Modelica.Units.SI.Pressure p_LS_start "Initial value of life steam pressure";
    Modelica.Units.SI.SpecificEnthalpy h_LS_start "Initial value of life steam specific enthalpy";
    constant Integer initOption_HP = 0 "Type of initialisation of HP steam generation";
    Modelica.Units.SI.Pressure p_RH_start "Initial value of hot reheat pressure";
    Modelica.Units.SI.SpecificEnthalpy h_RH_start "Initial value of hot reheat specifc enthalpy";
    constant Integer initOption_IP = 0 "Type of initialisation of reheater";
    constant Modelica.Units.SI.Volume volume_tot_HP = 300 "Total volume of the live steam generator";
    constant Modelica.Units.SI.Volume volume_tot_IP = 100 "Total volume of the reheater";
    constant Boolean showExpertSummary = false "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.SpecificEnthalpy h_IP "Specific enthalpy before IP injector";
    Modelica.Units.SI.Pressure p_IP(nominal = 100000.0, min = 0.0) "Pressure at hot reheat outlet";
    Modelica.Units.SI.Mass mass_IP "Mass in the reheater";
    Real drhodt_IP "Time derivative of reheater mean density";
    Modelica.Units.SI.SpecificEnthalpy h_HP "Specific enthalpy before HP injector";
    Modelica.Units.SI.Pressure p_HP(nominal = 100000.0, min = 0.0) "Live steam pressure";
    Modelica.Units.SI.Mass mass_HP "Mass in the HP steam generator";
    Real drhodt_HP "Time dericative of the HP mean density";
    Modelica.Units.SI.HeatFlowRate Q_flow_HP "Heat flow rate for HP steam generation";
    Modelica.Units.SI.HeatFlowRate Q_flow_IP "Heat flow rate of the reheater";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput h_evap "evaporator outlet specific enthalpy";
  protected
    record livesteam_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end livesteam_rec;
  public
    livesteam_rec livesteam;
  protected
    record reheat_out_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end reheat_out_rec;
  public
    reheat_out_rec reheat_out;
  protected
    record feedwater_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      constant Modelica.Units.SI.SpecificEnthalpy h_outflow = 1330000.0 "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end feedwater_rec;
  public
    feedwater_rec feedwater;
  protected
    record reheat_in_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end reheat_in_rec;
  public
    reheat_in_rec reheat_in;
  protected
    record heatRelease_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real 'b[1]' = 1 "Numerator coefficients of transfer function (e.g., 2*s+3 is specified as {2,3})";
      constant Real 'a[1]' = 5000.0 "Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6})";
      constant Real 'a[2]' = 150.0 "Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6})";
      constant Real 'a[3]' = 1.0 "Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6})";
      constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.SteadyState "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)";
      constant Real 'x_start[1]' = 0 "Initial or guess values of states";
      constant Real 'x_start[2]' = 0 "Initial or guess values of states";
      constant Real y_start = 0 "Initial value of output (derivatives of y are zero up to nx-1-th derivative)";
      Real 'x[1]' "State of transfer function from controller canonical form";
      Real 'x[2]' "State of transfer function from controller canonical form";
      Real 'x_scaled[1]' "Scaled vector x";
      Real 'x_scaled[2]' "Scaled vector x";
    end heatRelease_rec;
  public
    heatRelease_rec heatRelease;
  protected
    record convert2PressureDrop_HP_rec
      constant Boolean tableOnFile = false "true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 0.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 0.1 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 0.01 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,1]' = 0.2 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,2]' = 0.04 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,1]' = 0.3 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,2]' = 0.09 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[5,1]' = 0.4 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[5,2]' = 0.16 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[6,1]' = 0.5 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[6,2]' = 0.25 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[7,1]' = 0.6 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[7,2]' = 0.36 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[8,1]' = 0.7 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[8,2]' = 0.49 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[9,1]' = 0.8 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[9,2]' = 0.64 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[10,1]' = 0.9 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[10,2]' = 0.81 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[11,1]' = 1.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[11,2]' = 1.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Integer 'columns[1]' = 2 "columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "smoothness of table interpolation";
      constant Integer n = 1 "Number of inputs (= number of outputs)";
      parameter importedFMUTypes.Modelica_Blocks_Interfaces_RealInput '_u[1]_start' = 1
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]'(start = '_u[1]_start', fixed=false) "Connector of Real input signals";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
    end convert2PressureDrop_HP_rec;
  public
    convert2PressureDrop_HP_rec convert2PressureDrop_HP annotation(Dialog);
  protected
    record liveSteam_rec
      constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
      constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
      constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
      constant Boolean computeSurfaceTension = true;
      constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
      constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
      constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
      constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
      Modelica.Units.SI.Density d "Density";
      Modelica.Units.SI.AbsolutePressure p "Pressure";
      Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
      Modelica.Units.SI.SpecificEntropy s "Specific entropy";
      Modelica.Units.SI.Temperature T "Temperature";
      Modelica.Units.SI.MolarMass M "Average molar mass";
      Modelica.Units.SI.MassFraction q "Steam mass fraction (quality)";
      Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
      Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
      Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
      Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
      Modelica.Units.SI.Velocity w "Speed of sound";
      Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
      Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
      Real gamma "Heat capacity ratio aka isentropic expansion factor";
      Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
    protected
      record vleFluidPointer_rec
        Integer id;
      end vleFluidPointer_rec;
    public
      vleFluidPointer_rec vleFluidPointer;
    protected
      record crit_rec
        Modelica.Units.SI.Density d "Critical density";
        Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
        Modelica.Units.SI.AbsolutePressure p "Critical pressure";
        Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
        Modelica.Units.SI.Temperature T "Critical temperature";
      end crit_rec;
    public
      crit_rec crit;
    protected
      record transp_rec
        constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
        constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
        constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
        constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
      end transp_rec;
    public
      transp_rec transp;
    protected
      record VLE_rec
        Modelica.Units.SI.Density d_l "Density of liquid phase";
        Modelica.Units.SI.Density d_v "Density of vapour phase";
        Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
        Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
        Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
        Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
        Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
        Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
        Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
        Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
        constant Integer nc = 1;
      end VLE_rec;
    public
      VLE_rec VLE;
    protected
      record VLEAdditional_rec
        constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
        constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
        constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
        constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
        constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
      end VLEAdditional_rec;
    public
      VLEAdditional_rec VLEAdditional;
    protected
      record VLETransp_rec
        constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
        constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
        constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
        constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
        constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
        constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
      end VLETransp_rec;
    public
      VLETransp_rec VLETransp;
    end liveSteam_rec;
  public
    liveSteam_rec liveSteam;
  protected
    record reheatedSteam_rec
      constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
      constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
      constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
      constant Boolean computeSurfaceTension = true;
      constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
      constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
      constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
      constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
      Modelica.Units.SI.Density d "Density";
      Modelica.Units.SI.AbsolutePressure p "Pressure";
      Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
      Modelica.Units.SI.SpecificEntropy s "Specific entropy";
      Modelica.Units.SI.Temperature T "Temperature";
      Modelica.Units.SI.MolarMass M "Average molar mass";
      Modelica.Units.SI.MassFraction q "Steam mass fraction (quality)";
      Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
      Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
      Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
      Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
      Modelica.Units.SI.Velocity w "Speed of sound";
      Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
      Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
      Real gamma "Heat capacity ratio aka isentropic expansion factor";
      Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
    protected
      record vleFluidPointer_rec
        Integer id;
      end vleFluidPointer_rec;
    public
      vleFluidPointer_rec vleFluidPointer;
    protected
      record crit_rec
        Modelica.Units.SI.Density d "Critical density";
        Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
        Modelica.Units.SI.AbsolutePressure p "Critical pressure";
        Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
        Modelica.Units.SI.Temperature T "Critical temperature";
      end crit_rec;
    public
      crit_rec crit;
    protected
      record transp_rec
        constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
        constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
        constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
        constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
      end transp_rec;
    public
      transp_rec transp;
    protected
      record VLE_rec
        Modelica.Units.SI.Density d_l "Density of liquid phase";
        Modelica.Units.SI.Density d_v "Density of vapour phase";
        Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
        Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
        Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
        Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
        Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
        Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
        Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
        Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
        constant Integer nc = 1;
      end VLE_rec;
    public
      VLE_rec VLE;
    protected
      record VLEAdditional_rec
        constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
        constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
        constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
        constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
        constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
      end VLEAdditional_rec;
    public
      VLEAdditional_rec VLEAdditional;
    protected
      record VLETransp_rec
        constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
        constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
        constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
        constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
        constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
        constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
      end VLETransp_rec;
    public
      VLETransp_rec VLETransp;
    end reheatedSteam_rec;
  public
    reheatedSteam_rec reheatedSteam;
  protected
    record convert2PressureDrop_IP_rec
      constant Boolean tableOnFile = false "true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 0.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 0.1 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 0.01 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,1]' = 0.2 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,2]' = 0.04 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,1]' = 0.3 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,2]' = 0.09 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[5,1]' = 0.4 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[5,2]' = 0.16 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[6,1]' = 0.5 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[6,2]' = 0.25 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[7,1]' = 0.6 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[7,2]' = 0.36 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[8,1]' = 0.7 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[8,2]' = 0.49 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[9,1]' = 0.8 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[9,2]' = 0.64 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[10,1]' = 0.9 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[10,2]' = 0.81 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[11,1]' = 1.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[11,2]' = 1.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Integer 'columns[1]' = 2 "columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "smoothness of table interpolation";
      constant Integer n = 1 "Number of inputs (= number of outputs)";
      parameter importedFMUTypes.Modelica_Blocks_Interfaces_RealInput '_u[1]_start' = 0.16666666666666666
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]'(start = '_u[1]_start', fixed=false) "Connector of Real input signals";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
    end convert2PressureDrop_IP_rec;
  public
    convert2PressureDrop_IP_rec convert2PressureDrop_IP annotation(Dialog);
  protected
    record convert2HPFiring_rec
      constant Boolean tableOnFile = false "true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0.4207 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 0.8341 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 0.6246 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 0.8195 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,1]' = 0.8171 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[3,2]' = 0.8049 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[4,1]' = 1.0 "table matrix (grid = first column; e.g., table=[0,2])";
      Real 'table[4,2]' "table matrix (grid = first column; e.g., table=[0,2])";
      constant Integer 'columns[1]' = 2 "columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "smoothness of table interpolation";
      constant Integer n = 1 "Number of inputs (= number of outputs)";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
    end convert2HPFiring_rec;
  public
    convert2HPFiring_rec convert2HPFiring;
  protected
    record IPInjection_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      constant Modelica.Units.SI.SpecificEnthalpy h_outflow = 2000000.0 "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end IPInjection_rec;
  public
    IPInjection_rec IPInjection;
  protected
    record HPInjection_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      constant Modelica.Units.SI.SpecificEnthalpy h_outflow = 2000000.0 "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end HPInjection_rec;
  public
    HPInjection_rec HPInjection;
  protected
    record calculateEfficiency_rec
      constant Boolean tableOnFile = false "true, if table is defined on file or in function usertab";
      constant Real 'table[1,1]' = 0.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[1,2]' = 0.9 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,1]' = 1.0 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Real 'table[2,2]' = 0.95 "table matrix (grid = first column; e.g., table=[0,2])";
      constant Integer 'columns[1]' = 2 "columns of table to be interpolated";
      constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "smoothness of table interpolation";
      constant Integer n = 1 "Number of inputs (= number of outputs)";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
    end calculateEfficiency_rec;
  public
    calculateEfficiency_rec calculateEfficiency;
  protected
    record eye_LS_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_LS_rec;
  public
    eye_LS_rec eye_LS;
  protected
    record 'eye_intLS[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_intLS[1]_rec';
  public
    'eye_intLS[1]_rec' 'eye_intLS[1]';
  protected
    record eye_RH_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_RH_rec;
  public
    eye_RH_rec eye_RH;
  protected
    record 'eye_intRH[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_intRH[1]_rec';
  public
    'eye_intRH[1]_rec' 'eye_intRH[1]';
  protected
    record connected2SimCenter_rec
      importedFMUTypes.ClaRa_Basics_Units_Power powerIn;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerAux = 0;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          importedFMUTypes.ClaRa_Basics_Units_Power power_in;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_aux = 0.0;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  end steamGenerator_rec;
public
  steamGenerator_rec steamGenerator annotation(Dialog);
protected
  record Turbine_IP1_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_IP1_rec;
public
  Turbine_IP1_rec Turbine_IP1;
protected
  record Turbine_LP4_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_LP4_rec;
public
  Turbine_LP4_rec Turbine_LP4;
protected
  record Pump_FW_rec
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between pressure side and suction side";
    importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
    importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Power to the fluid";
    constant Real eta_mech = 0.9 "Mechanic efficiency of the drive";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_start = 1 "Initial guess value for mass flow";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zero";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput P_drive(nominal = 100000.0) "Power input of the pump's motor";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      importedFMUTypes.ClaRa_Basics_Units_Power powerAux;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          importedFMUTypes.ClaRa_Basics_Units_Power power_aux;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference";
        importedFMUTypes.ClaRa_Basics_Units_Length head "Head";
        importedFMUTypes.ClaRa_Basics_Units_Length NPSHa "Net positive suction head available";
        constant Real eta_hyd = 0 "Hydraulic efficiency";
        constant Real eta_mech = 0.9 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Hydraulic power";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  end Pump_FW_rec;
public
  Pump_FW_rec Pump_FW;
protected
  record quadruple_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 3 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple_rec;
public
  quadruple_rec quadruple;
protected
  record quadruple1_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple1_rec;
public
  quadruple1_rec quadruple1;
protected
  record quadruple2_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple2_rec;
public
  quadruple2_rec quadruple2;
protected
  record quadruple3_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple3_rec;
public
  quadruple3_rec quadruple3;
protected
  record quadruple4_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple4_rec;
public
  quadruple4_rec quadruple4;
protected
  record condenser_rec
    constant Integer initOptionShell = 204 "Type of initialisation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12 "Length of the HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length height = 5 "Height of HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length width = 5 "Width of HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_shell = 4.9 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux1 = 4.9 "Inlet position of auxilliary1 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux2 = 4.9 "Inlet position of auxilliary2 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_shell = 0.1 "Outlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius of all flanges";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of inner structure elements, additional to the tubes itself";
    constant importedFMUTypes.ClaRa_Basics_Units_Length height_hotwell = 2 "Height of the hotwell";
    constant importedFMUTypes.ClaRa_Basics_Units_Length width_hotwell = 1 "Width of the hotwell";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length_hotwell = 10 "Length of the hotwell";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_shell "Nominal mass flow on shell side";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_shell = 3800.0 "Nominal pressure on shell side";
    constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_shell = 100000.0 "Nominal specific enthalpy on shell side";
    constant Real yps_liq_nom = 0.08333333333333333 "Relative volume of liquid phase at nominal point";
    constant Real 'yps_nom[1]' = 0.08333333333333333 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    constant Real 'yps_nom[2]' = 0.9166666666666666 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_shell = 3800.0 "Start value of shell fluid pressure";
    constant Real level_rel_start = 0.08333333333333333 "Start value for relative filling Level";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.008 "Inner diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.01 "Outer diameter of internal tubes";
    constant Integer N_tubes = 15000 "Number of tubes";
    constant Integer N_passes = 1 "Number of passes of the internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_tubes = 6.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_tubes = 6.0 "Outlet position from bottom";
    constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_par = 0.015 "Distance between tubes parallel to flow direction (center to center)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_ort = 0.015 "Distance between tubes orthogonal to flow direction (center to center)";
    constant Integer N_rows = 123 "Number of pipe rows in shell flow direction";
    constant Real CF_geo = 1 "Correction coefficient due to fins etc.";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_tubes = 10000 "Nominal mass flow on tubes side";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_tubes = 200000.0 "Nominal pressure on side tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_tubes = 10 "Nominal specific enthalpy on tubes side";
    constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_nom = 1000000.0 "Nominal heat flow rate";
    constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start_tubes = 85000.0 "Start value of tube fluid specific enthalpy";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_tubes = 200000.0 "Start value of tube fluid pressure";
    constant Integer initOptionTubes = 0 "Type of initialisation at tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[1]' = 293.15 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[2]' = 293.15 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[3]' = 293.15 "Initial wall temperature inner --> outer";
    constant Integer initOptionWall = 213 "Init option of Tube wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000 "HTC of the phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 1000.0 "Heat transfer area at phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Real absorbInflow = 1 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of level calculation (table based)";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean levelOutput = true "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput level;
  protected
    record In2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) = 25000 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In2_rec;
  public
    In2_rec In2;
  protected
    record Out2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out2_rec;
  public
    Out2_rec Out2;
  protected
    record Out1_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out1_rec;
  public
    Out1_rec Out1;
  protected
    record In1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In1_rec;
  public
    In1_rec In1;
  protected
    record tubes_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 10000.0 "Nominal mass flow rates at inlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 200000.0 "Nominal pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom = 10.0 "Nominal specific enthalpy";
      constant Integer initOption = 0 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start = 85000.0 "Start value of system specific enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_start = 200000.0 "Start value of system pressure";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "spec. enthalpy state";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 9.047786842338605 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 4523.893421169302 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 4523.893421169302 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 0.7539822368615503 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 0.7539822368615503 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1E-06 "Nominal horizonal area";
        constant Integer N_inlet = 1 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 6.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 6.0 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = -1 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.008 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_hyd = 0.008 "Hydraulic diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12.0 "Length of the component (one pass)";
        constant Integer N_tubes = 15000 "Number of tubes in parallel";
        constant Integer N_passes = 1 "Number of passes of the tubes";
        constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record inlet_rec
        constant Modelica.Units.SI.MassFlowRate m_flow = 25000.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record heat_rec
        parameter Modelica.Units.SI.Temperature _T_start = 288.15
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Modelica.Units.SI.Temperature T(start = _T_start, fixed=false) "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heat_rec;
    public
      heat_rec heat annotation(Dialog);
    protected
      record summary_rec
      protected
        record outline_rec
          constant Boolean showExpertSummary = false;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 9.047786842338605 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat = 4523.893421169302 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p = 0.0 "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record inlet_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 25000.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          Modelica.Units.SI.Enthalpy H "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record fluidIn_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidIn_rec;
    public
      fluidIn_rec fluidIn;
    protected
      record fluidOut_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidOut_rec;
    public
      fluidOut_rec fluidOut;
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wi "Temperature difference between wall and fluid inlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wo "Temperature difference between wall and fluid outlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_mean "Mean temperature difference used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_U "Upper temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_L "Lower temperature difference";
        constant Integer boundary = 1 "Choice of heat transfer boundary condition, relevant for laminar flow heat transfer";
        constant Integer correlation = 2 "Cprrelation type";
        constant Real CF_alpha_tubes = 1 "Correction factor due to fouling";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha "Heat transfer coefficient used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_lam "Heat transfer coefficient - laminar part";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_turb "Heat transfer coefficient - turbolent part";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR "Convective heat resistance";
        Real failureStatus "0== boundary conditions fulfilled | 1== failure >> check if still meaningfull results";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 25000.0 "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Velocity velocity "Mean velocity";
        importedFMUTypes.ClaRa_Basics_Units_ReynoldsNumber Re "Reynolds number";
        importedFMUTypes.ClaRa_Basics_Units_PrandtlNumber Pr "Prandtl number";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom "Nominal HTC (used for homotopy)";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom "Nominal convective heat resistance";
      protected
        record heat_rec
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end heat_rec;
      public
        heat_rec heat;
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_inflow;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_outflow;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_in = 0.0;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_out = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Absolute filling absLevel";
        constant Real level_rel = 0 "Relative filling absLevel";
        constant Real level_rel_start = 0 "Start value for relative filling Level";
        constant Boolean provideDensityDerivative = true "True if density derivative shall be provided";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p = 0;
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss;
    end tubes_rec;
  public
    tubes_rec tubes annotation(Dialog);
  protected
    record shell_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 3800.0 "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 1000.0 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_start = 3800.0 "Start value of sytsem pressure";
      constant Real level_rel_start = 0.08333333333333333 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 2 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 25.488569421570492
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 305.8628330588459 "Volume of the component";
        constant Integer N_heat = 2 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 271.64380550980763 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]'(min = 1E-15) = 5654.8667764616275 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 271.64380550980763 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2]'(min = 1E-15) = 5654.8667764616275 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[2]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 28.584073464102072 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 60.0 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 10.0 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 4.9 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 4.9 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 4.9 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 7.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 0.049999999999999996 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[3,1]' = 0.1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[3,2]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[4,1]' = 0.15000000000000005 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[4,2]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[5,1]' = 0.2 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[5,2]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[6,1]' = 0.25 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[6,2]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[7,1]' = 0.3000000000000001 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[7,2]' = 1.2246312695798545 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[8,1]' = 0.35000000000000003 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[8,2]' = 1.866434896950863 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[9,1]' = 0.4 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[9,2]' = 2.3477876174791197 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[10,1]' = 0.45 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[10,2]' = 2.722173066778875 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[11,1]' = 0.5 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[11,2]' = 3.0216814262186795 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[12,1]' = 0.55 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[12,2]' = 3.2667337203057927 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[13,1]' = 0.6000000000000002 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[13,2]' = 3.4709439653783862 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[14,1]' = 0.65 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[14,2]' = 3.6437372496705804 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[15,1]' = 0.7000000000000001 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[15,2]' = 3.791845779063891 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[16,1]' = 0.75 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[16,2]' = 3.9202065045380925 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[17,1]' = 0.8 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[17,2]' = 4.032522139328019 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[18,1]' = 0.8500000000000002 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[18,2]' = 4.131624170025013 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[19,1]' = 0.9 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[19,2]' = 4.219714863977897 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[20,1]' = 0.9500000000000001 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[20,2]' = 4.2985328533041605 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height = 5.0 "Height of the component; Fixed flow direction in case of vertical flow orientation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length width = 5.0 "Width of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12.0 "|Essential Geometry Definition|Length of the component; Fixed flow direction in case of horizontal flow orientation";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of shell side flow";
        constant Real interior = 0.952876110196153 "Void fraction in the shell";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_hotwell = 2.0 "|Hotwell Definition|Height of the hotwell";
        constant importedFMUTypes.ClaRa_Basics_Units_Length width_hotwell = 1.0 "|Hotwell Definition|Width of the hotwell";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length_hotwell = 10.0 "|Hotwell Definition|Length of the hotwell";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_t = 0.01 "Outer diameter of internal tubes";
        constant Integer N_tubes = 15000 "Number of internal tubes for one pass";
        constant Integer N_passes = 1 "Number of passes of the internal tubes";
        constant Real MIN = 1E-05 "Limiter";
        constant Modelica.Units.SI.Length Delta_z_par = 0.015 "Horizontal distance between tubes (center to center)";
        constant Modelica.Units.SI.Length Delta_z_ort = 0.015 "Vertical distance between tubes (center to center)";
        constant Real a = 1.5 "Lateral alignment ratio";
        constant Real b = 1.5 "Vertical alignment ratio";
        constant Real psi = 0.4764012244017012 "Void ratio";
        constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly, false otherwise";
        constant Real fa = 1.4444444444444444 "Alignment factor";
        constant Integer N_rows(min = 1, max = 15000) = 123 "Number of pipe rows in flow direction";
        constant Integer tubeOrientation = 0 "Tube orientation";
        constant Real N_tubes_parallel = 121.95121951219512 "Number of parallel tubes";
        constant Real length_tubes = 12.0 "Tube length";
        constant Real A_narrowed_ort = 45.36585365853659 "Narrowed cross section in parallel tube layer";
        constant Real A_narrowed_par = 45.24 "Narrowed cross section in tube row layer";
        constant Real length_bundle_par = 1.845;
        constant Real length_bundle_ort = 1.8292682926829267;
        constant Real Delta_l_par = 3.1550000000000002;
        constant Real Delta_l_ort = 3.1707317073170733;
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 3000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap ";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 12000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap ";
        constant Integer heatSurfaceAlloc = 2 "To be considered heat transfer area";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 5.89462752192205E-08 "Nominal convective heat resistance";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 1.4736568804805125E-08 "Nominal convective heat resistance";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 3000.0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 12000.0;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 5.89462752192205E-08 "Convective heat resistance";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 1.4736568804805125E-08 "Convective heat resistance";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.08333333333333333 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 1.0 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 4.95 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 4.95 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 4.95 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 4.8500000000000005 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 4.8500000000000005 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 4.8500000000000005 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.15000000000000002 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.05 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]' "Pressure difference du to friction";
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[2]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]'(start = '_Delta_p[2]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 100 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 1;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 305.8628330588459 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 5654.8667764616275 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end shell_rec;
  public
    shell_rec shell annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 213 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.01 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.008 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12.0 "Length of cylinder";
      constant Integer N_tubes = 15000 "Number of tubes in parallel";
      constant Integer N_passes = 1 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0.0 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 293.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 293.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 293.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 5068.366747017462 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 9.176847341275577E-10 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 13741.326266801758 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666666 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.0003333333333333333 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0005 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.004 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.004166666666666667 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0045 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.004999999999999999 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 4570.855368617648;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 4665.106419967983;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 4806.020698265077;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 4994.539509594598;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 5229.477901401301;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 5512.286590266387;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.004041523478186811;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.004124859704375777;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.004249455281838052;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.004416142507887506;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.0046238736544324905;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.004873931436555914;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.004 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.004083333333333334 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.004333333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.00475 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.005 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 1.678817109759402E-10 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 3.1650465432334646E-10 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 4.332983688282708E-10 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 9.176847341275575E-10 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 4617.499988195311 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 4898.4669758294385 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 5367.159358660164 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 2700.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 920.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 215.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 920.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 215.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 2700.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 920.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 215.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 920.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 215.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 2700.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 920.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 215.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 920.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 215.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.01 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.008 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12.0 "Length of cylinder";
        constant Integer N_tubes = 15000 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666666 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.0003333333333333333 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0005 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.004 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.004166666666666667 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0045 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.004999999999999999 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 4570.855368617648;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 4665.106419967983;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 4806.020698265077;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 4994.539509594598;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 5229.477901401301;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 5512.286590266387;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.004041523478186811;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.004124859704375777;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.004249455281838052;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.004416142507887506;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.0046238736544324905;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.004873931436555914;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.004 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.004083333333333334 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.004333333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.00475 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.005 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 13741.326266801758;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 920.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 920.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 920.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 2700.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 2700.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 2700.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Heat flow rate";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_in "Fluid temperature at inlet T_1_in - T_2_in";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_out "Fluid temperature at outlet T_1_out - T_2_out";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA "Overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA_nom "Nominal overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
      end outline_rec;
    public
      outline_rec outline;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record 'eye_int2[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int2[1]_rec';
  public
    'eye_int2[1]_rec' 'eye_int2[1]';
  protected
    record eye2_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye2_rec;
  public
    eye2_rec eye2;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record eye1_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye1_rec;
  public
    eye1_rec eye1;
  protected
    record aux1_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux1_rec;
  public
    aux1_rec aux1;
  protected
    record aux2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux2_rec;
  public
    aux2_rec aux2;
  end condenser_rec;
public
  condenser_rec condenser annotation(Dialog);
protected
  record quadruple5_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 2 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple5_rec;
public
  quadruple5_rec quadruple5;
protected
  record feedWaterTank_rec
    constant Modelica.Units.SI.Length diameter = 5 "Diameter of the component";
    constant Modelica.Units.SI.Length length = 12 "Length of the component";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.horizontal "Orientation of the component";
    Modelica.Units.SI.MassFlowRate m_flow_cond_nom "Nominal condensat flow";
    Modelica.Units.SI.MassFlowRate m_flow_heat_nom "Nominal heating steam flow";
    constant Modelica.Units.SI.Pressure p_nom = 1240000.0 "Nominal pressure";
    Modelica.Units.SI.SpecificEnthalpy h_nom "Nominal specific enthalpy";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    Modelica.Units.SI.Pressure p_start "Start value of sytsem pressure";
    constant Real level_rel_start = 0.5 "Initial filling level";
    importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality_start "Initial steam quality";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown";
    constant Boolean showLevel = true "True, if level shall be visualised";
    constant Boolean levelOutput = false "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    constant Integer initOption = 204 "Type of initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length thickness_wall = 0.025 "Thickness of the cylinder wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Length thickness_insulation = 0.02 "Thickness of the insulation";
    constant Boolean includeInsulation = false "True, if insulation is included";
    constant Modelica.Units.SI.Length radius_flange = 0.05 "Flange radius";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_tapping = 4.5 "position of tapping flange";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_condensate = 4.5 "position of condensate flange";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_aux = 1 "position of auxilliary flange";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_feedwater = 0 "position of feedwater flange";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_vent = 4.5 "position of vent flange";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of internal structure addtional to feedwater tank wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 10 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 10000.0 "Time constant of evaporation";
    constant Real absorbInflow = 0.6 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 6000.0 "Heat transfer area at phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 500 "HTC of the phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation for calculation of filling level";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    constant Modelica.Units.SI.Temperature 'T_wall_start[1]' = 393.15 "Start values of wall temperature inner --> outer";
    constant Modelica.Units.SI.Temperature 'T_wall_start[2]' = 393.15 "Start values of wall temperature inner --> outer";
    constant Modelica.Units.SI.Temperature 'T_wall_start[3]' = 393.15 "Start values of wall temperature inner --> outer";
    constant Integer initOptionWall = 1 "Initialisation option for wall";
    constant Integer initOptionInsulation = 213 "Type of initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_startInsulation = 293.15 "Start values of wall temperature";
    constant Boolean enableAmbientLosses = false "Include heat losses to environment ";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_prescribed = 8 "Prescribed heat transfer coefficient";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_amb = 293.15 "Temperature of surrounding medium";
  protected
    record feedwater_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end feedwater_rec;
  public
    feedwater_rec feedwater;
  protected
    record heatingSteam_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end heatingSteam_rec;
  public
    heatingSteam_rec heatingSteam;
  protected
    record condensate_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end condensate_rec;
  public
    condensate_rec condensate;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_loss = 0.0 "Heat flow rate from metal wall to insulation/ambient";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record wall_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_wall[1]' "Temperatures";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_wall[2]' "Temperatures";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_wall[3]' "Temperatures";
      end wall_rec;
    public
      wall_rec wall;
    protected
      record condensate_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end condensate_rec;
    public
      condensate_rec condensate;
    protected
      record tapping_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end tapping_rec;
    public
      tapping_rec tapping;
    protected
      record feedwater_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end feedwater_rec;
    public
      feedwater_rec feedwater;
    protected
      record aux_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end aux_rec;
    public
      aux_rec aux;
    protected
      record vent_rec
        constant Boolean showExpertSummary = true;
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end vent_rec;
    public
      vent_rec vent;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record volume_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 1240000.0 "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 10.0 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 10000.0 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 500.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 6000.0 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
      constant Real level_rel_start = 0.5 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 117.80972450961724
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[2]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[2]' = 0.0 "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 235.61944901923448 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 188.49555921538757 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 188.49555921538757 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 60.0 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 60.0 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 60.0 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 2 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 4.5 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 4.5 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 1.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.0 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[2]' = 4.5 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 5.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0.0005 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 0.02981 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 0.0245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 0.20716 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[3,1]' = 0.1245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[3,2]' = 0.45248 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[4,1]' = 0.2245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[4,2]' = 0.58733 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[5,1]' = 0.3245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[5,2]' = 0.68065 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[6,1]' = 0.4245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[6,2]' = 0.74791 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[7,1]' = 0.5245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[7,2]' = 0.7954 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[8,1]' = 0.6245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[8,2]' = 0.8261 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[9,1]' = 0.7245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[9,2]' = 0.84114 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[10,1]' = 0.8245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[10,2]' = 0.84015 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[11,1]' = 0.9245 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[11,2]' = 0.82031 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[12,1]' = 1.0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[12,2]' = 0.7854 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'outlet[2]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[2]_rec';
    public
      'outlet[2]_rec' 'outlet[2]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record 'fluidOut[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[2]_rec';
    public
      'fluidOut[2]_rec' 'fluidOut[2]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 3000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 3000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 1.7683882565766152E-06 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 1.7683882565766152E-06 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 3000.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 3000.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 1.7683882565766152E-06 "Convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 1.7683882565766152E-06 "Convective heat resistance || [1]:= liq | [2]:= vap";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.5 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[2]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[2]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[2]' = 0.0 "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[2]' = 0.0 "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[2]' = 0.0 "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[2]' = 0.0 "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 0.6 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 4.55 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 4.55 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 1.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 4.45 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 4.45 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 0.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.05 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[2]' = 4.55 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.001 "Lower edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[2]' = 4.45 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[2]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[1]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]'(start = '_Delta_p[1]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]' "Pressure difference du to friction";
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[3]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]'(start = '_Delta_p[3]_start', fixed=false) "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 1000 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 1000 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 1000 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 2;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 235.61944901923448 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 188.49555921538757 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record 'outlet[2]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[2]_rec';
      public
        'outlet[2]_rec' 'outlet[2]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end volume_rec;
  public
    volume_rec volume annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 1 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 5.05 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 5.0 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12.0 "Length of cylinder";
      constant Integer N_tubes = 1 "Number of tubes in parallel";
      constant Integer N_passes = 1 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 7657.632093125121 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 393.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 393.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 393.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 189.4364740197274 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 3.299259043086454E-06 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 44598.04931036054 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.004166666666666652 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.008333333333333304 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.012499999999999956 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 2.5 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 2.5041666666666664 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 2.5124999999999997 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 2.5249999999999995 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' = 0.0 "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 188.5740881279723;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 188.73116776970122;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 188.96675458898721;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 189.28091392659834;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 189.67355889545368;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 190.14479803528576;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 2.501041522051124;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 2.503124855504479;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 2.506249422739201;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 2.5104160903641417;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 2.5156237060035993;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 2.5218737092104866;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 2.5 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 2.502083333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 2.508333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 2.51875 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 2.525 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 5.521613234527446E-07 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 1.1015717710428996E-06 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 1.6455259485908333E-06 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 3.2992590430864775E-06 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 188.6525952511434 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 189.12370379289547 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 189.90888613310057 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 5.05 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 5.0 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 12.0 "Length of cylinder";
        constant Integer N_tubes = 1 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.004166666666666652 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.008333333333333304 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.012499999999999956 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 2.5 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 2.5041666666666664 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 2.5124999999999997 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 2.5249999999999995 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' = 0.0 "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 188.5740881279723;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 188.73116776970122;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 188.96675458898721;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 189.28091392659834;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 189.67355889545368;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 190.14479803528576;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 2.501041522051124;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 2.503124855504479;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 2.506249422739201;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 2.5104160903641417;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 2.5156237060035993;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 2.5218737092104866;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 2.5 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 2.502083333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 2.508333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 2.51875 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 2.525 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 44598.04931036054;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 7800.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record vent_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end vent_rec;
  public
    vent_rec vent;
  protected
    record eye_sat_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      constant Real m_flow = 0.0 "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_sat_rec;
  public
    eye_sat_rec eye_sat;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      constant Real m_flow = 0.0 "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record aux_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux_rec;
  public
    aux_rec aux;
  protected
    record scalar2VectorHeatPort_rec
      constant Integer N = 2 "Number of axial elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 1 "Length of adapter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 0.5 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 0.5 "Discretisation scheme";
      constant Boolean useStabiliserState = false "True, if a stabiliser state shall be used";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 1 "Time Constant of Stabiliser State";
    protected
      record heatScalar_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end heatScalar_rec;
    public
      heatScalar_rec heatScalar;
    protected
      record 'heatVector[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatVector[1]_rec';
    public
      'heatVector[1]_rec' 'heatVector[1]';
    protected
      record 'heatVector[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatVector[2]_rec';
    public
      'heatVector[2]_rec' 'heatVector[2]';
    end scalar2VectorHeatPort_rec;
  public
    scalar2VectorHeatPort_rec scalar2VectorHeatPort;
  end feedWaterTank_rec;
public
  feedWaterTank_rec feedWaterTank annotation(Dialog);
protected
  record Pump_cond_rec
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between pressure side and suction side";
    importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
    importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Power to the fluid";
    constant Real eta_mech = 0.9 "Mechanic efficiency of the drive";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_start "Initial guess value for mass flow";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zero";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput P_drive(nominal = 100000.0) "Power input of the pump's motor";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      importedFMUTypes.ClaRa_Basics_Units_Power powerAux;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          importedFMUTypes.ClaRa_Basics_Units_Power power_aux;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference";
        importedFMUTypes.ClaRa_Basics_Units_Length head "Head";
        importedFMUTypes.ClaRa_Basics_Units_Length NPSHa "Net positive suction head available";
        constant Real eta_hyd = 0 "Hydraulic efficiency";
        constant Real eta_mech = 0.9 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Hydraulic power";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  end Pump_cond_rec;
public
  Pump_cond_rec Pump_cond;
protected
  record PI_Pump_cond_rec
    Real controlError "Control error (set point - measurement)";
    constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI "Type of controller";
    constant Real 'sign' = -1 "set to 1 if a positive control error leads to a positive control output, else -1";
    constant Boolean perUnitConversion = true "True, if input and output values should be normalised with respect to reference values";
    constant Real u_ref = 1 "Reference value for controlled variable";
    constant Real y_ref = 1000000.0 "Reference value for actuated variable";
    Real y_max "Upper limit of output";
    Real y_min "Lower limit of output";
    constant Real k = 10 "Gain of Proportional block";
    constant Modelica.Units.SI.Time Tau_i(min = 1E-60) = 100 "1/Ti is gain of integrator block";
    constant Modelica.Units.SI.Time Tau_d(min = 0.0) = 30 "Gain of derivative block";
    constant Modelica.Units.SI.Time Ni(min = 1E-13) = 0.9 "1/Ni is gain of anti-windup compensation";
    constant Real Nd = 1 "The smaller Nd, the more ideal the derivative block, setting Nd=0 introduces ideal derivative";
    constant Boolean use_activateInput = false "Provide Boolean input to switch controller on/off.";
    constant importedFMUTypes.ClaRa_Basics_Units_Time t_activation = 0.0 "Time when controller is switched on. For use_activateInput==true the controller is switched on if (time>t_activation AND activateController=true).";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_lag_I = 0.0 "Time lag for activation of integral part AFTER controller is being switched on ";
    constant Real y_inactive = 1 "Controller output if controller is not active";
    constant Real Tau_in(min = 0.0) = 0 "Time constant for input smoothening, Tau_in=0 refers to signal no smoothening";
    constant Real Tau_out(min = 0.0) = 0 "time constant for output smoothening, Tau_out=0 refers to signal no smoothening";
    constant Integer initOption = 796 "Initialisation option";
    constant Boolean limitsAtInit = true "= false, if limits are ignored during initializiation";
    constant Real xi_start = 0 "Initial or guess value value for integrator output (= integrator state)";
    Real y_start "Initial value of output";
    constant Real Tau_add(min = 0.0) = 0 "Set to >0 for additional state after add block in controller, if DAE-index reduction fails.";
    constant Real xd_start = 0 "Initial or guess value for state of derivative block";
    parameter Real _resetValueP_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueP(start = _resetValueP_start) "Input to P part before controller activation";
    parameter Real _resetValueID_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueID(start = _resetValueID_start) "Output of controller before activation";
    Real resetValueI;
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_s = 0.08333333333333333 "Connector of setpoint input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_m "Connector of measurement input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of actuator output signal";
  protected
    record P_rec
      constant Real k = 10.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end P_rec;
  public
    P_rec P;
  protected
    record I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Boolean variable_Tau_i = false "True, if integrator time is set by variable input";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_i_const = 100.0 "Constant integrator time";
      constant Integer initOption = 504 "Initialisation option";
      constant Boolean y_startInputIsActive = true "True, if integrator initial output shall be set by variable input";
      constant Real y_start_const = 0 "Initial or guess value of output (= state)";
      constant importedFMUTypes.ClaRa_Basics_Units_Time startTime = 0 "Start time for integration";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput y_start;
    end I_rec;
  public
    I_rec I;
  protected
    record addPID_rec
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
      constant Real k3 = 1 "Gain of input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end addPID_rec;
  public
    addPID_rec addPID;
  protected
    record addI_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end addI_rec;
  public
    addI_rec addI;
  protected
    record gainTrack_rec
      constant Real k = 1.1111111111111112 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end gainTrack_rec;
  public
    gainTrack_rec gainTrack;
  protected
    record limiter_rec
      Real uMax "Upper limits of input signals";
      Real uMin "Lower limits of input signals";
      constant Boolean strict = false "= true, if strict limits with noEvent(..)";
      constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end limiter_rec;
  public
    limiter_rec limiter;
  protected
    record Dzero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end Dzero_rec;
  public
    Dzero_rec Dzero;
  protected
    record toPU_rec
      constant Real k = -1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end toPU_rec;
  public
    toPU_rec toPU;
  protected
    record feedback_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 = 0.08333333333333333 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end feedback_rec;
  public
    feedback_rec feedback;
  protected
    record fromPU_rec
      constant Real k = 1000000.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end fromPU_rec;
  public
    fromPU_rec fromPU;
  protected
    record switch_OnOff_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_I_rec;
  public
    switch_OnOff_I_rec switch_OnOff_I;
  protected
    record I_off_zero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end I_off_zero_rec;
  public
    I_off_zero_rec I_off_zero;
  protected
    record switch_OnOff_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 1E-06 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_rec;
  public
    switch_OnOff_rec switch_OnOff;
  protected
    record y_unlocked_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1E-06 "Value of Real output";
    end y_unlocked_rec;
  public
    y_unlocked_rec y_unlocked;
  protected
    record smoothPIDInput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDInput_rec;
  public
    smoothPIDInput_rec smoothPIDInput;
  protected
    record smoothPIDOutput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput_rec;
  public
    smoothPIDOutput_rec smoothPIDOutput;
  protected
    record addSat_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end addSat_rec;
  public
    addSat_rec addSat;
  protected
    record smoothPIDOutput1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput1_rec;
  public
    smoothPIDOutput1_rec smoothPIDOutput1;
  protected
    record y_start_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_start_I_rec;
  public
    y_start_I_rec y_start_I;
  protected
    record resetP_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end resetP_rec;
  public
    resetP_rec resetP;
  protected
    record y_unlocked1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked1_rec;
  public
    y_unlocked1_rec y_unlocked1;
  protected
    record resetPD_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end resetPD_rec;
  public
    resetPD_rec resetPD;
  protected
    record y_unlocked2_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked2_rec;
  public
    y_unlocked2_rec y_unlocked2;
  protected
    record activate__rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Value of Boolean output";
    end activate__rec;
  public
    activate__rec activate_;
  protected
    record time_lag_I_activation_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end time_lag_I_activation_rec;
  public
    time_lag_I_activation_rec time_lag_I_activation;
  protected
    record booleanPassThrough_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end booleanPassThrough_rec;
  public
    booleanPassThrough_rec booleanPassThrough;
  protected
    record I_activation_rec
      constant Real threshold = 0.0 "Comparison with respect to threshold";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end I_activation_rec;
  public
    I_activation_rec I_activation;
  end PI_Pump_cond_rec;
public
  PI_Pump_cond_rec PI_Pump_cond annotation(Dialog);
protected
  record quadruple6_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple6_rec;
public
  quadruple6_rec quadruple6;
protected
  record valve_IP1_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom "Nominal pressure difference for Kv definition";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_IP1_rec;
public
  valve_IP1_rec valve_IP1;
protected
  record Turbine_LP1_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_LP1_rec;
public
  Turbine_LP1_rec Turbine_LP1;
protected
  record quadruple7_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple7_rec;
public
  quadruple7_rec quadruple7;
protected
  record join_LP1_rec
    constant Integer N_sets = 2 "Number of data sets to be provided (if showData=true)";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[1]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[2]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_in;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record 'eye[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow(nominal = 1.0) "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[1]_rec';
  public
    'eye[1]_rec' 'eye[1]';
  protected
    record 'eye[2]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow(nominal = 1.0) "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[2]_rec';
  public
    'eye[2]_rec' 'eye[2]';
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet1_rec;
    public
      outlet1_rec outlet1;
    protected
      record outlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet2_rec;
    public
      outlet2_rec outlet2;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet1_rec;
  public
    outlet1_rec outlet1;
  protected
    record outlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet2_rec;
  public
    outlet2_rec outlet2;
  end join_LP1_rec;
public
  join_LP1_rec join_LP1;
protected
  record Pump_preheater_LP1_rec
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between pressure side and suction side";
    importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
    importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Power to the fluid";
    constant Real eta_mech = 0.9 "Mechanic efficiency of the drive";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_start = 1 "Initial guess value for mass flow";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zero";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput P_drive(nominal = 100000.0) "Power input of the pump's motor";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      importedFMUTypes.ClaRa_Basics_Units_Power powerAux;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          importedFMUTypes.ClaRa_Basics_Units_Power power_aux;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference";
        importedFMUTypes.ClaRa_Basics_Units_Length head "Head";
        importedFMUTypes.ClaRa_Basics_Units_Length NPSHa "Net positive suction head available";
        constant Real eta_hyd = 0 "Hydraulic efficiency";
        constant Real eta_mech = 0.9 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Hydraulic power";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  end Pump_preheater_LP1_rec;
public
  Pump_preheater_LP1_rec Pump_preheater_LP1;
protected
  record valve_IP2_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      Real flowIsChoked "1 if flow is choked, 0 if not";
      Real PR_choked "Pressure ratio at which choking occurs";
      constant Real diameter_inlet = 10 "Inlet fitting's diameter";
      constant Real diameter_valve = 10 "Valve diameter";
      constant Real diameter_outlet = 10 "Outlet fitting's diameter";
      constant Integer paraOption = 2 "Type of parametrisation";
      constant Real 'CL_valve[1,1]' = 0 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "Effective apperture as function of valve position in p.u.";
      Real Kv "Flow Coefficient (Delta_p_nom = 1e5 Pa, rho_nom=1000 kg/m^3(cold water))";
      constant Real x_T = 0.75 "Differential pressure ratio at which choking occurs";
      constant Real Kvs_in = 1 "Flow Coefficient at nominal opening (Delta_p_nom = 1e5 Pa, rho_nom=1000 kg/m^3(cold water))";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zero flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flowrate at full opening";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in_nom = 2.4 "Nominal density for Kv definition";
      constant Real zeta = 100 "Pressure Loss coefficient";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross = 1 "Valve inlet cross section";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
      Real Kvs "Actual value of Kvs_in depending on parametrisation option";
      Real aperture_ "Effective apperture";
      Boolean normIsValid "Validity of DIN";
      constant Real F_P = 1.0 "Pipe geometry correction factor";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_choke "Pressure difference at which choking occurs, always positive i.e. independent of flow direction";
      Real Y "Expansion factor";
      Real gamma "Heat capacity ratio at actual inlet";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        Real PR_choked "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        Real flowIsChoked "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_IP2_rec;
public
  valve_IP2_rec valve_IP2;
protected
  record join_HP_rec
    constant Integer N_sets = 2 "Number of data sets to be provided (if showData=true)";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[1]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[2]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_in;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record 'eye[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[1]_rec';
  public
    'eye[1]_rec' 'eye[1]';
  protected
    record 'eye[2]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow(nominal = 1.0) "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[2]_rec';
  public
    'eye[2]_rec' 'eye[2]';
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet1_rec;
    public
      outlet1_rec outlet1;
    protected
      record outlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet2_rec;
    public
      outlet2_rec outlet2;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet1_rec;
  public
    outlet1_rec outlet1;
  protected
    record outlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet2_rec;
  public
    outlet2_rec outlet2;
  end join_HP_rec;
public
  join_HP_rec join_HP;
protected
  record preheater_HP_rec
    constant Integer initOptionShell = 204 "Type of initialisation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 15 "Length of the HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2.6 "Diameter of HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_shell = 15.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux1 = 7.5 "Inlet position of auxilliary1 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux2 = 7.5 "Inlet position of auxilliary2 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_shell = 0.1 "Outlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius of all flanges";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of inner structure elements, additional to the tubes itself";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_shell "Nominal mass flow on shell side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_shell "Nominal pressure on shell side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_shell "Nominal specific enthalpy on shell side";
    constant Real yps_liq_nom = 0.5 "Relative volume of liquid phase at nominal point";
    constant Real 'yps_nom[1]' = 0.5 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    constant Real 'yps_nom[2]' = 0.5 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_shell "Start value of shell fluid pressure";
    constant Real level_rel_start = 0.5 "Start value for relative filling Level";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.02 "Inner diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.028 "Outer diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10 "Length of the tubes (one pass)";
    constant Integer N_tubes = 2000 "Number of tubes";
    constant Integer N_passes = 1 "Number of passes of the internal tubes";
    constant Boolean parallelTubes = true "True, if tubes are parallel to shell flow orientation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_tubes = 0.1 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_tubes = 0.1 "Outlet position from bottom";
    constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_par = 0.056 "Distance between tubes parallel to flow direction (center to center)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_ort = 0.056 "Distance between tubes orthogonal to flow direction (center to center)";
    constant Integer N_rows = 45 "Number of pipe rows in shell flow direction";
    constant Real CF_geo = 1 "Correction coefficient due to fins etc.";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_tubes "Nominal mass flow on tubes side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_tubes "Nominal pressure on side tubes";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_tubes "Nominal specific enthalpy on tubes side";
    constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_nom = 200000000.0 "Nominal heat flow rate";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start_tubes "Start value of tube fluid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_tubes(displayUnit = "bar") "Start value of tube fluid pressure";
    constant Integer initOptionTubes = 0 "Type of initialisation at tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[1]' = 473.15 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[2]' = 473.15 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[3]' = 473.15 "Initial wall temperature inner --> outer";
    constant Integer initOptionWall = 1 "Init option of Tube wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000 "HTC of the phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 448.82887044286184 "Heat transfer area at phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Real absorbInflow = 1 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of level calculation (table based)";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean levelOutput = true "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput level;
  protected
    record In2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In2_rec;
  public
    In2_rec In2;
  protected
    record Out2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out2_rec;
  public
    Out2_rec Out2;
  protected
    record Out1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out1_rec;
  public
    Out1_rec Out1;
  protected
    record In1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In1_rec;
  public
    In1_rec In1;
  protected
    record tubes_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
      constant Integer initOption = 0 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of system specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of system pressure";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "spec. enthalpy state";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 6.283185307179586 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 1256.6370614359173 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 1256.6370614359173 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 0.6283185307179586 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 0.6283185307179586 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1E-06 "Nominal horizonal area";
        constant Integer N_inlet = 1 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 0.1 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = -1 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.02 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_hyd = 0.02 "Hydraulic diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component (one pass)";
        constant Integer N_tubes = 2000 "Number of tubes in parallel";
        constant Integer N_passes = 1 "Number of passes of the tubes";
        constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record inlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record heat_rec
        parameter Modelica.Units.SI.Temperature _T_start = 288.15
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Modelica.Units.SI.Temperature T(start = _T_start, fixed=false) "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heat_rec;
    public
      heat_rec heat annotation(Dialog);
    protected
      record summary_rec
      protected
        record outline_rec
          constant Boolean showExpertSummary = false;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 6.283185307179586 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat = 1256.6370614359173 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record inlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          Modelica.Units.SI.Enthalpy H "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record fluidIn_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidIn_rec;
    public
      fluidIn_rec fluidIn;
    protected
      record fluidOut_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidOut_rec;
    public
      fluidOut_rec fluidOut;
    protected
      record heattransfer_rec
        constant Integer HT_type = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom = 3500 "Constant heat transfer coefficient";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 2.273642044169933E-07 "Nominal convective heat resistance";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        constant Real 'PL_alpha[1,1]' = 0.0 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[1,2]' = 0.2 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,1]' = 0.5 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,2]' = 0.6 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,1]' = 0.7 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,2]' = 0.72 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,1]' = 1 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,2]' = 1 "Correction factor for heat transfer in part load";
        constant Real CF_fouling = 1 "Scaling factor accounting for the fouling of the wall";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wi "Temperature difference between wall and fluid inlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wo "Temperature difference between wall and fluid outlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_mean "Mean temperature difference used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_U "Upper temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_L "Lower temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha "Heat transfer coefficient used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR "Convective heat resistance";
      protected
        record heat_rec
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end heat_rec;
      public
        heat_rec heat;
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_inflow;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_outflow;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_in = 0.0;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_out = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Absolute filling absLevel";
        constant Real level_rel = 0 "Relative filling absLevel";
        constant Real level_rel_start = 0 "Start value for relative filling Level";
        constant Boolean provideDensityDerivative = true "True if density derivative shall be provided";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p;
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 10 "Nominal pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss;
    end tubes_rec;
  public
    tubes_rec tubes annotation(Dialog);
  protected
    record shell_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 448.82887044286184 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
      constant Real level_rel_start = 0.5 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 2 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 33.662165283214634
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 67.32433056642927 "Volume of the component";
        constant Integer N_heat = 2 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 133.14069665913541 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]'(min = 1E-15) = 1759.291886010284 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 133.14069665913541 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2]'(min = 1E-15) = 1759.291886010284 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[2]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 4.077787264359552 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 5.3092915845667505 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 4.488288704428618 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 15.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 7.5 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 7.5 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 15.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2.6 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 15.0 "Length of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_t = 0.028 "Outer diameter of internal tubes";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10.0 "Length of the internal tubes (single pass)";
        constant Integer N_tubes = 2000 "Number of internal tubes";
        constant Integer N_passes = 1 "Number of passes of the internal tubes";
        constant Boolean parallelTubes = true "True, if tubes are parallel to main flow orientation, else false";
        constant Integer N_baffle = 0 "Number of baffles on shell side";
        constant Real interior(min = 1E-06, max = 1.0) = 0.8453648915187376 "Volume fraction of interior equipment";
        constant Real MIN = 1E-05 "Limiter";
        constant Modelica.Units.SI.Length Delta_z_ort = 0.056 "Distance between tubes orthogonal to flow direction (center to center)";
        constant Modelica.Units.SI.Length Delta_z_par = 0.056 "Distance between tubes parallel to flow direction (center to center)";
        constant Real a = 2.0 "Lateral alignment ratio";
        constant Real b = 2.0 "Vertical alignment ratio";
        constant Real psi = 0.6073009183012759 "Void ratio";
        constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly, false otherwise";
        constant Real fa = 1.3333333333333333 "Alignment factor";
        constant Integer N_rows(min = 1, max = 2000) = 45 "Number of pipe rows in flow direction (minimum = N_passes)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 1650 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap ";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 10000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap ";
        constant Integer heatSurfaceAlloc = 2 "To be considered heat transfer area";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 3.444912188136263E-07 "Nominal convective heat resistance";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 5.684105110424834E-08 "Nominal convective heat resistance";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 1650.0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 10000.0;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 3.444912188136263E-07 "Convective heat resistance";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 5.684105110424834E-08 "Convective heat resistance";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.5 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 1.0 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 15.0 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 7.55 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 7.55 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 14.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 7.45 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 7.45 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.15000000000000002 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.05 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[1]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]'(start = '_Delta_p[1]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]' "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 1000 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 1000 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 1000 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 1;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 67.32433056642927 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 1759.291886010284 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end shell_rec;
  public
    shell_rec shell annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 1 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.028 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.02 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 15.0 "Length of cylinder";
      constant Integer N_tubes = 2000 "Number of tubes in parallel";
      constant Integer N_passes = 1 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0.0 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 473.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 473.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 473.15 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 2240.8453203535887 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 4.4626016392876576E-08 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 70572.73737024114 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.0006666666666666666 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.0013333333333333333 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.002 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.01 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.010666666666666666 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.012 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.014 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1916.1998346554324;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1979.037138758565;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 2072.816330699571;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 2198.516328592804;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 2354.9373165159363;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 2543.5260706417916;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.010165755854576153;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.010499118106528893;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.01099663217174805;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.011663491372126345;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.012493330486502486;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.013493824900858218;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.01 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.010333333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.011333333333333332 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.013000000000000001 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.014 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 8.559687215737693E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 1.5621460280901982E-08 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 2.0444868896236902E-08 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 4.4626016392876576E-08 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 1947.1116463255364 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 2133.816732491072 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 2445.6014002223824 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.028 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.02 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 15.0 "Length of cylinder";
        constant Integer N_tubes = 2000 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.0006666666666666666 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.0013333333333333333 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.002 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.01 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.010666666666666666 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.012 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.014 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1916.1998346554324;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1979.037138758565;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 2072.816330699571;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 2198.516328592804;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 2354.9373165159363;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 2543.5260706417916;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.010165755854576153;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.010499118106528893;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.01099663217174805;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.011663491372126345;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.012493330486502486;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.013493824900858218;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.01 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.010333333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.011333333333333332 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.013000000000000001 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.014 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 70572.73737024114;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 7800.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Heat flow rate";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_in "Fluid temperature at inlet T_1_in - T_2_in";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_out "Fluid temperature at outlet T_1_out - T_2_out";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA "Overall heat transmission";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA_nom = 2115702.0058969334 "Nominal overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
      end outline_rec;
    public
      outline_rec outline;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record 'eye_int2[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int2[1]_rec';
  public
    'eye_int2[1]_rec' 'eye_int2[1]';
  protected
    record eye2_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye2_rec;
  public
    eye2_rec eye2;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record eye1_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye1_rec;
  public
    eye1_rec eye1;
  protected
    record aux1_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux1_rec;
  public
    aux1_rec aux1;
  protected
    record aux2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux2_rec;
  public
    aux2_rec aux2;
  end preheater_HP_rec;
public
  preheater_HP_rec preheater_HP annotation(Dialog);
protected
  record valve_HP_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = false "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      Real flowIsChoked "1 if flow is choked, 0 if not";
      Real PR_choked "Pressure ratio at which choking occurs";
      constant Real diameter_inlet = 10 "Inlet fitting's diameter";
      constant Real diameter_valve = 10 "Valve diameter";
      constant Real diameter_outlet = 10 "Outlet fitting's diameter";
      constant Integer paraOption = 2 "Type of parametrisation";
      constant Real 'CL_valve[1,1]' = 0 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "Effective apperture as function of valve position in p.u.";
      Real Kv "Flow Coefficient (Delta_p_nom = 1e5 Pa, rho_nom=1000 kg/m^3(cold water))";
      constant Real x_T = 0.75 "Differential pressure ratio at which choking occurs";
      constant Real Kvs_in = 1 "Flow Coefficient at nominal opening (Delta_p_nom = 1e5 Pa, rho_nom=1000 kg/m^3(cold water))";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zero flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flowrate at full opening";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1100000.0 "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in_nom = 25 "Nominal density for Kv definition";
      constant Real zeta = 100 "Pressure Loss coefficient";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross = 1 "Valve inlet cross section";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
      Real Kvs "Actual value of Kvs_in depending on parametrisation option";
      Real aperture_ "Effective apperture";
      Boolean normIsValid "Validity of DIN";
      constant Real F_P = 1.0 "Pipe geometry correction factor";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_choke "Pressure difference at which choking occurs, always positive i.e. independent of flow direction";
      Real Y "Expansion factor";
      Real gamma "Heat capacity ratio at actual inlet";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        Real PR_choked "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        Real flowIsChoked "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_HP_rec;
public
  valve_HP_rec valve_HP;
protected
  record valveControl_preheater_HP_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = false "True, if valve is check valve";
    constant Boolean openingInputIsActive = true "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput opening_in "=1: completely open, =0: completely closed";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      Real flowIsChoked "1 if flow is choked, 0 if not";
      Real PR_choked "Pressure ratio at which choking occurs";
      constant Real diameter_inlet = 10 "Inlet fitting's diameter";
      constant Real diameter_valve = 10 "Valve diameter";
      constant Real diameter_outlet = 10 "Outlet fitting's diameter";
      constant Real F_L = 0.75 "Liquid pressure recovery factor when no reducers are installed";
      constant Integer paraOption = 2 "Type of parametrisation";
      constant Real 'CL_valve[1,1]' = 0 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "Effective apperture as function of valve position in p.u.";
      constant Real Kvs_in = 1 "Flow Coefficient at nominal opening (Delta_p_nom = 1e5 Pa, rho_nom=1000 kg/m^3(cold water))";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zeor flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flowrate at full opening";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in_nom = 800 "Nominal density for Kv definition";
      constant Real zeta = 100 "Pressure Loss coefficient";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross = 1 "Valve inlet cross section";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
      Real Kvs "Actual value of Kvs_in depending on parametrisation option";
      Real Kv "Flow Coefficient (Delta_p_nom = 1e5 Pa, rho_nom=1000 kg/m^3(cold water))";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_choke "Pressure difference at which choking occurs, always positive i.e. independent of flow direction";
      Boolean normIsValid "Validity of DIN";
      constant Real F_P = 1.0 "Pipe geometry correction factor";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        Real PR_choked "Critical pressure ratio";
        Real opening_ "Valve opening in p.u.";
        Real flowIsChoked "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valveControl_preheater_HP_rec;
public
  valveControl_preheater_HP_rec valveControl_preheater_HP;
protected
  record statePoint_rec
    constant Integer stateViewerIndex = 0 "Index for StateViewer";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure of state";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy of state";
    importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific enthalpy of state";
    importedFMUTypes.ClaRa_Basics_Units_Temperature T(nominal = 300.0) "Temperature of state";
    importedFMUTypes.ClaRa_Basics_Units_VolumeMassSpecific v "Specific volume of state";
  protected
    record port_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      constant Modelica.Units.SI.SpecificEnthalpy h_outflow = 0 "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end port_rec;
  public
    port_rec port;
  end statePoint_rec;
public
  statePoint_rec statePoint;
protected
  record preheater_LP1_rec
    constant Integer initOptionShell = 204 "Type of initialisation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10 "Length of the HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 3 "Diameter of HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_shell = 10.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux1 = 5.0 "Inlet position of auxilliary1 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux2 = 5.0 "Inlet position of auxilliary2 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_shell = 0.1 "Outlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius of all flanges";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of inner structure elements, additional to the tubes itself";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_shell "Nominal mass flow on shell side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_shell "Nominal pressure on shell side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_shell "Nominal specific enthalpy on shell side";
    constant Real yps_liq_nom = 0.1 "Relative volume of liquid phase at nominal point";
    constant Real 'yps_nom[1]' = 0.1 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    constant Real 'yps_nom[2]' = 0.9 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_shell "Start value of shell fluid pressure";
    constant Real level_rel_start = 0.1 "Start value for relative filling Level";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10 "Length of the tubes (one pass)";
    constant Integer N_tubes = 1000 "Number of tubes";
    constant Integer N_passes = 1 "Number of passes of the internal tubes";
    constant Boolean parallelTubes = true "True, if tubes are parallel to shell flow orientation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_tubes = 1.5 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_tubes = 1.5 "Outlet position from bottom";
    constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
    constant Integer N_rows = 32 "Number of pipe rows in shell flow direction";
    constant Real CF_geo = 1 "Correction coefficient due to fins etc.";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_tubes "Nominal mass flow on tubes side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_tubes "Nominal pressure on side tubes";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_tubes "Nominal specific enthalpy on tubes side";
    constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_nom = 200000000.0 "Nominal heat flow rate";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start_tubes "Start value of tube fluid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_tubes(displayUnit = "bar") "Start value of tube fluid pressure";
    constant Integer initOptionTubes = 0 "Type of initialisation at tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[1]' = 350 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[2]' = 400 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[3]' = 440 "Initial wall temperature inner --> outer";
    constant Integer initOptionWall = 1 "Init option of Tube wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000 "HTC of the phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 494.4866836750335 "Heat transfer area at phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Real absorbInflow = 1 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of level calculation (table based)";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean levelOutput = true "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput level;
  protected
    record In2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In2_rec;
  public
    In2_rec In2;
  protected
    record Out2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out2_rec;
  public
    Out2_rec Out2;
  protected
    record Out1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out1_rec;
  public
    Out1_rec Out1;
  protected
    record In1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In1_rec;
  public
    In1_rec In1;
  protected
    record tubes_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
      constant Integer initOption = 0 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of system specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of system pressure";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "spec. enthalpy state";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 19.63495408493621 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 1570.7963267948965 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 1570.7963267948965 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 1.9634954084936211 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 1.9634954084936211 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1E-06 "Nominal horizonal area";
        constant Integer N_inlet = 1 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 1.5 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 1.5 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = -1 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.05 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_hyd = 0.05 "Hydraulic diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component (one pass)";
        constant Integer N_tubes = 1000 "Number of tubes in parallel";
        constant Integer N_passes = 1 "Number of passes of the tubes";
        constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record inlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record heat_rec
        parameter Modelica.Units.SI.Temperature _T_start = 288.15
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Modelica.Units.SI.Temperature T(start = _T_start, fixed=false) "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heat_rec;
    public
      heat_rec heat annotation(Dialog);
    protected
      record summary_rec
      protected
        record outline_rec
          constant Boolean showExpertSummary = false;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 19.63495408493621 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat = 1570.7963267948965 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record inlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          Modelica.Units.SI.Enthalpy H "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record fluidIn_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidIn_rec;
    public
      fluidIn_rec fluidIn;
    protected
      record fluidOut_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidOut_rec;
    public
      fluidOut_rec fluidOut;
    protected
      record heattransfer_rec
        constant Integer HT_type = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom = 3000 "Constant heat transfer coefficient";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 2.122065907891938E-07 "Nominal convective heat resistance";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        constant Real 'PL_alpha[1,1]' = 0.0 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[1,2]' = 0.55 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,1]' = 0.5 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,2]' = 0.65 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,1]' = 0.7 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,2]' = 0.72 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,1]' = 0.8 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,2]' = 0.77 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,1]' = 1 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,2]' = 1 "Correction factor for heat transfer in part load";
        constant Real CF_fouling = 1 "Scaling factor accounting for the fouling of the wall";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wi "Temperature difference between wall and fluid inlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wo "Temperature difference between wall and fluid outlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_mean "Mean temperature difference used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_U "Upper temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_L "Lower temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha "Heat transfer coefficient used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR "Convective heat resistance";
      protected
        record heat_rec
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end heat_rec;
      public
        heat_rec heat;
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_inflow;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_outflow;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_in = 0.0;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_out = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Absolute filling absLevel";
        constant Real level_rel = 0 "Relative filling absLevel";
        constant Real level_rel_start = 0 "Start value for relative filling Level";
        constant Boolean provideDensityDerivative = true "True if density derivative shall be provided";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p;
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1000 "Nominal pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss;
    end tubes_rec;
  public
    tubes_rec tubes annotation(Dialog);
  protected
    record shell_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 494.4866836750335 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
      constant Real level_rel_start = 0.1 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 2 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 4.944866836750335
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 49.448668367503345 "Volume of the component";
        constant Integer N_heat = 2 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 108.38494654884785 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]'(min = 1E-15) = 1633.6281798666923 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 108.38494654884785 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2]'(min = 1E-15) = 1633.6281798666923 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[2]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 4.944866836750334 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 7.0685834705770345 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 4.944866836750335 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 10.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 10.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 3.0 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_t = 0.052 "Outer diameter of internal tubes";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10.0 "Length of the internal tubes (single pass)";
        constant Integer N_tubes = 1000 "Number of internal tubes";
        constant Integer N_passes = 1 "Number of passes of the internal tubes";
        constant Boolean parallelTubes = true "True, if tubes are parallel to main flow orientation, else false";
        constant Integer N_baffle = 0 "Number of baffles on shell side";
        constant Real interior(min = 1E-06, max = 1.0) = 0.6995555555555556 "Volume fraction of interior equipment";
        constant Real MIN = 1E-05 "Limiter";
        constant Modelica.Units.SI.Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
        constant Modelica.Units.SI.Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
        constant Real a = 2.0 "Lateral alignment ratio";
        constant Real b = 2.0 "Vertical alignment ratio";
        constant Real psi = 0.6073009183012759 "Void ratio";
        constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly, false otherwise";
        constant Real fa = 1.3333333333333333 "Alignment factor";
        constant Integer N_rows(min = 1, max = 1000) = 32 "Number of pipe rows in flow direction (minimum = N_passes)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 1500 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 8000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 4.080895976715265E-07 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 7.651679956341123E-08 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant Integer heatSurfaceAlloc = 2 "To be considered heat transfer area";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 1500.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 8000.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 4.080895976715265E-07 "Convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 7.651679956341123E-08 "Convective heat resistance || [1]:= liq | [2]:= vap";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.1 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 1.0 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 10.0 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 9.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.15000000000000002 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.05 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[1]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]'(start = '_Delta_p[1]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]' "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 100 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 1;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 49.448668367503345 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 1633.6281798666923 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end shell_rec;
  public
    shell_rec shell annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 1 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of cylinder";
      constant Integer N_tubes = 1000 "Number of tubes in parallel";
      constant Integer N_passes = 1 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0.0 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 350.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 400.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 440.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 1602.006899421698 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 1.560542592483502E-08 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 12497.255575980154 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1573.412868650795;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1578.6488612227915;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1586.4985298835493;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1596.9705431674163;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1610.0534641818956;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1625.7615508406038;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 2.643779545653395E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 5.235435505330284E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 7.72621087385135E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 1.5605425924835027E-08 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 1576.0265160977663 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 1591.7173126951916 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 1617.869380488315 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of cylinder";
        constant Integer N_tubes = 1000 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1573.412868650795;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1578.6488612227915;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1586.4985298835493;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1596.9705431674163;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1610.0534641818956;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1625.7615508406038;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 12497.255575980154;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 7800.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Heat flow rate";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_in "Fluid temperature at inlet T_1_in - T_2_in";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_out "Fluid temperature at outlet T_1_out - T_2_out";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA "Overall heat transmission";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA_nom = 2963085.032511986 "Nominal overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
      end outline_rec;
    public
      outline_rec outline;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record 'eye_int2[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int2[1]_rec';
  public
    'eye_int2[1]_rec' 'eye_int2[1]';
  protected
    record eye2_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye2_rec;
  public
    eye2_rec eye2;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record eye1_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye1_rec;
  public
    eye1_rec eye1;
  protected
    record aux1_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux1_rec;
  public
    aux1_rec aux1;
  protected
    record aux2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux2_rec;
  public
    aux2_rec aux2;
  end preheater_LP1_rec;
public
  preheater_LP1_rec preheater_LP1 annotation(Dialog);
protected
  record setPoint_preheater_HP_rec
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.5 "Value of Real output";
  end setPoint_preheater_HP_rec;
public
  setPoint_preheater_HP_rec setPoint_preheater_HP;
protected
  record PI_valveControl_preheater_HP_rec
    Real controlError "Control error (set point - measurement)";
    constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI "Type of controller";
    constant Real 'sign' = 1 "set to 1 if a positive control error leads to a positive control output, else -1";
    constant Boolean perUnitConversion = true "True, if input and output values should be normalised with respect to reference values";
    constant Real u_ref = 1 "Reference value for controlled variable";
    constant Real y_ref = 1 "Reference value for actuated variable";
    constant Real y_max = 1 "Upper limit of output";
    constant Real y_min = 0.01 "Lower limit of output";
    constant Real k = 2 "Gain of Proportional block";
    constant Modelica.Units.SI.Time Tau_i(min = 1E-60) = 10 "1/Ti is gain of integrator block";
    constant Modelica.Units.SI.Time Tau_d(min = 0.0) = 0.1 "Gain of derivative block";
    constant Modelica.Units.SI.Time Ni(min = 1E-13) = 0.9 "1/Ni is gain of anti-windup compensation";
    constant Real Nd = 1 "The smaller Nd, the more ideal the derivative block, setting Nd=0 introduces ideal derivative";
    constant Boolean use_activateInput = false "Provide Boolean input to switch controller on/off.";
    constant importedFMUTypes.ClaRa_Basics_Units_Time t_activation = 0.0 "Time when controller is switched on. For use_activateInput==true the controller is switched on if (time>t_activation AND activateController=true).";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_lag_I = 0.0 "Time lag for activation of integral part AFTER controller is being switched on ";
    constant Real y_inactive = 1 "Controller output if controller is not active";
    constant Real Tau_in(min = 0.0) = 0 "Time constant for input smoothening, Tau_in=0 refers to signal no smoothening";
    constant Real Tau_out(min = 0.0) = 0 "time constant for output smoothening, Tau_out=0 refers to signal no smoothening";
    constant Integer initOption = 796 "Initialisation option";
    constant Boolean limitsAtInit = true "= false, if limits are ignored during initializiation";
    constant Real xi_start = 0 "Initial or guess value value for integrator output (= integrator state)";
    constant Real y_start = 0.2 "Initial value of output";
    constant Real Tau_add(min = 0.0) = 0 "Set to >0 for additional state after add block in controller, if DAE-index reduction fails.";
    constant Real xd_start = 0 "Initial or guess value for state of derivative block";
    parameter Real _resetValueP_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueP(start = _resetValueP_start) "Input to P part before controller activation";
    parameter Real _resetValueID_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueID(start = _resetValueID_start) "Output of controller before activation";
    Real resetValueI;
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_s "Connector of setpoint input signal";
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_m = 0.5 "Connector of measurement input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of actuator output signal";
  protected
    record P_rec
      constant Real k = 2.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end P_rec;
  public
    P_rec P;
  protected
    record I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Boolean variable_Tau_i = false "True, if integrator time is set by variable input";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_i_const = 10.0 "Constant integrator time";
      constant Integer initOption = 504 "Initialisation option";
      constant Boolean y_startInputIsActive = true "True, if integrator initial output shall be set by variable input";
      constant Real y_start_const = 0 "Initial or guess value of output (= state)";
      constant importedFMUTypes.ClaRa_Basics_Units_Time startTime = 0 "Start time for integration";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput y_start = 0.2;
    end I_rec;
  public
    I_rec I;
  protected
    record addPID_rec
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
      constant Real k3 = 1 "Gain of input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end addPID_rec;
  public
    addPID_rec addPID;
  protected
    record addI_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end addI_rec;
  public
    addI_rec addI;
  protected
    record gainTrack_rec
      constant Real k = 1.1111111111111112 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end gainTrack_rec;
  public
    gainTrack_rec gainTrack;
  protected
    record limiter_rec
      constant Real uMax = 1.0 "Upper limits of input signals";
      constant Real uMin = 0.01 "Lower limits of input signals";
      constant Boolean strict = false "= true, if strict limits with noEvent(..)";
      constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end limiter_rec;
  public
    limiter_rec limiter;
  protected
    record Dzero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end Dzero_rec;
  public
    Dzero_rec Dzero;
  protected
    record toPU_rec
      constant Real k = 1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end toPU_rec;
  public
    toPU_rec toPU;
  protected
    record feedback_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0.5 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end feedback_rec;
  public
    feedback_rec feedback;
  protected
    record fromPU_rec
      constant Real k = 1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end fromPU_rec;
  public
    fromPU_rec fromPU;
  protected
    record switch_OnOff_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_I_rec;
  public
    switch_OnOff_I_rec switch_OnOff_I;
  protected
    record I_off_zero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end I_off_zero_rec;
  public
    I_off_zero_rec I_off_zero;
  protected
    record switch_OnOff_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 1.0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_rec;
  public
    switch_OnOff_rec switch_OnOff;
  protected
    record y_unlocked_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
    end y_unlocked_rec;
  public
    y_unlocked_rec y_unlocked;
  protected
    record smoothPIDInput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDInput_rec;
  public
    smoothPIDInput_rec smoothPIDInput;
  protected
    record smoothPIDOutput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput_rec;
  public
    smoothPIDOutput_rec smoothPIDOutput;
  protected
    record addSat_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end addSat_rec;
  public
    addSat_rec addSat;
  protected
    record smoothPIDOutput1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput1_rec;
  public
    smoothPIDOutput1_rec smoothPIDOutput1;
  protected
    record y_start_I_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.2 "Value of Real output";
    end y_start_I_rec;
  public
    y_start_I_rec y_start_I;
  protected
    record resetP_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end resetP_rec;
  public
    resetP_rec resetP;
  protected
    record y_unlocked1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked1_rec;
  public
    y_unlocked1_rec y_unlocked1;
  protected
    record resetPD_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end resetPD_rec;
  public
    resetPD_rec resetPD;
  protected
    record y_unlocked2_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked2_rec;
  public
    y_unlocked2_rec y_unlocked2;
  protected
    record activate__rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Value of Boolean output";
    end activate__rec;
  public
    activate__rec activate_;
  protected
    record time_lag_I_activation_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end time_lag_I_activation_rec;
  public
    time_lag_I_activation_rec time_lag_I_activation;
  protected
    record booleanPassThrough_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end booleanPassThrough_rec;
  public
    booleanPassThrough_rec booleanPassThrough;
  protected
    record I_activation_rec
      constant Real threshold = 0.0 "Comparison with respect to threshold";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end I_activation_rec;
  public
    I_activation_rec I_activation;
  end PI_valveControl_preheater_HP_rec;
public
  PI_valveControl_preheater_HP_rec PI_valveControl_preheater_HP annotation(Dialog);
protected
  record measurement_rec
    constant Real k = 1 "Gain";
    constant Modelica.Units.SI.Time T = 10 "Time Constant";
    constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
    constant Real y_start = 0.1 "Initial or guess value of output (= state)";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
  end measurement_rec;
public
  measurement_rec measurement;
protected
  record INIT_rec
    Real P_target_;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 420.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_condenser = 3800.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_HP_p_tap = 4600000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_HP_m_flow_tap = 42.812;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP1_p_tap = 450000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP1_m_flow_tap = 29.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP2_p_tap = 95000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP2_m_flow_tap = 17;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP3_p_tap = 25000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP3_m_flow_tap = 4;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP4_p_tap = 9600.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP4_m_flow_tap = 8;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT = 1240000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Length downComer_z_in = 0;
    constant importedFMUTypes.ClaRa_Basics_Units_Length downComer_z_out = -8;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure downComer_Delta_p_nom = 10000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_HP_Delta_p_nom = 1100000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_LP1_Delta_p_nom = 5000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_LP2_Delta_p_nom = 1000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_LP3_Delta_p_nom = 400.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valvePreFeedWaterTank_Delta_p_nom = 100.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_LS_nom = 823.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_RS_nom = 833.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_out_nom = 26200000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_out_nom = 5100000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_LS_nom = 4000000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_RS_nom = 491000.0;
    constant Real 'CharLine_Delta_p_HP_mLS_[1,1]' = 0.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[1,2]' = 0.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[2,1]' = 0.1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[2,2]' = 0.01 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[3,1]' = 0.2 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[3,2]' = 0.04 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[4,1]' = 0.3 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[4,2]' = 0.09 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[5,1]' = 0.4 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[5,2]' = 0.16 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[6,1]' = 0.5 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[6,2]' = 0.25 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[7,1]' = 0.6 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[7,2]' = 0.36 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[8,1]' = 0.7 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[8,2]' = 0.49 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[9,1]' = 0.8 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[9,2]' = 0.64 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[10,1]' = 0.9 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[10,2]' = 0.81 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[11,1]' = 1.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[11,2]' = 1.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[1,1]' = 0.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[1,2]' = 0.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[2,1]' = 0.1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[2,2]' = 0.01 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[3,1]' = 0.2 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[3,2]' = 0.04 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[4,1]' = 0.3 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[4,2]' = 0.09 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[5,1]' = 0.4 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[5,2]' = 0.16 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[6,1]' = 0.5 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[6,2]' = 0.25 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[7,1]' = 0.6 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[7,2]' = 0.36 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[8,1]' = 0.7 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[8,2]' = 0.49 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[9,1]' = 0.8 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[9,2]' = 0.64 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[10,1]' = 0.9 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[10,2]' = 0.81 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[11,1]' = 1.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[11,2]' = 1.0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real efficiency_Pump_cond = 0.9;
    constant Real efficiency_Pump_preheater_LP1 = 0.9;
    constant Real efficiency_Pump_preheater_LP3 = 1;
    constant Real efficiency_Pump_FW = 0.9;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure IP1_pressure = 2600000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure IP2_pressure = 1400000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure IP3_pressure(displayUnit = "kPa") = 500000.0;
    constant Real efficiency_Turb_HP = 1.0;
    constant Real efficiency_Turb_IP1 = 1.0;
    constant Real efficiency_Turb_IP2 = 1.0;
    constant Real efficiency_Turb_IP3 = 1.0;
    constant Real efficiency_Turb_LP1 = 1.0;
    constant Real efficiency_Turb_LP2 = 1.0;
    constant Real efficiency_Turb_LP3 = 1.0;
    constant Real efficiency_Turb_LP4 = 1.0;
  protected
    record condenser_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_condenser = 3800.0 "|Fundamental Definitions|Condenser pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs(min = 0.0) = 0 "|Fundamental Definitions|Filling level in hotwell";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_in = 3800.0 "Inlet pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_out = 3800.0 "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in(fixed=false) "Inlet mass flow";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end condenser_rec;
  public
    condenser_rec condenser;
  protected
    record Pump_cond_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Pump_cond_rec;
  public
    Pump_cond_rec Pump_cond;
  protected
    record preheater_LP1_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 450000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 29.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP1_rec;
  public
    preheater_LP1_rec preheater_LP1;
  protected
    record pump_preheater_LP1_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end pump_preheater_LP1_rec;
  public
    pump_preheater_LP1_rec pump_preheater_LP1;
  protected
    record valvePreFeedWaterTank_rec
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 100.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressur drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valvePreFeedWaterTank_rec;
  public
    valvePreFeedWaterTank_rec valvePreFeedWaterTank;
  protected
    record feedwatertank_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT_nom = 1240000.0 "Feed water tank pressure at nominal load";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Mass flow rate at nomoinal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in1(fixed=false) "Spec. enthalpy at tapping 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in2(fixed=false) "Spec. enthalpy at tapping 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy at condensate inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Condensate inlet flow";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap1(fixed=false) "Tapping 1 inlet flow";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT "Feedwater tank pressure at current load";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT_out "Feedwater tank condensate outlet pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap2 "Mass flow of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_FW "Mass flow of the condensate";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at feedwater outlet";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap1_rec;
      public
        inlet_tap1_rec inlet_tap1;
      protected
        record inlet_tap2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap2_rec;
      public
        inlet_tap2_rec inlet_tap2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record tap_in2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in2_rec;
    public
      tap_in2_rec tap_in2;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in1_rec;
    public
      tap_in1_rec tap_in1;
    end feedwatertank_rec;
  public
    feedwatertank_rec feedwatertank;
  protected
    record join_LP_main_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2(fixed=false) "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3 "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end join_LP_main_rec;
  public
    join_LP_main_rec join_LP_main;
  protected
    record Pump_FW_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Pump_FW_rec;
  public
    Pump_FW_rec Pump_FW;
  protected
    record preheater_HP_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 4600000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 42.812 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_HP_rec;
  public
    preheater_HP_rec preheater_HP;
  protected
    record boiler_rec
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_LS_nom = 420.0 "Live steam flow at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_RS_nom = 420.0 "Reheated steam flow at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_LS_nom = 823.0 "Live steam temperature at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_RS_nom = 833.0 "Reheated steam temperature at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_LS_nom = 4000000.0 "Live steam pressure loss at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_RS_nom = 491000.0 "Reheat steam pressure loss at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_out_nom = 26200000.0 "Live steam pressure at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_out_nom = 5100000.0 "Reheated steam pressure at nominal load";
      constant Real 'CharLine_Delta_p_HP_mLS_[1,1]' = 0.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[1,2]' = 0.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[2,1]' = 0.1 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[2,2]' = 0.01 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[3,1]' = 0.2 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[3,2]' = 0.04 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[4,1]' = 0.3 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[4,2]' = 0.09 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[5,1]' = 0.4 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[5,2]' = 0.16 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[6,1]' = 0.5 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[6,2]' = 0.25 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[7,1]' = 0.6 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[7,2]' = 0.36 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[8,1]' = 0.7 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[8,2]' = 0.49 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[9,1]' = 0.8 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[9,2]' = 0.64 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[10,1]' = 0.9 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[10,2]' = 0.81 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[11,1]' = 1.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[11,2]' = 1.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[1,1]' = 0.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[1,2]' = 0.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[2,1]' = 0.1 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[2,2]' = 0.01 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[3,1]' = 0.2 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[3,2]' = 0.04 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[4,1]' = 0.3 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[4,2]' = 0.09 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[5,1]' = 0.4 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[5,2]' = 0.16 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[6,1]' = 0.5 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[6,2]' = 0.25 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[7,1]' = 0.6 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[7,2]' = 0.36 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[8,1]' = 0.7 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[8,2]' = 0.49 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[9,1]' = 0.8 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[9,2]' = 0.64 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[10,1]' = 0.9 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[10,2]' = 0.81 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[11,1]' = 1.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[11,2]' = 1.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Rprt: Heating power";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cRH(fixed=false) "Mass flow rate of cold Re-Heat ";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_LS_in(fixed=false) "Inlet specific enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_RS_in(fixed=false) "Inlet specific enthalpy";
      parameter Real Delta_p_LS_(fixed=false) "Rprt: current LS pressure loss";
      parameter Real Delta_p_RS_(fixed=false) "Rprt: current RS pressure loss";
      Real Q_flow_LS_ "Rprt: Heat release in life steam at current load";
      Real Q_flow_RS_ "Rprt: Heat release in reheated steam at current load";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_LS_out "Outlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_RS_out "Outlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_in "Inlet pressure";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_out "Life steam pressure at current load";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_feed(fixed=false) "HP inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_out "Reheated steam pressure at current load";
    protected
      record hotReheat_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end hotReheat_rec;
    public
      hotReheat_rec hotReheat;
    protected
      record coldReheat_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end coldReheat_rec;
    public
      coldReheat_rec coldReheat;
    protected
      record feedWater_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end feedWater_rec;
    public
      feedWater_rec feedWater;
    protected
      record liveSteam_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end liveSteam_rec;
    public
      liveSteam_rec liveSteam;
    end boiler_rec;
  public
    boiler_rec boiler;
  protected
    record Turbine_HP_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_HP_rec;
  public
    Turbine_HP_rec Turbine_HP;
  protected
    record join_HP_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end join_HP_rec;
  public
    join_HP_rec join_HP;
  protected
    record valve_HP_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1100000.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_HP_rec;
  public
    valve_HP_rec valve_HP;
  protected
    record valve_cut_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_cut_rec;
  public
    valve_cut_rec valve_cut;
  protected
    record valve2_HP_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve2_HP_rec;
  public
    valve2_HP_rec valve2_HP;
  protected
    record Turbine_IP1_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_IP1_rec;
  public
    Turbine_IP1_rec Turbine_IP1;
  protected
    record Turbine_LP1_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP1_rec;
  public
    Turbine_LP1_rec Turbine_LP1;
  protected
    record split_LP1_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end split_LP1_rec;
  public
    split_LP1_rec split_LP1;
  protected
    record valve_IP1_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_IP1_rec;
  public
    valve_IP1_rec valve_IP1;
  protected
    record valve_LP1_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 5000.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_LP1_rec;
  public
    valve_LP1_rec valve_LP1;
  protected
    record Turbine_LP4_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP4_rec;
  public
    Turbine_LP4_rec Turbine_LP4;
  protected
    record triple_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple_rec;
  public
    triple_rec triple;
  protected
    record triple1_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple1_rec;
  public
    triple1_rec triple1;
  protected
    record triple2_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple2_rec;
  public
    triple2_rec triple2;
  protected
    record triple3_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple3_rec;
  public
    triple3_rec triple3;
  protected
    record triple5_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple5_rec;
  public
    triple5_rec triple5;
  protected
    record triple6_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple6_rec;
  public
    triple6_rec triple6;
  protected
    record triple7_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple7_rec;
  public
    triple7_rec triple7;
  protected
    record triple8_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple8_rec;
  public
    triple8_rec triple8;
  protected
    record triple9_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple9_rec;
  public
    triple9_rec triple9;
  protected
    record triple10_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple10_rec;
  public
    triple10_rec triple10;
  protected
    record triple11_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple11_rec;
  public
    triple11_rec triple11;
  protected
    record triple12_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple12_rec;
  public
    triple12_rec triple12;
  protected
    record triple13_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple13_rec;
  public
    triple13_rec triple13;
  protected
    record triple15_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple15_rec;
  public
    triple15_rec triple15;
  protected
    record triple16_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple16_rec;
  public
    triple16_rec triple16;
  protected
    record triple17_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple17_rec;
  public
    triple17_rec triple17;
  protected
    record triple18_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple18_rec;
  public
    triple18_rec triple18;
  protected
    record triple19_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple19_rec;
  public
    triple19_rec triple19;
  protected
    record triple20_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple20_rec;
  public
    triple20_rec triple20;
  protected
    record Turbine_IP2_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_IP2_rec;
  public
    Turbine_IP2_rec Turbine_IP2;
  protected
    record Turbine_IP3_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_IP3_rec;
  public
    Turbine_IP3_rec Turbine_IP3;
  protected
    record splitIP2_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 1400000.0 "Nominal split pressure";
      constant Real 'CharLine_p_P_target_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[1,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Split pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Spec. enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end splitIP2_rec;
  public
    splitIP2_rec splitIP2;
  protected
    record splitIP3_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 500000.0 "Nominal split pressure";
      constant Real 'CharLine_p_P_target_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[1,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Split pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Spec. enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end splitIP3_rec;
  public
    splitIP3_rec splitIP3;
  protected
    record pressureAnchor_constFlow1_1_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 2600000.0 "Pressure";
      constant Real 'CharLine_p_P_target_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[1,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    end pressureAnchor_constFlow1_1_rec;
  public
    pressureAnchor_constFlow1_1_rec pressureAnchor_constFlow1_1;
  protected
    record Turbine_LP3_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP3_rec;
  public
    Turbine_LP3_rec Turbine_LP3;
  protected
    record Turbine_LP2_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP2_rec;
  public
    Turbine_LP2_rec Turbine_LP2;
  protected
    record valve2_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve2_rec;
  public
    valve2_rec valve2;
  protected
    record mixerIP2_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end mixerIP2_rec;
  public
    mixerIP2_rec mixerIP2;
  protected
    record preheater_LP2_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 95000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 17.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP2_rec;
  public
    preheater_LP2_rec preheater_LP2;
  protected
    record preheater_LP3_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 25000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 21.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP3_rec;
  public
    preheater_LP3_rec preheater_LP3;
  protected
    record preheater_LP4_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 9600.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 8.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP4_rec;
  public
    preheater_LP4_rec preheater_LP4;
  protected
    record valve_IP2_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_IP2_rec;
  public
    valve_IP2_rec valve_IP2;
  protected
    record split_LP2_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end split_LP2_rec;
  public
    split_LP2_rec split_LP2;
  protected
    record split_LP3_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end split_LP3_rec;
  public
    split_LP3_rec split_LP3;
  protected
    record valve_LP2_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1000.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_LP2_rec;
  public
    valve_LP2_rec valve_LP2;
  protected
    record valve_LP3_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 400.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_LP3_rec;
  public
    valve_LP3_rec valve_LP3;
  protected
    record pump_preheater_LP3_rec
      constant Real efficiency = 1.0 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end pump_preheater_LP3_rec;
  public
    pump_preheater_LP3_rec pump_preheater_LP3;
  protected
    record join_preheater_LP3_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2(fixed=false) "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3 "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end join_preheater_LP3_rec;
  public
    join_preheater_LP3_rec join_preheater_LP3;
  protected
    record valve_cutPressureLP4_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_cutPressureLP4_rec;
  public
    valve_cutPressureLP4_rec valve_cutPressureLP4;
  protected
    record mixer_condenser_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2(fixed=false) "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3 "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end mixer_condenser_rec;
  public
    mixer_condenser_rec mixer_condenser;
  protected
    record triple4_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple4_rec;
  public
    triple4_rec triple4;
  protected
    record triple14_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple14_rec;
  public
    triple14_rec triple14;
  protected
    record triple21_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple21_rec;
  public
    triple21_rec triple21;
  protected
    record triple22_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple22_rec;
  public
    triple22_rec triple22;
  protected
    record triple23_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple23_rec;
  public
    triple23_rec triple23;
  protected
    record triple24_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple24_rec;
  public
    triple24_rec triple24;
  protected
    record triple25_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple25_rec;
  public
    triple25_rec triple25;
  protected
    record triple26_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple26_rec;
  public
    triple26_rec triple26;
  protected
    record triple27_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple27_rec;
  public
    triple27_rec triple27;
  protected
    record triple28_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple28_rec;
  public
    triple28_rec triple28;
  protected
    record triple29_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple29_rec;
  public
    triple29_rec triple29;
  protected
    record triple30_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple30_rec;
  public
    triple30_rec triple30;
  protected
    record triple31_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple31_rec;
  public
    triple31_rec triple31;
  protected
    record downComer_feedWaterTank_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 10000.0 "Nominal pressure loss";
      constant Real 'CharLine_Delta_p_fric_P_target_[1,1]' = 0 "Characteristic line of friction loss as function of mass flow rate";
      constant Real 'CharLine_Delta_p_fric_P_target_[1,2]' = 0 "Characteristic line of friction loss as function of mass flow rate";
      constant Real 'CharLine_Delta_p_fric_P_target_[2,1]' = 1 "Characteristic line of friction loss as function of mass flow rate";
      constant Real 'CharLine_Delta_p_fric_P_target_[2,2]' = 1 "Characteristic line of friction loss as function of mass flow rate";
      constant importedFMUTypes.ClaRa_Basics_Units_Length z_in = 0.0 "Geodetic height at inlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Length z_out = -8.0 "Geodetic height at outlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[3]' = 2.6666666666666665 "Discretisation scheme";
      constant Boolean frictionAtInlet = false "True if pressure loss between first cell and inlet shall be considered";
      constant Boolean frictionAtOutlet = false "True if pressure loss between last cell and outlet shall be considered";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow through pipe";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_out "pressure at tube inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "enthalpy at tube inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_geo "Geostatic pressure difference";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      constant Integer N_cv = 3 "Number of finite volumes";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_fric(fixed=false) "Actual friction pressure loss";
      importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "Rprt: Discretisised pressure";
      importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "Rprt: Discretisised pressure";
      importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[3]' "Rprt: Discretisised pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end downComer_feedWaterTank_rec;
  public
    downComer_feedWaterTank_rec downComer_feedWaterTank;
  protected
    record triple32_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple32_rec;
  public
    triple32_rec triple32;
  end INIT_rec;
public
  INIT_rec INIT;
protected
  record valvePreFeedWaterTank_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = false "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.001 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 100.0 "Nominal pressure difference for Kv definition";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valvePreFeedWaterTank_rec;
public
  valvePreFeedWaterTank_rec valvePreFeedWaterTank;
protected
  record join_LP_main_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.2 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_in_nom[1]' "Nominal mass flow rates at inlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_in_nom[2]' "Nominal mass flow rates at inlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_in[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_in[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_out;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.2 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet1_rec;
    public
      inlet1_rec inlet1;
    protected
      record inlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet2_rec;
    public
      inlet2_rec inlet2;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record pressureLossIn1_rec
      constant Boolean hasPressureLoss = false;
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure dp = 0;
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
    end pressureLossIn1_rec;
  public
    pressureLossIn1_rec pressureLossIn1;
  protected
    record pressureLossIn2_rec
      constant Boolean hasPressureLoss = false;
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure dp = 0;
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
    end pressureLossIn2_rec;
  public
    pressureLossIn2_rec pressureLossIn2;
  protected
    record pressureLossOut_rec
      constant Boolean hasPressureLoss = true;
      importedFMUTypes.ClaRa_Basics_Units_Pressure dp;
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 420;
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure dp_nom = 1000 "Nominal pressure loss";
    end pressureLossOut_rec;
  public
    pressureLossOut_rec pressureLossOut;
  protected
    record inlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet1_rec;
  public
    inlet1_rec inlet1;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record inlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet2_rec;
  public
    inlet2_rec inlet2;
  end join_LP_main_rec;
public
  join_LP_main_rec join_LP_main;
protected
  record PI_preheater1_rec
    Real controlError "Control error (set point - measurement)";
    constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI "Type of controller";
    constant Real 'sign' = -1 "set to 1 if a positive control error leads to a positive control output, else -1";
    constant Boolean perUnitConversion = true "True, if input and output values should be normalised with respect to reference values";
    constant Real u_ref = 1 "Reference value for controlled variable";
    constant Real y_ref = 100000.0 "Reference value for actuated variable";
    Real y_max "Upper limit of output";
    Real y_min "Lower limit of output";
    constant Real k = 200 "Gain of Proportional block";
    constant Modelica.Units.SI.Time Tau_i(min = 1E-60) = 200 "1/Ti is gain of integrator block";
    constant Modelica.Units.SI.Time Tau_d(min = 0.0) = 30 "Gain of derivative block";
    constant Modelica.Units.SI.Time Ni(min = 1E-13) = 0.9 "1/Ni is gain of anti-windup compensation";
    constant Real Nd = 1 "The smaller Nd, the more ideal the derivative block, setting Nd=0 introduces ideal derivative";
    constant Boolean use_activateInput = false "Provide Boolean input to switch controller on/off.";
    constant importedFMUTypes.ClaRa_Basics_Units_Time t_activation = 0.0 "Time when controller is switched on. For use_activateInput==true the controller is switched on if (time>t_activation AND activateController=true).";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_lag_I = 0.0 "Time lag for activation of integral part AFTER controller is being switched on ";
    constant Real y_inactive = 1 "Controller output if controller is not active";
    constant Real Tau_in(min = 0.0) = 0 "Time constant for input smoothening, Tau_in=0 refers to signal no smoothening";
    constant Real Tau_out(min = 0.0) = 0 "time constant for output smoothening, Tau_out=0 refers to signal no smoothening";
    constant Integer initOption = 796 "Initialisation option";
    constant Boolean limitsAtInit = true "= false, if limits are ignored during initializiation";
    constant Real xi_start = 0 "Initial or guess value value for integrator output (= integrator state)";
    Real y_start "Initial value of output";
    constant Real Tau_add(min = 0.0) = 0 "Set to >0 for additional state after add block in controller, if DAE-index reduction fails.";
    constant Real xd_start = 0 "Initial or guess value for state of derivative block";
    parameter Real _resetValueP_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueP(start = _resetValueP_start) "Input to P part before controller activation";
    parameter Real _resetValueID_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueID(start = _resetValueID_start) "Output of controller before activation";
    Real resetValueI;
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_s = 0.1 "Connector of setpoint input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_m "Connector of measurement input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of actuator output signal";
  protected
    record P_rec
      constant Real k = 200.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end P_rec;
  public
    P_rec P;
  protected
    record I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Boolean variable_Tau_i = false "True, if integrator time is set by variable input";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_i_const = 200.0 "Constant integrator time";
      constant Integer initOption = 504 "Initialisation option";
      constant Boolean y_startInputIsActive = true "True, if integrator initial output shall be set by variable input";
      constant Real y_start_const = 0 "Initial or guess value of output (= state)";
      constant importedFMUTypes.ClaRa_Basics_Units_Time startTime = 0 "Start time for integration";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput y_start;
    end I_rec;
  public
    I_rec I;
  protected
    record addPID_rec
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
      constant Real k3 = 1 "Gain of input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end addPID_rec;
  public
    addPID_rec addPID;
  protected
    record addI_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end addI_rec;
  public
    addI_rec addI;
  protected
    record gainTrack_rec
      constant Real k = 1.1111111111111112 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end gainTrack_rec;
  public
    gainTrack_rec gainTrack;
  protected
    record limiter_rec
      Real uMax "Upper limits of input signals";
      Real uMin "Lower limits of input signals";
      constant Boolean strict = false "= true, if strict limits with noEvent(..)";
      constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end limiter_rec;
  public
    limiter_rec limiter;
  protected
    record Dzero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end Dzero_rec;
  public
    Dzero_rec Dzero;
  protected
    record toPU_rec
      constant Real k = -1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end toPU_rec;
  public
    toPU_rec toPU;
  protected
    record feedback_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 = 0.1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end feedback_rec;
  public
    feedback_rec feedback;
  protected
    record fromPU_rec
      constant Real k = 100000.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end fromPU_rec;
  public
    fromPU_rec fromPU;
  protected
    record switch_OnOff_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_I_rec;
  public
    switch_OnOff_I_rec switch_OnOff_I;
  protected
    record I_off_zero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end I_off_zero_rec;
  public
    I_off_zero_rec I_off_zero;
  protected
    record switch_OnOff_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 1E-05 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_rec;
  public
    switch_OnOff_rec switch_OnOff;
  protected
    record y_unlocked_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1E-05 "Value of Real output";
    end y_unlocked_rec;
  public
    y_unlocked_rec y_unlocked;
  protected
    record smoothPIDInput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDInput_rec;
  public
    smoothPIDInput_rec smoothPIDInput;
  protected
    record smoothPIDOutput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput_rec;
  public
    smoothPIDOutput_rec smoothPIDOutput;
  protected
    record addSat_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end addSat_rec;
  public
    addSat_rec addSat;
  protected
    record smoothPIDOutput1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput1_rec;
  public
    smoothPIDOutput1_rec smoothPIDOutput1;
  protected
    record y_start_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_start_I_rec;
  public
    y_start_I_rec y_start_I;
  protected
    record resetP_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end resetP_rec;
  public
    resetP_rec resetP;
  protected
    record y_unlocked1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked1_rec;
  public
    y_unlocked1_rec y_unlocked1;
  protected
    record resetPD_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end resetPD_rec;
  public
    resetPD_rec resetPD;
  protected
    record y_unlocked2_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked2_rec;
  public
    y_unlocked2_rec y_unlocked2;
  protected
    record activate__rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Value of Boolean output";
    end activate__rec;
  public
    activate__rec activate_;
  protected
    record time_lag_I_activation_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end time_lag_I_activation_rec;
  public
    time_lag_I_activation_rec time_lag_I_activation;
  protected
    record booleanPassThrough_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end booleanPassThrough_rec;
  public
    booleanPassThrough_rec booleanPassThrough;
  protected
    record I_activation_rec
      constant Real threshold = 0.0 "Comparison with respect to threshold";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end I_activation_rec;
  public
    I_activation_rec I_activation;
  end PI_preheater1_rec;
public
  PI_preheater1_rec PI_preheater1 annotation(Dialog);
protected
  record quadruple8_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple8_rec;
public
  quadruple8_rec quadruple8;
protected
  record quadruple9_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple9_rec;
public
  quadruple9_rec quadruple9;
protected
  record quadruple10_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple10_rec;
public
  quadruple10_rec quadruple10;
protected
  record quadruple11_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple11_rec;
public
  quadruple11_rec quadruple11;
protected
  record quadruple12_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple12_rec;
public
  quadruple12_rec quadruple12;
protected
  record quadruple13_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple13_rec;
public
  quadruple13_rec quadruple13;
protected
  record quadruple14_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple14_rec;
public
  quadruple14_rec quadruple14;
protected
  record Nominal_PowerFeedwaterPump1_rec
    Real k "Gain value multiplied with input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
  end Nominal_PowerFeedwaterPump1_rec;
public
  Nominal_PowerFeedwaterPump1_rec Nominal_PowerFeedwaterPump1;
protected
  record valveControl_preheater_HP_display_rec
    constant Boolean provideConnector = false "If true a real output connector is provided";
    Real x1 "Variable value";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real u_aux;
  end valveControl_preheater_HP_display_rec;
public
  valveControl_preheater_HP_display_rec valveControl_preheater_HP_display;
protected
  record electricalPower_rec
    constant Boolean provideConnector = false "If true a real output connector is provided";
    Real x1 "Variable value";
    constant Integer decimalSpaces = 2 "Accuracy to be displayed";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real u_aux;
  end electricalPower_rec;
public
  electricalPower_rec electricalPower;
protected
  record NOM_rec
    constant Real P_target_ = 1;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 420;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_condenser = 3800;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_HP_p_tap = 4600000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_HP_m_flow_tap = 42.812;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP1_p_tap = 450000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP1_m_flow_tap = 29;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP2_p_tap = 95000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP2_m_flow_tap = 17;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP3_p_tap = 25000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP3_m_flow_tap = 4;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure preheater_LP4_p_tap = 9600.0;
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate preheater_LP4_m_flow_tap = 8;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT = 1240000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Length downComer_z_in = 0;
    constant importedFMUTypes.ClaRa_Basics_Units_Length downComer_z_out = -8;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure downComer_Delta_p_nom = 10000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_HP_Delta_p_nom = 1100000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_LP1_Delta_p_nom = 5000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_LP2_Delta_p_nom = 1000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valve_LP3_Delta_p_nom = 400.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference valvePreFeedWaterTank_Delta_p_nom = 100.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_LS_nom = 823;
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_RS_nom = 833;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_out_nom = 26200000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_out_nom = 5100000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_LS_nom = 4000000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_RS_nom = 491000.0;
    constant Real 'CharLine_Delta_p_HP_mLS_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[1,2]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[2,1]' = 0.1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[2,2]' = 0.01 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[3,1]' = 0.2 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[3,2]' = 0.04 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[4,1]' = 0.3 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[4,2]' = 0.09 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[5,1]' = 0.4 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[5,2]' = 0.16 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[6,1]' = 0.5 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[6,2]' = 0.25 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[7,1]' = 0.6 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[7,2]' = 0.36 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[8,1]' = 0.7 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[8,2]' = 0.49 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[9,1]' = 0.8 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[9,2]' = 0.64 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[10,1]' = 0.9 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[10,2]' = 0.81 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[11,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_HP_mLS_[11,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[1,2]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[2,1]' = 0.1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[2,2]' = 0.01 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[3,1]' = 0.2 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[3,2]' = 0.04 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[4,1]' = 0.3 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[4,2]' = 0.09 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[5,1]' = 0.4 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[5,2]' = 0.16 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[6,1]' = 0.5 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[6,2]' = 0.25 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[7,1]' = 0.6 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[7,2]' = 0.36 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[8,1]' = 0.7 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[8,2]' = 0.49 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[9,1]' = 0.8 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[9,2]' = 0.64 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[10,1]' = 0.9 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[10,2]' = 0.81 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[11,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real 'CharLine_Delta_p_IP_mRS_[11,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
    constant Real efficiency_Pump_cond = 0.9;
    constant Real efficiency_Pump_preheater_LP1 = 0.9;
    constant Real efficiency_Pump_preheater_LP3 = 0.9;
    constant Real efficiency_Pump_FW = 0.9;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure IP1_pressure = 2600000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure IP2_pressure = 1400000.0;
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure IP3_pressure = 500000.0;
    constant Real efficiency_Turb_HP = 1;
    constant Real efficiency_Turb_IP1 = 1;
    constant Real efficiency_Turb_IP2 = 1;
    constant Real efficiency_Turb_IP3 = 1;
    constant Real efficiency_Turb_LP1 = 1;
    constant Real efficiency_Turb_LP2 = 1;
    constant Real efficiency_Turb_LP3 = 1;
    constant Real efficiency_Turb_LP4 = 1;
  protected
    record condenser_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_condenser = 3800.0 "|Fundamental Definitions|Condenser pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs(min = 0.0) = 0 "|Fundamental Definitions|Filling level in hotwell";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_in = 3800.0 "Inlet pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_out = 3800.0 "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in(fixed=false) "Inlet mass flow";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end condenser_rec;
  public
    condenser_rec condenser;
  protected
    record Pump_cond_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Pump_cond_rec;
  public
    Pump_cond_rec Pump_cond;
  protected
    record preheater_LP1_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 450000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 29.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP1_rec;
  public
    preheater_LP1_rec preheater_LP1;
  protected
    record pump_preheater_LP1_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end pump_preheater_LP1_rec;
  public
    pump_preheater_LP1_rec pump_preheater_LP1;
  protected
    record valvePreFeedWaterTank_rec
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 100.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressur drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valvePreFeedWaterTank_rec;
  public
    valvePreFeedWaterTank_rec valvePreFeedWaterTank;
  protected
    record feedwatertank_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT_nom = 1240000.0 "Feed water tank pressure at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 420.0 "Mass flow rate at nomoinal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in1(fixed=false) "Spec. enthalpy at tapping 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in2(fixed=false) "Spec. enthalpy at tapping 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy at condensate inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Condensate inlet flow";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap1(fixed=false) "Tapping 1 inlet flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT = 1240000.0 "Feedwater tank pressure at current load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_FWT_out = 1240000.0 "Feedwater tank condensate outlet pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap2 "Mass flow of the heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_FW = 420.0 "Mass flow of the condensate";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at feedwater outlet";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 420.0 "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap1_rec;
      public
        inlet_tap1_rec inlet_tap1;
      protected
        record inlet_tap2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0 "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap2_rec;
      public
        inlet_tap2_rec inlet_tap2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record tap_in2_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in2_rec;
    public
      tap_in2_rec tap_in2;
    protected
      record cond_out_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 420.0;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in1_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in1_rec;
    public
      tap_in1_rec tap_in1;
    end feedwatertank_rec;
  public
    feedwatertank_rec feedwatertank;
  protected
    record join_LP_main_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2(fixed=false) "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3 "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end join_LP_main_rec;
  public
    join_LP_main_rec join_LP_main;
  protected
    record Pump_FW_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Pump_FW_rec;
  public
    Pump_FW_rec Pump_FW;
  protected
    record preheater_HP_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 4600000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 42.812 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_HP_rec;
  public
    preheater_HP_rec preheater_HP;
  protected
    record boiler_rec
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_LS_nom = 420.0 "Live steam flow at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_RS_nom = 420.0 "Reheated steam flow at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_LS_nom = 823.0 "Live steam temperature at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_RS_nom = 833.0 "Reheated steam temperature at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_LS_nom = 4000000.0 "Live steam pressure loss at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_RS_nom = 491000.0 "Reheat steam pressure loss at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_out_nom = 26200000.0 "Live steam pressure at nominal load";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_out_nom = 5100000.0 "Reheated steam pressure at nominal load";
      constant Real 'CharLine_Delta_p_HP_mLS_[1,1]' = 0.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[1,2]' = 0.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[2,1]' = 0.1 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[2,2]' = 0.01 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[3,1]' = 0.2 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[3,2]' = 0.04 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[4,1]' = 0.3 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[4,2]' = 0.09 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[5,1]' = 0.4 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[5,2]' = 0.16 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[6,1]' = 0.5 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[6,2]' = 0.25 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[7,1]' = 0.6 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[7,2]' = 0.36 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[8,1]' = 0.7 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[8,2]' = 0.49 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[9,1]' = 0.8 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[9,2]' = 0.64 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[10,1]' = 0.9 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[10,2]' = 0.81 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[11,1]' = 1.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_HP_mLS_[11,2]' = 1.0 "Characteristic line of LS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[1,1]' = 0.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[1,2]' = 0.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[2,1]' = 0.1 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[2,2]' = 0.01 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[3,1]' = 0.2 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[3,2]' = 0.04 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[4,1]' = 0.3 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[4,2]' = 0.09 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[5,1]' = 0.4 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[5,2]' = 0.16 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[6,1]' = 0.5 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[6,2]' = 0.25 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[7,1]' = 0.6 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[7,2]' = 0.36 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[8,1]' = 0.7 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[8,2]' = 0.49 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[9,1]' = 0.8 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[9,2]' = 0.64 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[10,1]' = 0.9 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[10,2]' = 0.81 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[11,1]' = 1.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      constant Real 'CharLine_Delta_p_IP_mRS_[11,2]' = 1.0 "Characteristic line of RS pressure drop as function of mass flow rate";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Rprt: Heating power";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cRH(fixed=false) "Mass flow rate of cold Re-Heat ";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_LS_in(fixed=false) "Inlet specific enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_RS_in(fixed=false) "Inlet specific enthalpy";
      parameter Real Delta_p_LS_(fixed=false) "Rprt: current LS pressure loss";
      parameter Real Delta_p_RS_(fixed=false) "Rprt: current RS pressure loss";
      Real Q_flow_LS_ "Rprt: Heat release in life steam at current load";
      Real Q_flow_RS_ "Rprt: Heat release in reheated steam at current load";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_LS_out "Outlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_RS_out "Outlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_in "Inlet pressure";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_LS_out = 26200000.0 "Life steam pressure at current load";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_feed(fixed=false) "HP inlet mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_RS_out = 5100000.0 "Reheated steam pressure at current load";
    protected
      record hotReheat_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 5100000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end hotReheat_rec;
    public
      hotReheat_rec hotReheat;
    protected
      record coldReheat_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end coldReheat_rec;
    public
      coldReheat_rec coldReheat;
    protected
      record feedWater_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end feedWater_rec;
    public
      feedWater_rec feedWater;
    protected
      record liveSteam_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 26200000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 420.0;
      end liveSteam_rec;
    public
      liveSteam_rec liveSteam;
    end boiler_rec;
  public
    boiler_rec boiler;
  protected
    record Turbine_HP_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 26200000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 420.0;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_HP_rec;
  public
    Turbine_HP_rec Turbine_HP;
  protected
    record join_HP_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end join_HP_rec;
  public
    join_HP_rec join_HP;
  protected
    record valve_HP_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1100000.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_HP_rec;
  public
    valve_HP_rec valve_HP;
  protected
    record valve_cut_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_cut_rec;
  public
    valve_cut_rec valve_cut;
  protected
    record valve2_HP_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve2_HP_rec;
  public
    valve2_HP_rec valve2_HP;
  protected
    record Turbine_IP1_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 5100000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_IP1_rec;
  public
    Turbine_IP1_rec Turbine_IP1;
  protected
    record Turbine_LP1_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP1_rec;
  public
    Turbine_LP1_rec Turbine_LP1;
  protected
    record split_LP1_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end split_LP1_rec;
  public
    split_LP1_rec split_LP1;
  protected
    record valve_IP1_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_IP1_rec;
  public
    valve_IP1_rec valve_IP1;
  protected
    record valve_LP1_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 5000.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_LP1_rec;
  public
    valve_LP1_rec valve_LP1;
  protected
    record Turbine_LP4_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP4_rec;
  public
    Turbine_LP4_rec Turbine_LP4;
  protected
    record triple_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple_rec;
  public
    triple_rec triple;
  protected
    record triple1_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple1_rec;
  public
    triple1_rec triple1;
  protected
    record triple2_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 26200000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 420.0;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple2_rec;
  public
    triple2_rec triple2;
  protected
    record triple3_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 5100000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple3_rec;
  public
    triple3_rec triple3;
  protected
    record triple5_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple5_rec;
  public
    triple5_rec triple5;
  protected
    record triple6_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple6_rec;
  public
    triple6_rec triple6;
  protected
    record triple7_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple7_rec;
  public
    triple7_rec triple7;
  protected
    record triple8_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple8_rec;
  public
    triple8_rec triple8;
  protected
    record triple9_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple9_rec;
  public
    triple9_rec triple9;
  protected
    record triple10_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple10_rec;
  public
    triple10_rec triple10;
  protected
    record triple11_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple11_rec;
  public
    triple11_rec triple11;
  protected
    record triple12_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple12_rec;
  public
    triple12_rec triple12;
  protected
    record triple13_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple13_rec;
  public
    triple13_rec triple13;
  protected
    record triple15_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple15_rec;
  public
    triple15_rec triple15;
  protected
    record triple16_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple16_rec;
  public
    triple16_rec triple16;
  protected
    record triple17_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple17_rec;
  public
    triple17_rec triple17;
  protected
    record triple18_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple18_rec;
  public
    triple18_rec triple18;
  protected
    record triple19_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple19_rec;
  public
    triple19_rec triple19;
  protected
    record triple20_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple20_rec;
  public
    triple20_rec triple20;
  protected
    record Turbine_IP2_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_IP2_rec;
  public
    Turbine_IP2_rec Turbine_IP2;
  protected
    record Turbine_IP3_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_IP3_rec;
  public
    Turbine_IP3_rec Turbine_IP3;
  protected
    record splitIP2_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 1400000.0 "Nominal split pressure";
      constant Real 'CharLine_p_P_target_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[1,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Split pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Spec. enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end splitIP2_rec;
  public
    splitIP2_rec splitIP2;
  protected
    record splitIP3_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 500000.0 "Nominal split pressure";
      constant Real 'CharLine_p_P_target_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[1,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Split pressure";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Spec. enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end splitIP3_rec;
  public
    splitIP3_rec splitIP3;
  protected
    record pressureAnchor_constFlow1_1_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 2600000.0 "Pressure";
      constant Real 'CharLine_p_P_target_[1,1]' = 0 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[1,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,1]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      constant Real 'CharLine_p_P_target_[2,2]' = 1 "Characteristic line of pressure drop as function of mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    end pressureAnchor_constFlow1_1_rec;
  public
    pressureAnchor_constFlow1_1_rec pressureAnchor_constFlow1_1;
  protected
    record Turbine_LP3_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP3_rec;
  public
    Turbine_LP3_rec Turbine_LP3;
  protected
    record Turbine_LP2_rec
      constant Real efficiency = 1.0 "Hydraulic efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Rprt: Turbine power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Rprt: p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_turbine "Turbine power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end Turbine_LP2_rec;
  public
    Turbine_LP2_rec Turbine_LP2;
  protected
    record valve2_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve2_rec;
  public
    valve2_rec valve2;
  protected
    record mixerIP2_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end mixerIP2_rec;
  public
    mixerIP2_rec mixerIP2;
  protected
    record preheater_LP2_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 95000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 17.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP2_rec;
  public
    preheater_LP2_rec preheater_LP2;
  protected
    record preheater_LP3_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 25000.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 21.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP3_rec;
  public
    preheater_LP3_rec preheater_LP3;
  protected
    record preheater_LP4_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_nom = 9600.0 "Nominal pressure of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap_nom = 8.0 "Nominal mass flow rate of heating steam";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_tap_out_sc = 0 "Enthalpy difference to bubble enthalpy of tapping outlet enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Filling level in hotwell";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_cond(fixed=false);
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond(fixed=false) "Mass flow of the condensate";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_tap(fixed=false) "Mass flow of the heating steam";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap(fixed=false) "Pressure of the heating steam";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_tap_out "Pressure at condensed tapping outlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_in(fixed=false) "Spec. enthalpy of tapping";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_in(fixed=false) "Spec. enthalpy of condensate inlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_tap_out "Spec. enthalpy at condensed tapping outlet";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_cond_out "Spec. enthalpy at condenate outlet";
      constant Real 'CharLine_p_tap_P_target_[1,1]' = 0 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[1,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,1]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_p_tap_P_target_[2,2]' = 1 "Characteristic line of p_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,1]' = 0 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[1,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,1]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
      constant Real 'CharLine_m_flow_tap_P_target_[2,2]' = 1 "Characteristic line of m_flow_tap as function of P_target_";
    protected
      record summary_rec
      protected
        record inlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_cond_rec;
      public
        inlet_cond_rec inlet_cond;
      protected
        record outlet_cond_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_cond_rec;
      public
        outlet_cond_rec outlet_cond;
      protected
        record inlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_tap_rec;
      public
        inlet_tap_rec inlet_tap;
      protected
        record outlet_tap_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_tap_rec;
      public
        outlet_tap_rec outlet_tap;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record cond_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_in_rec;
    public
      cond_in_rec cond_in;
    protected
      record cond_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end cond_out_rec;
    public
      cond_out_rec cond_out;
    protected
      record tap_in_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_in_rec;
    public
      tap_in_rec tap_in;
    protected
      record tap_out_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end tap_out_rec;
    public
      tap_out_rec tap_out;
    end preheater_LP4_rec;
  public
    preheater_LP4_rec preheater_LP4;
  protected
    record valve_IP2_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_IP2_rec;
  public
    valve_IP2_rec valve_IP2;
  protected
    record split_LP2_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end split_LP2_rec;
  public
    split_LP2_rec split_LP2;
  protected
    record split_LP3_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2 "Mass flow rate of outlet 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3(fixed=false) "Mass flow rate of outlet 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy at inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet1_rec;
      public
        outlet1_rec outlet1;
      protected
        record outlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet2_rec;
      public
        outlet2_rec outlet2;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_1_rec;
    public
      outlet_1_rec outlet_1;
    protected
      record outlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_2_rec;
    public
      outlet_2_rec outlet_2;
    end split_LP3_rec;
  public
    split_LP3_rec split_LP3;
  protected
    record valve_LP2_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1000.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_LP2_rec;
  public
    valve_LP2_rec valve_LP2;
  protected
    record valve_LP3_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 400.0 "Nominal pressure drop";
      constant Real 'CharLine_Delta_p_P_target_[1,1]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[1,2]' = 0 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,1]' = 1 "Pressure drop depending on rel. power in p.u.";
      constant Real 'CharLine_Delta_p_P_target_[2,2]' = 1 "Pressure drop depending on rel. power in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_in "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p(fixed=false) "Actual pressure drop";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_LP3_rec;
  public
    valve_LP3_rec valve_LP3;
  protected
    record pump_preheater_LP3_rec
      constant Real efficiency = 0.9 "Pump efficiency";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Presssure differerence p_in - p_out";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record outline_rec
          importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between outlet and inlet";
          importedFMUTypes.ClaRa_Basics_Units_Power P_pump "Pump power";
        end outline_rec;
      public
        outline_rec outline;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end pump_preheater_LP3_rec;
  public
    pump_preheater_LP3_rec pump_preheater_LP3;
  protected
    record join_preheater_LP3_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2(fixed=false) "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3 "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end join_preheater_LP3_rec;
  public
    join_preheater_LP3_rec join_preheater_LP3;
  protected
    record valve_cutPressureLP4_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_out(fixed=false) "Outlet pressure";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "Inlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_out "Outlet spec. enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end valve_cutPressureLP4_rec;
  public
    valve_cutPressureLP4_rec valve_cutPressureLP4;
  protected
    record mixer_condenser_rec
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h1(fixed=false) "Specific enthalpy of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h2(fixed=false) "Specific enthalpy of flow 2";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_1(fixed=false) "Mass flow rate of flow 1";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_2(fixed=false) "Mass flow rate of flow 2";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h3 "Mixer outlet enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_3 "Mixer outlet mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Mixer pressure";
    protected
      record summary_rec
      protected
        record inlet1_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet1_rec;
      public
        inlet1_rec inlet1;
      protected
        record inlet2_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet2_rec;
      public
        inlet2_rec inlet2;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_1_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 3800.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_1_rec;
    public
      inlet_1_rec inlet_1;
    protected
      record inlet_2_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end inlet_2_rec;
    public
      inlet_2_rec inlet_2;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end mixer_condenser_rec;
  public
    mixer_condenser_rec mixer_condenser;
  protected
    record triple4_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple4_rec;
  public
    triple4_rec triple4;
  protected
    record triple14_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple14_rec;
  public
    triple14_rec triple14;
  protected
    record triple21_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple21_rec;
  public
    triple21_rec triple21;
  protected
    record triple22_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple22_rec;
  public
    triple22_rec triple22;
  protected
    record triple23_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple23_rec;
  public
    triple23_rec triple23;
  protected
    record triple24_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple24_rec;
  public
    triple24_rec triple24;
  protected
    record triple25_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple25_rec;
  public
    triple25_rec triple25;
  protected
    record triple26_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple26_rec;
  public
    triple26_rec triple26;
  protected
    record triple27_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple27_rec;
  public
    triple27_rec triple27;
  protected
    record triple28_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple28_rec;
  public
    triple28_rec triple28;
  protected
    record triple29_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple29_rec;
  public
    triple29_rec triple29;
  protected
    record triple30_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple30_rec;
  public
    triple30_rec triple30;
  protected
    record triple31_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 2 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple31_rec;
  public
    triple31_rec triple31;
  protected
    record downComer_feedWaterTank_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 10000.0 "Nominal pressure loss";
      constant Real 'CharLine_Delta_p_fric_P_target_[1,1]' = 0 "Characteristic line of friction loss as function of mass flow rate";
      constant Real 'CharLine_Delta_p_fric_P_target_[1,2]' = 0 "Characteristic line of friction loss as function of mass flow rate";
      constant Real 'CharLine_Delta_p_fric_P_target_[2,1]' = 1 "Characteristic line of friction loss as function of mass flow rate";
      constant Real 'CharLine_Delta_p_fric_P_target_[2,2]' = 1 "Characteristic line of friction loss as function of mass flow rate";
      constant importedFMUTypes.ClaRa_Basics_Units_Length z_in = 0.0 "Geodetic height at inlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Length z_out = -8.0 "Geodetic height at outlet";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[3]' = 2.6666666666666665 "Discretisation scheme";
      constant Boolean frictionAtInlet = false "True if pressure loss between first cell and inlet shall be considered";
      constant Boolean frictionAtOutlet = false "True if pressure loss between last cell and outlet shall be considered";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Mass flow through pipe";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_out "pressure at tube inlet";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_in(fixed=false) "enthalpy at tube inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_geo "Geostatic pressure difference";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p_in(fixed=false) "Inlet pressure";
      constant Integer N_cv = 3 "Number of finite volumes";
      parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_fric(fixed=false) "Actual friction pressure loss";
      importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "Rprt: Discretisised pressure";
      importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "Rprt: Discretisised pressure";
      importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[3]' "Rprt: Discretisised pressure";
    protected
      record summary_rec
      protected
        record inlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        end outlet_rec;
      public
        outlet_rec outlet;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record inlet_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 1240000.0;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 420.0;
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end outlet_rec;
    public
      outlet_rec outlet;
    end downComer_feedWaterTank_rec;
  public
    downComer_feedWaterTank_rec downComer_feedWaterTank;
  protected
    record triple32_rec
      constant Integer stacy_id = 0 "Identifier of the static cycle triple";
      parameter importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_Pressure p(fixed=false) "Measured mass flow rate";
      parameter importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h(fixed=false) "Measured mass flow rate";
    protected
      record decimalSpaces_rec
        constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
        constant Integer h = 1 "Accuracy to be displayed for enthalpy";
        constant Integer p = 1 "Accuracy to be displayed for pressure";
      end decimalSpaces_rec;
    public
      decimalSpaces_rec decimalSpaces;
    protected
      record steamSignal_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure p;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      end steamSignal_rec;
    public
      steamSignal_rec steamSignal;
    end triple32_rec;
  public
    triple32_rec triple32;
  end NOM_rec;
public
  NOM_rec NOM;
protected
  record Turbine_IP3_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_IP3_rec;
public
  Turbine_IP3_rec Turbine_IP3;
protected
  record Turbine_IP2_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_IP2_rec;
public
  Turbine_IP2_rec Turbine_IP2;
protected
  record split_IP2_rec
    constant Integer N_sets = 2 "Number of data sets to be provided (if showData=true)";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[1]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[2]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_in;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record 'eye[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[1]_rec';
  public
    'eye[1]_rec' 'eye[1]';
  protected
    record 'eye[2]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[2]_rec';
  public
    'eye[2]_rec' 'eye[2]';
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet1_rec;
    public
      outlet1_rec outlet1;
    protected
      record outlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet2_rec;
    public
      outlet2_rec outlet2;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet1_rec;
  public
    outlet1_rec outlet1;
  protected
    record outlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet2_rec;
  public
    outlet2_rec outlet2;
  end split_IP2_rec;
public
  split_IP2_rec split_IP2;
protected
  record join_IP3_rec
    constant Integer N_sets = 2 "Number of data sets to be provided (if showData=true)";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[1]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[2]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_in;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record 'eye[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[1]_rec';
  public
    'eye[1]_rec' 'eye[1]';
  protected
    record 'eye[2]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[2]_rec';
  public
    'eye[2]_rec' 'eye[2]';
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet1_rec;
    public
      outlet1_rec outlet1;
    protected
      record outlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet2_rec;
    public
      outlet2_rec outlet2;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet1_rec;
  public
    outlet1_rec outlet1;
  protected
    record outlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet2_rec;
  public
    outlet2_rec outlet2;
  end join_IP3_rec;
public
  join_IP3_rec join_IP3;
protected
  record quadruple15_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple15_rec;
public
  quadruple15_rec quadruple15;
protected
  record quadruple16_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple16_rec;
public
  quadruple16_rec quadruple16;
protected
  record Turbine_LP3_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_LP3_rec;
public
  Turbine_LP3_rec Turbine_LP3;
protected
  record Turbine_LP2_rec
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useMechanicalPort = true "True, if a mechenical flange should be used";
    constant Boolean steadyStateTorque = true "True, if steady state mechanical momentum shall be used";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_fixed = 3000 "Constant rotational speed of turbine";
    constant Modelica.Units.SI.Inertia J = 10 "Moment of Inertia";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = false "True if component shall contribute to automatic efficiency calculation";
    Modelica.Units.SI.Pressure p_nom(nominal = 100000.0, min = 0.0) "Nominal inlet perssure";
    Modelica.Units.SI.MassFlowRate m_flow_nom(nominal = 1.0) "Nominal mass flow rate";
    Real Pi "Nominal pressure ratio";
    Modelica.Units.SI.Density rho_nom(nominal = 1000.0) "Nominal inlet density";
    constant importedFMUTypes.ClaRa_Basics_Units_RPM rpm_start = 10000 "Start value for RPM (use without electric boundary)";
    Modelica.Units.SI.Pressure p_in_start "Start value for inlet pressure";
    Modelica.Units.SI.Pressure p_out_start "Start value for outlet pressure";
    constant Boolean allowFlowReversal = true "True to allow flow reversal during initialisation";
    constant Real eta_mech = 1.0 "Mechanical efficiency";
    constant Boolean chokedFlow = false "With a large number of turbine stages the influence of supercritical flow conditions can be neglected";
    Real Kt "Kt coefficient of Stodola's law";
    Modelica.Units.SI.SpecificEnthalpy h_is(nominal = 1000.0) "Isentropic outlet enthalpy";
    Modelica.Units.SI.Power P_t(nominal = 100000.0) "Turbine hydraulic power";
    Modelica.Units.SI.Pressure p_in;
    Modelica.Units.SI.Pressure p_out;
    Real eta_is "Isentropic efficiency";
    Modelica.Units.SI.EntropyFlowRate S_irr "Entropy production rate";
    Modelica.Units.SI.Pressure p_l "Laval pressure";
    importedFMUTypes.ClaRa_Basics_Units_RPM rpm;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record iCom_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_in "Inlet mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_in "Inlet density";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Shaft speed";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific Delta_h_is "Isentropic enthalpy drop";
    end iCom_rec;
  public
    iCom_rec iCom;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p;
        importedFMUTypes.ClaRa_Basics_Units_Power P_mech "Mechanical power of steam turbine";
        Real eta_isen "Isentropic efficiency";
        constant Real eta_mech = 1.0 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_isen "Isentropic steam enthalpy at turbine outlet";
        importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Pump revolutions per minute";
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal inlet perssure";
        Real Pi "Nominal pressure ratio";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_nom "Nominal inlet density";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record shaft_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_a_rec;
  public
    shaft_a_rec shaft_a;
  protected
    record shaft_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_b_rec;
  public
    shaft_b_rec shaft_b;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record efficiency_rec
      constant Real 'eta_mflow[1,1]' = 0.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[1,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,1]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      constant Real 'eta_mflow[2,2]' = 1.0 "Characteristic line eta = f(m_flow/m_flow_nom)";
      Real eta "Efficiency";
    end efficiency_rec;
  public
    efficiency_rec efficiency;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end Turbine_LP2_rec;
public
  Turbine_LP2_rec Turbine_LP2;
protected
  record join_LP2_rec
    constant Integer N_sets = 2 "Number of data sets to be provided (if showData=true)";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[1]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[2]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_in;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record 'eye[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[1]_rec';
  public
    'eye[1]_rec' 'eye[1]';
  protected
    record 'eye[2]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow(nominal = 1.0) "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[2]_rec';
  public
    'eye[2]_rec' 'eye[2]';
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet1_rec;
    public
      outlet1_rec outlet1;
    protected
      record outlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet2_rec;
    public
      outlet2_rec outlet2;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet1_rec;
  public
    outlet1_rec outlet1;
  protected
    record outlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet2_rec;
  public
    outlet2_rec outlet2;
  end join_LP2_rec;
public
  join_LP2_rec join_LP2;
protected
  record split_LP3_rec
    constant Integer N_sets = 2 "Number of data sets to be provided (if showData=true)";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[1]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_out_nom[2]' "Nominal mass flow rates at outlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_in;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_out[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record 'eye[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[1]_rec';
  public
    'eye[1]_rec' 'eye[1]';
  protected
    record 'eye[2]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow(nominal = 1.0) "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye[2]_rec';
  public
    'eye[2]_rec' 'eye[2]';
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet1_rec;
    public
      outlet1_rec outlet1;
    protected
      record outlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet2_rec;
    public
      outlet2_rec outlet2;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet1_rec;
  public
    outlet1_rec outlet1;
  protected
    record outlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet2_rec;
  public
    outlet2_rec outlet2;
  end split_LP3_rec;
public
  split_LP3_rec split_LP3;
protected
  record valve_LP1_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom "Nominal pressure difference for Kv definition";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_LP1_rec;
public
  valve_LP1_rec valve_LP1;
protected
  record preheater_LP2_rec
    constant Integer initOptionShell = 204 "Type of initialisation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10 "Length of the HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2 "Diameter of HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_shell = 10.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux1 = 5.0 "Inlet position of auxilliary1 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux2 = 5.0 "Inlet position of auxilliary2 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_shell = 0.1 "Outlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius of all flanges";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of inner structure elements, additional to the tubes itself";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_shell "Nominal mass flow on shell side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_shell "Nominal pressure on shell side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_shell "Nominal specific enthalpy on shell side";
    constant Real yps_liq_nom = 0.1 "Relative volume of liquid phase at nominal point";
    constant Real 'yps_nom[1]' = 0.1 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    constant Real 'yps_nom[2]' = 0.9 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_shell "Start value of shell fluid pressure";
    constant Real level_rel_start = 0.1 "Start value for relative filling Level";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter of internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10 "Length of the tubes (one pass)";
    constant Integer N_tubes = 1000 "Number of tubes";
    constant Integer N_passes = 1 "Number of passes of the internal tubes";
    constant Boolean parallelTubes = true "True, if tubes are parallel to shell flow orientation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_tubes = 1.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_tubes = 1.0 "Outlet position from bottom";
    constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
    constant Integer N_rows = 32 "Number of pipe rows in shell flow direction";
    constant Real CF_geo = 1 "Correction coefficient due to fins etc.";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_tubes "Nominal mass flow on tubes side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_tubes "Nominal pressure on side tubes";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_tubes "Nominal specific enthalpy on tubes side";
    constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_nom = 200000000.0 "Nominal heat flow rate";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start_tubes "Start value of tube fluid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_tubes(displayUnit = "bar") "Start value of tube fluid pressure";
    constant Integer initOptionTubes = 0 "Type of initialisation at tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[1]' = 320 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[2]' = 340 "Initial wall temperature inner --> outer";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[3]' = 360 "Initial wall temperature inner --> outer";
    constant Integer initOptionWall = 1 "Init option of Tube wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000 "HTC of the phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 101.78760197630932 "Heat transfer area at phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Real absorbInflow = 1 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of level calculation (table based)";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean levelOutput = true "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput level;
  protected
    record In2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In2_rec;
  public
    In2_rec In2;
  protected
    record Out2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out2_rec;
  public
    Out2_rec Out2;
  protected
    record Out1_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out1_rec;
  public
    Out1_rec Out1;
  protected
    record In1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In1_rec;
  public
    In1_rec In1;
  protected
    record tubes_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
      constant Integer initOption = 0 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of system specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of system pressure";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "spec. enthalpy state";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 19.63495408493621 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 1570.7963267948965 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 1570.7963267948965 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 1.9634954084936211 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 1.9634954084936211 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1E-06 "Nominal horizonal area";
        constant Integer N_inlet = 1 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 1.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 1.0 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = -1 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.05 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_hyd = 0.05 "Hydraulic diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component (one pass)";
        constant Integer N_tubes = 1000 "Number of tubes in parallel";
        constant Integer N_passes = 1 "Number of passes of the tubes";
        constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record inlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record heat_rec
        parameter Modelica.Units.SI.Temperature _T_start = 288.15
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Modelica.Units.SI.Temperature T(start = _T_start, fixed=false) "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heat_rec;
    public
      heat_rec heat annotation(Dialog);
    protected
      record summary_rec
      protected
        record outline_rec
          constant Boolean showExpertSummary = false;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 19.63495408493621 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat = 1570.7963267948965 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record inlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          Modelica.Units.SI.Enthalpy H "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record fluidIn_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidIn_rec;
    public
      fluidIn_rec fluidIn;
    protected
      record fluidOut_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidOut_rec;
    public
      fluidOut_rec fluidOut;
    protected
      record heattransfer_rec
        constant Integer HT_type = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom = 3000 "Constant heat transfer coefficient";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 2.122065907891938E-07 "Nominal convective heat resistance";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        constant Real 'PL_alpha[1,1]' = 0.0 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[1,2]' = 0.55 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,1]' = 0.5 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,2]' = 0.65 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,1]' = 0.7 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,2]' = 0.72 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,1]' = 0.8 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,2]' = 0.77 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,1]' = 1 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,2]' = 1 "Correction factor for heat transfer in part load";
        constant Real CF_fouling = 1 "Scaling factor accounting for the fouling of the wall";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wi "Temperature difference between wall and fluid inlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wo "Temperature difference between wall and fluid outlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_mean "Mean temperature difference used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_U "Upper temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_L "Lower temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha "Heat transfer coefficient used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR "Convective heat resistance";
      protected
        record heat_rec
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end heat_rec;
      public
        heat_rec heat;
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_inflow;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_outflow;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_in = 0.0;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_out = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Absolute filling absLevel";
        constant Real level_rel = 0 "Relative filling absLevel";
        constant Real level_rel_start = 0 "Start value for relative filling Level";
        constant Boolean provideDensityDerivative = true "True if density derivative shall be provided";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p;
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1000 "Nominal pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss;
    end tubes_rec;
  public
    tubes_rec tubes annotation(Dialog);
  protected
    record shell_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 101.78760197630932 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
      constant Real level_rel_start = 0.1 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 2 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 1.0178760197630934
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 10.178760197630933 "Volume of the component";
        constant Integer N_heat = 2 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 69.11503837897544 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]'(min = 1E-15) = 1633.6281798666923 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 69.11503837897544 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2]'(min = 1E-15) = 1633.6281798666923 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[2]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 1.0178760197630932 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 3.141592653589793 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1.0178760197630932 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 10.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 10.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2.0 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_t = 0.052 "Outer diameter of internal tubes";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10.0 "Length of the internal tubes (single pass)";
        constant Integer N_tubes = 1000 "Number of internal tubes";
        constant Integer N_passes = 1 "Number of passes of the internal tubes";
        constant Boolean parallelTubes = true "True, if tubes are parallel to main flow orientation, else false";
        constant Integer N_baffle = 0 "Number of baffles on shell side";
        constant Real interior(min = 1E-06, max = 1.0) = 0.32400000000000007 "Volume fraction of interior equipment";
        constant Real MIN = 1E-05 "Limiter";
        constant Modelica.Units.SI.Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
        constant Modelica.Units.SI.Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
        constant Real a = 2.0 "Lateral alignment ratio";
        constant Real b = 2.0 "Vertical alignment ratio";
        constant Real psi = 0.6073009183012759 "Void ratio";
        constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly, false otherwise";
        constant Real fa = 1.3333333333333333 "Alignment factor";
        constant Integer N_rows(min = 1, max = 1000) = 32 "Number of pipe rows in flow direction (minimum = N_passes)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 1500 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 8000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 4.080895976715265E-07 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 7.651679956341123E-08 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant Integer heatSurfaceAlloc = 2 "To be considered heat transfer area";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 1500.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 8000.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 4.080895976715265E-07 "Convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 7.651679956341123E-08 "Convective heat resistance || [1]:= liq | [2]:= vap";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.1 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 1.0 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 10.0 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 9.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.15000000000000002 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.05 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[1]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]'(start = '_Delta_p[1]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]' "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 100 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 1;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 10.178760197630933 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 1633.6281798666923 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end shell_rec;
  public
    shell_rec shell annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 1 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of cylinder";
      constant Integer N_tubes = 1000 "Number of tubes in parallel";
      constant Integer N_passes = 1 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0.0 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 320.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 340.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 360.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 1602.006899421698 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 1.560542592483502E-08 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 12497.255575980154 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1573.412868650795;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1578.6488612227915;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1586.4985298835493;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1596.9705431674163;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1610.0534641818956;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1625.7615508406038;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 2.643779545653395E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 5.235435505330284E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 7.72621087385135E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 1.5605425924835027E-08 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 1576.0265160977663 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 1591.7173126951916 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 1617.869380488315 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of cylinder";
        constant Integer N_tubes = 1000 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1573.412868650795;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1578.6488612227915;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1586.4985298835493;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1596.9705431674163;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1610.0534641818956;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1625.7615508406038;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 12497.255575980154;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 7800.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Heat flow rate";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_in "Fluid temperature at inlet T_1_in - T_2_in";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_out "Fluid temperature at outlet T_1_out - T_2_out";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA "Overall heat transmission";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA_nom = 2963085.032511986 "Nominal overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
      end outline_rec;
    public
      outline_rec outline;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record 'eye_int2[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int2[1]_rec';
  public
    'eye_int2[1]_rec' 'eye_int2[1]';
  protected
    record eye2_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye2_rec;
  public
    eye2_rec eye2;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record eye1_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye1_rec;
  public
    eye1_rec eye1;
  protected
    record aux1_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux1_rec;
  public
    aux1_rec aux1;
  protected
    record aux2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux2_rec;
  public
    aux2_rec aux2;
  end preheater_LP2_rec;
public
  preheater_LP2_rec preheater_LP2 annotation(Dialog);
protected
  record preheater_LP3_rec
    constant Integer initOptionShell = 204 "Type of initialisation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10 "Length of the HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2 "Diameter of HEX";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Flow orientation at shell side";
    constant Boolean parallelTubes = true "True if tues are parallel to shell flow orientation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_shell = 10.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux1 = 5.0 "Inlet position of auxilliary1 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux2 = 5.0 "Inlet position of auxilliary2 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_shell = 0.1 "Outlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
    constant Integer N_baffle = 0 "Number of baffles at shell side";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of inner structure elements, additional to the tubes itself";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_shell "Nominal mass flow at shell side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_shell "Nominal pressure at shell side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_shell "Nominal specific enthalpy at shell side";
    constant Real yps_liq_nom = 0.5 "Relative volume of liquid phase at nominal point";
    constant Real 'yps_nom[1]' = 0.5 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    constant Real 'yps_nom[2]' = 0.5 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_shell "Start value of shell fluid pressure";
    constant Real level_rel_start = 0.2 "Start value for relative filling Level";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter of horizontal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter of horizontal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10 "Length of the tubes (one pass)";
    constant Integer N_tubes = 500 "Number of horizontal tubes";
    constant Integer N_passes = 2 "Number of passes of the internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_tubes = 0.1 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_tubes = 0.1 "Outlet position from bottom";
    constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
    constant Integer N_rows = 46 "Number of pipe rows in shell flow direction";
    constant Real CF_geo = 1 "Correction coefficient due to fins etc.";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_tubes "Nominal mass flow on tube side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_tubes "Nominal pressure on tube side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_tubes "Nominal specific enthalpy on tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_nom = 200000000.0 "Nominal heat flow rate";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start_tubes "Start value of tube fluid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_tubes(displayUnit = "bar") "Start value of tube fluid pressure";
    constant Integer initOptionTubes = 0 "Type of initialisation at tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[1]' = 300 "Initial temperature at outer phase";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[2]' = 320 "Initial temperature at outer phase";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[3]' = 340 "Initial temperature at outer phase";
    constant Integer initOptionWall = 1 "Init Option of Wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000 "HTC of the phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 101.78760197630932 "Heat transfer area at phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Real absorbInflow = 1 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of level calculation (table based)";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean levelOutput = true "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput level;
  protected
    record In2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In2_rec;
  public
    In2_rec In2;
  protected
    record Out2_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out2_rec;
  public
    Out2_rec Out2;
  protected
    record Out1_rec
      Modelica.Units.SI.MassFlowRate m_flow(nominal = 1.0) "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out1_rec;
  public
    Out1_rec Out1;
  protected
    record In1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In1_rec;
  public
    In1_rec In1;
  protected
    record aux1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux1_rec;
  public
    aux1_rec aux1;
  protected
    record aux2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux2_rec;
  public
    aux2_rec aux2;
  protected
    record reallocateHeatFlows_rec
      constant Integer N = 2 "Number of axial elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 1 "Length of adapter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 0.5 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 0.5 "Discretisation scheme";
      constant Boolean useStabiliserState = false "True, if a stabiliser state shall be used";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 1 "Time Constant of Stabiliser State";
    protected
      record heatScalar_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heatScalar_rec;
    public
      heatScalar_rec heatScalar;
    protected
      record 'heatVector[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatVector[1]_rec';
    public
      'heatVector[1]_rec' 'heatVector[1]';
    protected
      record 'heatVector[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatVector[2]_rec';
    public
      'heatVector[2]_rec' 'heatVector[2]';
    end reallocateHeatFlows_rec;
  public
    reallocateHeatFlows_rec reallocateHeatFlows;
  protected
    record tubes_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
      constant Integer initOption = 0 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of system specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of system pressure";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "spec. enthalpy state";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 19.63495408493621 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 1570.7963267948965 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 1570.7963267948965 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 0.9817477042468106 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 0.9817477042468106 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1E-06 "Nominal horizonal area";
        constant Integer N_inlet = 1 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 0.1 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = -1 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.05 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_hyd = 0.05 "Hydraulic diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component (one pass)";
        constant Integer N_tubes = 500 "Number of tubes in parallel";
        constant Integer N_passes = 2 "Number of passes of the tubes";
        constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record inlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record heat_rec
        parameter Modelica.Units.SI.Temperature _T_start = 288.15
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Modelica.Units.SI.Temperature T(start = _T_start, fixed=false) "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heat_rec;
    public
      heat_rec heat annotation(Dialog);
    protected
      record summary_rec
      protected
        record outline_rec
          constant Boolean showExpertSummary = false;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 19.63495408493621 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat = 1570.7963267948965 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record inlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          Modelica.Units.SI.Enthalpy H "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record fluidIn_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidIn_rec;
    public
      fluidIn_rec fluidIn;
    protected
      record fluidOut_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidOut_rec;
    public
      fluidOut_rec fluidOut;
    protected
      record heattransfer_rec
        constant Integer HT_type = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom = 3000 "Constant heat transfer coefficient";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 2.122065907891938E-07 "Nominal convective heat resistance";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        constant Real 'PL_alpha[1,1]' = 0.0 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[1,2]' = 0.55 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,1]' = 0.5 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,2]' = 0.65 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,1]' = 0.7 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,2]' = 0.72 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,1]' = 0.8 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,2]' = 0.77 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,1]' = 1 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,2]' = 1 "Correction factor for heat transfer in part load";
        constant Real CF_fouling = 1 "Scaling factor accounting for the fouling of the wall";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wi "Temperature difference between wall and fluid inlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wo "Temperature difference between wall and fluid outlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_mean "Mean temperature difference used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_U "Upper temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_L "Lower temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha "Heat transfer coefficient used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR "Convective heat resistance";
      protected
        record heat_rec
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end heat_rec;
      public
        heat_rec heat;
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_inflow;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_outflow;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_in = 0.0;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_out = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Absolute filling absLevel";
        constant Real level_rel = 0 "Relative filling absLevel";
        constant Real level_rel_start = 0 "Start value for relative filling Level";
        constant Boolean provideDensityDerivative = true "True if density derivative shall be provided";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p;
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1000 "Nominal pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss;
    end tubes_rec;
  public
    tubes_rec tubes annotation(Dialog);
  protected
    record shell_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 101.78760197630932 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
      constant Real level_rel_start = 0.2 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 2 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 2.0357520395261868
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 10.178760197630933 "Volume of the component";
        constant Integer N_heat = 2 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 69.11503837897544 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]'(min = 1E-15) = 1633.6281798666923 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 69.11503837897544 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2]'(min = 1E-15) = 1633.6281798666923 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[2]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 1.0178760197630932 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 3.141592653589793 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1.0178760197630932 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 10.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 10.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2.0 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_t = 0.052 "Outer diameter of internal tubes";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10.0 "Length of the internal tubes (single pass)";
        constant Integer N_tubes = 500 "Number of internal tubes";
        constant Integer N_passes = 2 "Number of passes of the internal tubes";
        constant Boolean parallelTubes = true "True, if tubes are parallel to main flow orientation, else false";
        constant Integer N_baffle = 0 "Number of baffles on shell side";
        constant Real interior(min = 1E-06, max = 1.0) = 0.32400000000000007 "Volume fraction of interior equipment";
        constant Real MIN = 1E-05 "Limiter";
        constant Modelica.Units.SI.Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
        constant Modelica.Units.SI.Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
        constant Real a = 2.0 "Lateral alignment ratio";
        constant Real b = 2.0 "Vertical alignment ratio";
        constant Real psi = 0.6073009183012759 "Void ratio";
        constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly, false otherwise";
        constant Real fa = 1.3333333333333333 "Alignment factor";
        constant Integer N_rows(min = 2, max = 500) = 46 "Number of pipe rows in flow direction (minimum = N_passes)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 1500 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 8000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 4.080895976715265E-07 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 7.651679956341123E-08 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant Integer heatSurfaceAlloc = 2 "To be considered heat transfer area";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 1500.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 8000.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 4.080895976715265E-07 "Convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 7.651679956341123E-08 "Convective heat resistance || [1]:= liq | [2]:= vap";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.2 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 1.0 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 10.0 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 9.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.15000000000000002 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.05 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[1]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]'(start = '_Delta_p[1]_start', fixed=false) "Pressure difference du to friction";
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[2]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]'(start = '_Delta_p[2]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 100 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 1;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 10.178760197630933 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 1633.6281798666923 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end shell_rec;
  public
    shell_rec shell annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 1 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 20.0 "Length of cylinder";
      constant Integer N_tubes = 500 "Number of tubes in parallel";
      constant Integer N_passes = 2 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0.0 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 300.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 320.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 340.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 1602.006899421698 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 1.560542592483502E-08 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 12497.255575980154 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1573.412868650795;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1578.6488612227915;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1586.4985298835493;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1596.9705431674163;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1610.0534641818956;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1625.7615508406038;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 2.643779545653395E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 5.235435505330284E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 7.72621087385135E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 1.5605425924835027E-08 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 1576.0265160977663 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 1591.7173126951916 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 1617.869380488315 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 20.0 "Length of cylinder";
        constant Integer N_tubes = 500 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1573.412868650795;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1578.6488612227915;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1586.4985298835493;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1596.9705431674163;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1610.0534641818956;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1625.7615508406038;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 12497.255575980154;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 7800.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Heat flow rate";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_in "Fluid temperature at inlet T_1_in - T_2_in";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_out "Fluid temperature at outlet T_1_out - T_2_out";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA "Overall heat transmission";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA_nom = 2127138.12994727 "Nominal overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
      end outline_rec;
    public
      outline_rec outline;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye2_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye2_rec;
  public
    eye2_rec eye2;
  protected
    record eye1_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye1_rec;
  public
    eye1_rec eye1;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record 'eye_int2[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int2[1]_rec';
  public
    'eye_int2[1]_rec' 'eye_int2[1]';
  end preheater_LP3_rec;
public
  preheater_LP3_rec preheater_LP3 annotation(Dialog);
protected
  record preheater_LP4_rec
    constant Integer initOptionShell = 204 "Type of initialisation";
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10 "Length of the HEX";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2 "Diameter of HEX";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
    constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Flow orientation at shell side";
    constant Boolean parallelTubes = true "True if tues are parallel to shell flow orientation";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_shell = 10.0 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux1 = 5.0 "Inlet position of auxilliary1 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_aux2 = 5.0 "Inlet position of auxilliary2 from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_shell = 0.1 "Outlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
    constant Integer N_baffle = 0 "Number of baffles at shell side";
    constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0 "Mass of inner structure elements, additional to the tubes itself";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_shell "Nominal mass flow at shell side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_shell "Nominal pressure at shell side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_shell "Nominal specific enthalpy at shell side";
    constant Real yps_liq_nom = 0.5 "Relative volume of liquid phase at nominal point";
    constant Real 'yps_nom[1]' = 0.5 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    constant Real 'yps_nom[2]' = 0.5 "Relative volume of liquid phase [1] and vapour phase [2] at nominal point";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of liquid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of vapour specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_shell "Start value of shell fluid pressure";
    constant Real level_rel_start = 0.1 "Start value for relative filling Level";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter of horizontal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter of horizontal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10 "Length of the tubes (one pass)";
    constant Integer N_tubes = 600 "Number of horizontal tubes";
    constant Integer N_passes = 2 "Number of passes of the internal tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in_tubes = 0.1 "Inlet position from bottom";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out_tubes = 0.1 "Outlet position from bottom";
    constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
    constant Integer N_rows = 50 "Number of pipe rows in shell flow direction";
    constant Real CF_geo = 1 "Correction coefficient due to fins etc.";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom_tubes "Nominal mass flow on tube side";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom_tubes "Nominal pressure on tube side";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom_tubes "Nominal specific enthalpy on tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_nom = 200000000.0 "Nominal heat flow rate";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start_tubes "Start value of tube fluid specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start_tubes(displayUnit = "bar") "Start value of tube fluid pressure";
    constant Integer initOptionTubes = 0 "Type of initialisation at tube side";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[1]' = 300 "Initial temperature at outer phase";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[2]' = 320 "Initial temperature at outer phase";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_w_start[3]' = 340 "Initial temperature at outer phase";
    constant Integer initOptionWall = 1 "Init Option of Wall";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
    constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000 "HTC of the phase border";
    constant importedFMUTypes.ClaRa_Basics_Units_Area A_phaseBorder = 59.31326929977531 "Heat transfer area at phase border";
    constant Real expHT_phases = 0 "Exponent for volume dependency on inter phase HT";
    constant Real absorbInflow = 1 "Absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
    constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
    constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of level calculation (table based)";
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean levelOutput = true "True, if Real level connector shall be addded";
    constant Boolean outputAbs = false "True, if absolute level is at output";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput level;
  protected
    record In2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In2_rec;
  public
    In2_rec In2;
  protected
    record Out2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out2_rec;
  public
    Out2_rec Out2;
  protected
    record Out1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end Out1_rec;
  public
    Out1_rec Out1;
  protected
    record In1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end In1_rec;
  public
    In1_rec In1;
  protected
    record aux1_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux1_rec;
  public
    aux1_rec aux1;
  protected
    record aux2_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end aux2_rec;
  public
    aux2_rec aux2;
  protected
    record reallocateHeatFlows_rec
      constant Integer N = 2 "Number of axial elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 1 "Length of adapter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 0.5 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 0.5 "Discretisation scheme";
      constant Boolean useStabiliserState = false "True, if a stabiliser state shall be used";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 1 "Time Constant of Stabiliser State";
    protected
      record heatScalar_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heatScalar_rec;
    public
      heatScalar_rec heatScalar;
    protected
      record 'heatVector[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatVector[1]_rec';
    public
      'heatVector[1]_rec' 'heatVector[1]';
    protected
      record 'heatVector[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end 'heatVector[2]_rec';
    public
      'heatVector[2]_rec' 'heatVector[2]';
    end reallocateHeatFlows_rec;
  public
    reallocateHeatFlows_rec reallocateHeatFlows;
  protected
    record tubes_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
      constant Integer initOption = 0 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of system specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of system pressure";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 1 "Heat transfer area to be considered";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "spec. enthalpy state";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 23.56194490192345 "Volume of the component";
        constant Integer N_heat = 1 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 1884.9555921538758 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 1884.9555921538758 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 1.1780972450961726 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 1.1780972450961726 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 1E-06 "Nominal horizonal area";
        constant Integer N_inlet = 1 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 0.1 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = -1 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.05 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_hyd = 0.05 "Hydraulic diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component (one pass)";
        constant Integer N_tubes = 600 "Number of tubes in parallel";
        constant Integer N_passes = 2 "Number of passes of the tubes";
        constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record inlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record heat_rec
        parameter Modelica.Units.SI.Temperature _T_start = 288.15
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Modelica.Units.SI.Temperature T(start = _T_start, fixed=false) "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow(nominal = 100000.0) "Heat flow rate (positive if flowing from outside into the component)";
      end heat_rec;
    public
      heat_rec heat annotation(Dialog);
    protected
      record summary_rec
      protected
        record outline_rec
          constant Boolean showExpertSummary = false;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 23.56194490192345 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat = 1884.9555921538758 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record inlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end inlet_rec;
      public
        inlet_rec inlet;
      protected
        record outlet_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end outlet_rec;
      public
        outlet_rec outlet;
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          Modelica.Units.SI.Enthalpy H "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    protected
      record fluidIn_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidIn_rec;
    public
      fluidIn_rec fluidIn;
    protected
      record fluidOut_rec
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = true "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = true "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = true "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          Modelica.Units.SI.PrandtlNumber Pr "Prandtl number";
          Modelica.Units.SI.ThermalConductivity lambda "Thermal conductivity";
          Modelica.Units.SI.DynamicViscosity eta(min = -1.0) "Dynamic viscosity";
          Modelica.Units.SI.SurfaceTension sigma "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          Modelica.Units.SI.SpecificHeatCapacity cp_l "Specific heat capacity cp of liquid phase";
          Modelica.Units.SI.SpecificHeatCapacity cp_v "Specific heat capacity cp of vapour phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_l "Isobaric expansion coefficient of liquid phase";
          Modelica.Units.SI.LinearExpansionCoefficient beta_v "Isobaric expansion coefficient of vapour phase";
          Modelica.Units.SI.Compressibility kappa_l "Isothermal compressibility of liquid phase";
          Modelica.Units.SI.Compressibility kappa_v "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          Modelica.Units.SI.PrandtlNumber Pr_l "Prandtl number of liquid phase";
          Modelica.Units.SI.PrandtlNumber Pr_v "Prandtl number of vapour phase";
          Modelica.Units.SI.ThermalConductivity lambda_l "Thermal conductivity of liquid phase";
          Modelica.Units.SI.ThermalConductivity lambda_v "Thermal conductivity of vapour phase";
          Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) "Dynamic viscosity of liquid phase";
          Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end fluidOut_rec;
    public
      fluidOut_rec fluidOut;
    protected
      record heattransfer_rec
        constant Integer HT_type = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom = 3000 "Constant heat transfer coefficient";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 1.768388256576615E-07 "Nominal convective heat resistance";
        constant Integer heatSurfaceAlloc = 1 "To be considered heat transfer area";
        constant Real 'PL_alpha[1,1]' = 0.0 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[1,2]' = 0.55 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,1]' = 0.5 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[2,2]' = 0.65 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,1]' = 0.7 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[3,2]' = 0.72 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,1]' = 0.8 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[4,2]' = 0.77 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,1]' = 1 "Correction factor for heat transfer in part load";
        constant Real 'PL_alpha[5,2]' = 1 "Correction factor for heat transfer in part load";
        constant Real CF_fouling = 1 "Scaling factor accounting for the fouling of the wall";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wi "Temperature difference between wall and fluid inlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_wo "Temperature difference between wall and fluid outlet temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_mean "Mean temperature difference used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_U "Upper temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_Temperature Delta_T_L "Lower temperature difference";
        importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha "Heat transfer coefficient used for heat transfer calculation";
        importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR "Convective heat resistance";
      protected
        record heat_rec
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end heat_rec;
      public
        heat_rec heat;
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_inflow;
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_outflow;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_in = 0.0;
        constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_geo_out = 0;
        constant importedFMUTypes.ClaRa_Basics_Units_Length level_abs = 0 "Absolute filling absLevel";
        constant Real level_rel = 0 "Relative filling absLevel";
        constant Real level_rel_start = 0 "Start value for relative filling Level";
        constant Boolean provideDensityDerivative = true "True if density derivative shall be provided";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p;
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_nom = 1000 "Nominal pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss;
    end tubes_rec;
  public
    tubes_rec tubes annotation(Dialog);
  protected
    record shell_rec
      constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rates at inlet";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
      constant Integer initOption = 204 "Type of initialisation";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq "Specific enthalpy of liquid phase";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap "Specific enthalpy of vapour phase";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_cond = 0.3 "Time constant of condensation";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_evap = 0.03 "Time constant of evaporation";
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_ph = 50000.0 "HTC of the phase border";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_ph = 59.31326929977531 "Heat transfer area at phase border";
      constant Real exp_HT_phases = 0.0 "Exponent for volume dependency on inter phase HT";
      constant Boolean equalPressures = true "True if pressure in liquid and vapour phase is equal";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_liq_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho_vap_nom "Nominal density";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_liq_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_vap_start "Start value of sytsem specific enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
      constant Real level_rel_start = 0.1 "Start value for relative filling level";
      constant Boolean showExpertSummary = true "True, if expert summary should be applied";
      constant Integer heatSurfaceAlloc = 2 "Heat transfer area to be considered";
      Real drho_liqdt(unit = "kg/(m3.s)") "Time derivative of liquid density";
      Real drho_vapdt(unit = "kg/(m3.s)") "Time derivative of vapour density";
      parameter importedFMUTypes.ClaRa_Basics_Units_Volume _volume_liq_start = 0.5931326929977531
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_liq(start = _volume_liq_start, fixed=false) "Liquid volume";
      Real _volume_liq_der(unit = "m3/s") "der(Liquid volume)";
      importedFMUTypes.ClaRa_Basics_Units_Volume volume_vap "Vapour volume";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_cond "Condensing mass flow";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_evap "Evaporating mass flow";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_phases "Heat flow between phases";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_liq "Liquid mass";
      importedFMUTypes.ClaRa_Basics_Units_Mass mass_vap "Vapour mass";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_liq "Liquid pressure";
      Real _p_liq_der(unit = "Pa/s") "der(Liquid pressure)";
      importedFMUTypes.ClaRa_Basics_Units_Pressure p_vap "Vapour pressure";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[2]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_inliq[3]' = 0.0 "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[1]' "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[2]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_invap[3]' = 0.0 "Enthalpy flow rate passing from inlet to vapour zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outliq[1]' "Enthalpy flow rate passing from inlet to liquid zone and vice versa";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_outvap[1]' "Enthalpy flow rate passing from outlet to vapour zone and vice versa";
    protected
      record geo_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-15) = 5.93132692997753 "Volume of the component";
        constant Integer N_heat = 2 "No. of heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]'(min = 1E-15) = 69.11503837897544 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]'(min = 1E-15) = 1960.3538158400308 "Heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1]'(min = 1E-15) = 69.11503837897544 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2]'(min = 1E-15) = 1960.3538158400308 "Corrected heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[1]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant Real 'CF_geo[2]'(min = 1E-15) = 1.0 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_cross(min = 1E-15) = 0.5931326929977532 "Cross section for mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_front(min = 1E-15) = 3.141592653589793 "Frontal area";
        constant importedFMUTypes.ClaRa_Basics_Units_Area A_hor = 0.5931326929977531 "Nominal horizonal area";
        constant Integer N_inlet = 3 "Number of inlet ports";
        constant Integer N_outlet = 1 "Number of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[1]' = 10.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[2]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_in[3]' = 5.0 "Height of inlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_out[1]' = 0.1 "Height of outlet ports";
        constant importedFMUTypes.ClaRa_Basics_Units_Length height_fill = 10.0 "Fillable height of component";
        constant Real 'shape[1,1]' = 0 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[1,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,1]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant Real 'shape[2,2]' = 1 "Shape factor, i.e. A_horitontal=A_hor*interp(shape, relLevel)";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation orientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the component";
        constant importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation flowOrientation = importedFMUTypes.ClaRa_Basics_Choices_GeometryOrientation.vertical "Orientation of the mass flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 2.0 "Diameter of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 10.0 "Length of the component";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_t = 0.052 "Outer diameter of internal tubes";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length_tubes = 10.0 "Length of the internal tubes (single pass)";
        constant Integer N_tubes = 600 "Number of internal tubes";
        constant Integer N_passes = 2 "Number of passes of the internal tubes";
        constant Boolean parallelTubes = true "True, if tubes are parallel to main flow orientation, else false";
        constant Integer N_baffle = 0 "Number of baffles on shell side";
        constant Real interior(min = 1E-06, max = 1.0) = 0.18880000000000002 "Volume fraction of interior equipment";
        constant Real MIN = 1E-05 "Limiter";
        constant Modelica.Units.SI.Length Delta_z_ort = 0.104 "Distance between tubes orthogonal to flow direction (center to center)";
        constant Modelica.Units.SI.Length Delta_z_par = 0.104 "Distance between tubes parallel to flow direction (center to center)";
        constant Real a = 2.0 "Lateral alignment ratio";
        constant Real b = 2.0 "Vertical alignment ratio";
        constant Real psi = 0.6073009183012759 "Void ratio";
        constant Boolean staggeredAlignment = true "True, if the tubes are aligned staggeredly, false otherwise";
        constant Real fa = 1.3333333333333333 "Alignment factor";
        constant Integer N_rows(min = 2, max = 600) = 50 "Number of pipe rows in flow direction (minimum = N_passes)";
      end geo_rec;
    public
      geo_rec geo;
    protected
      record 'inlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[1]_rec';
    public
      'inlet[1]_rec' 'inlet[1]';
    protected
      record 'inlet[2]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[2]_rec';
    public
      'inlet[2]_rec' 'inlet[2]';
    protected
      record 'inlet[3]_rec'
        constant Modelica.Units.SI.MassFlowRate m_flow = 0.0 "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'inlet[3]_rec';
    public
      'inlet[3]_rec' 'inlet[3]';
    protected
      record 'outlet[1]_rec'
        Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
        Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
        Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
      end 'outlet[1]_rec';
    public
      'outlet[1]_rec' 'outlet[1]';
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'fluidIn[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[1]_rec';
    public
      'fluidIn[1]_rec' 'fluidIn[1]';
    protected
      record 'fluidIn[2]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[2]_rec';
    public
      'fluidIn[2]_rec' 'fluidIn[2]';
    protected
      record 'fluidIn[3]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidIn[3]_rec';
    public
      'fluidIn[3]_rec' 'fluidIn[3]';
    protected
      record 'fluidOut[1]_rec'
        constant Boolean stateSelectPreferForInputs = false "=true, StateSelect.prefer is set for input variables";
        constant Boolean computeTransportProperties = false "=true, if transport properties are calculated";
        constant Boolean interpolateTransportProperties = true "Interpolate transport properties in vapor dome";
        constant Boolean computeSurfaceTension = true;
        constant Boolean deactivateDensityDerivatives = false "Deactivate calculation of partial derivatives of density";
        constant Boolean computeVLEAdditionalProperties = false "Compute detailed vapor liquid equilibrium properties";
        constant Boolean computeVLETransportProperties = false "Compute detailed vapor liquid equilibrium transport properties";
        constant Boolean deactivateTwoPhaseRegion = false "Deactivate calculation of two phase region";
        Modelica.Units.SI.Density d(nominal = 1000.0) "Density";
        Modelica.Units.SI.AbsolutePressure p "Pressure";
        Modelica.Units.SI.SpecificEnthalpy h "Specific enthalpy";
        Modelica.Units.SI.SpecificEntropy s(nominal = 1000.0, min = 0.0) "Specific entropy";
        Modelica.Units.SI.Temperature T "Temperature";
        Modelica.Units.SI.MolarMass M "Average molar mass";
        Modelica.Units.SI.MassFraction q(nominal = 1.0) "Steam mass fraction (quality)";
        Modelica.Units.SI.SpecificHeatCapacity cp "Specific isobaric heat capacity cp";
        Modelica.Units.SI.SpecificHeatCapacity cv "Specific isochoric heat capacity cv";
        Modelica.Units.SI.LinearExpansionCoefficient beta "Isobaric thermal expansion coefficient";
        Modelica.Units.SI.Compressibility kappa "Isothermal compressibility";
        Modelica.Units.SI.Velocity w "Speed of sound";
        Modelica.Units.SI.DerDensityByEnthalpy drhodh_pxi "1st derivative of density wrt specific enthalpy at constant pressure and mass fraction";
        Modelica.Units.SI.DerDensityByPressure drhodp_hxi "1st derivative of density wrt pressure at specific enthalpy and mass fraction";
        Real gamma "Heat capacity ratio aka isentropic expansion factor";
        Modelica.Units.SI.MolarMass 'M_i[1]' "Molar mass of component i";
      protected
        record vleFluidPointer_rec
          Integer id;
        end vleFluidPointer_rec;
      public
        vleFluidPointer_rec vleFluidPointer;
      protected
        record crit_rec
          Modelica.Units.SI.Density d "Critical density";
          Modelica.Units.SI.SpecificEnthalpy h "Critical specific enthalpy";
          Modelica.Units.SI.AbsolutePressure p "Critical pressure";
          Modelica.Units.SI.SpecificEntropy s "Critical specific entropy";
          Modelica.Units.SI.Temperature T "Critical temperature";
        end crit_rec;
      public
        crit_rec crit;
      protected
        record transp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr = -1.0 "Prandtl number";
          constant Modelica.Units.SI.ThermalConductivity lambda = -1.0 "Thermal conductivity";
          constant Modelica.Units.SI.DynamicViscosity eta(min = -1.0) = -1.0 "Dynamic viscosity";
          constant Modelica.Units.SI.SurfaceTension sigma = -1.0 "Surface tension";
        end transp_rec;
      public
        transp_rec transp;
      protected
        record VLE_rec
          Modelica.Units.SI.Density d_l "Density of liquid phase";
          Modelica.Units.SI.Density d_v "Density of vapour phase";
          Modelica.Units.SI.SpecificEnthalpy h_l "Specific enthalpy of liquid phase";
          Modelica.Units.SI.SpecificEnthalpy h_v "Specific enthalpy of vapour phase";
          Modelica.Units.SI.AbsolutePressure p_l "Pressure of liquid phase";
          Modelica.Units.SI.AbsolutePressure p_v "Pressure of vapour phase";
          Modelica.Units.SI.SpecificEntropy s_l "Specific entropy of liquid phase";
          Modelica.Units.SI.SpecificEntropy s_v "Specific entropy of vapour phase";
          Modelica.Units.SI.Temperature T_l "Temperature of liquid phase";
          Modelica.Units.SI.Temperature T_v "Temperature of vapour phase";
          constant Integer nc = 1;
        end VLE_rec;
      public
        VLE_rec VLE;
      protected
        record VLEAdditional_rec
          constant Modelica.Units.SI.SpecificHeatCapacity cp_l = -1 "Specific heat capacity cp of liquid phase";
          constant Modelica.Units.SI.SpecificHeatCapacity cp_v = -1 "Specific heat capacity cp of vapour phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_l = -1 "Isobaric expansion coefficient of liquid phase";
          constant Modelica.Units.SI.LinearExpansionCoefficient beta_v = -1 "Isobaric expansion coefficient of vapour phase";
          constant Modelica.Units.SI.Compressibility kappa_l = -1 "Isothermal compressibility of liquid phase";
          constant Modelica.Units.SI.Compressibility kappa_v = -1 "Isothermal compressibility of vapour phase";
        end VLEAdditional_rec;
      public
        VLEAdditional_rec VLEAdditional;
      protected
        record VLETransp_rec
          constant Modelica.Units.SI.PrandtlNumber Pr_l = -1 "Prandtl number of liquid phase";
          constant Modelica.Units.SI.PrandtlNumber Pr_v = -1 "Prandtl number of vapour phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_l = -1 "Thermal conductivity of liquid phase";
          constant Modelica.Units.SI.ThermalConductivity lambda_v = -1 "Thermal conductivity of vapour phase";
          constant Modelica.Units.SI.DynamicViscosity eta_l(min = -1.0) = -1 "Dynamic viscosity of liquid phase";
          constant Modelica.Units.SI.DynamicViscosity eta_v(min = -1.0) = -1 "Dynamic viscosity of vapour phase";
        end VLETransp_rec;
      public
        VLETransp_rec VLETransp;
      end 'fluidOut[1]_rec';
    public
      'fluidOut[1]_rec' 'fluidOut[1]';
    protected
      record heattransfer_rec
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference between wall and fluid";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference between wall and fluid";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[1]' = 1500 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha_nom[2]' = 8000 "Constant heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[1]' = 3.4007466472627213E-07 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_nom[2]' = 6.376399963617602E-08 "Nominal convective heat resistance || [1]:= liq | [2]:= vap";
        constant Integer heatSurfaceAlloc = 2 "To be considered heat transfer area";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Sum of zonal heat flows";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]' = 1500.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]' = 8000.0 "Heat transfer coefficient || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[1]' = 3.4007466472627213E-07 "Convective heat resistance || [1]:= liq | [2]:= vap";
        constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR[2]' = 6.376399963617602E-08 "Convective heat resistance || [1]:= liq | [2]:= vap";
      protected
        record 'heat[1]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[1]_rec';
      public
        'heat[1]_rec' 'heat[1]';
      protected
        record 'heat[2]_rec'
          Modelica.Units.SI.Temperature T "Port temperature";
          Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        end 'heat[2]_rec';
      public
        'heat[2]_rec' 'heat[2]';
      end heattransfer_rec;
    public
      heattransfer_rec heattransfer;
    protected
      record phaseBorder_rec
        constant Real level_rel_start = 0.1 "Start value for relative filling level (set by applying control volume)";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[1]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[2]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_in[3]' "Geodetic pressure difference to inlets";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_geo_out[1]' "Geodetic pressure difference to outlets";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[1]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[2]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_in[3]' "Allocation of inlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'zoneAlloc_out[1]' "Allocation of outlet mass flows to zones |1:liq|2:vap|";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling absLevel";
        Real level_rel "Relative filling absLevel";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[1]' "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[2]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_inliq[3]' = 0.0 "Mass flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[1]' "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[2]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_invap[3]' = 0.0 "Mass flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outliq[1]' "Mass flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_outvap[1]' "Mass flow passing from outlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[1]' "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[2]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_inliq[3]' = 0.0 "Enthalpy flow passing from inlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[1]' "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[2]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_invap[3]' = 0.0 "Enthalpy flow passing from inlet to zone 2 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outliq[1]' "Enthalpy flow passing from outlet to zone 1 and vice versa";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'H_flow_outvap[1]' "Enthalpy flow passing from outlet to zone 2 and vice versa";
        constant importedFMUTypes.ClaRa_Basics_Units_Length radius_flange = 0.05 "Flange radius";
        constant Real absorbInflow(min = 0.0, max = 1.0) = 1.0 "absorption of incoming mass flow to the zones 1: perfect in the allocated zone, 0: perfect according to steam quality";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[1]' = 10.0 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[2]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_in[3]' = 5.05 "Upper edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[1]' = 9.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[2]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_in[3]' = 4.95 "Lower edges of inlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_max_out[1]' = 0.15000000000000002 "Upper edges of outlet flanges";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'z_min_out[1]' = 0.05 "Lower edges of outlet flanges";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]' "Zonal density";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[1]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[2]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_in[3]' "Inlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality_out[1]' "Outlet steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Area A_hor_act "Actual horizontal surface size";
      end phaseBorder_rec;
    public
      phaseBorder_rec phaseBorder;
    protected
      record pressureLoss_rec
        constant Boolean hasPressureLoss = true;
        parameter importedFMUTypes.ClaRa_Basics_Units_PressureDifference '_Delta_p[1]_start' = 1
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]'(start = '_Delta_p[1]_start', fixed=false) "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]' "Pressure difference du to friction";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference du to friction";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[1]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[2]' = 100 "Nominal ressure loss";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure 'Delta_p_nom[3]' = 100 "Nominal ressure loss";
        constant Real CF_backflow = 1 "Enhancement factor for reverse flow pressure loss";
      end pressureLoss_rec;
    public
      pressureLoss_rec pressureLoss annotation(Dialog);
    protected
      record summary_rec
        constant Integer N_inlet = 3;
        constant Integer N_outlet = 1;
      protected
        record outline_rec
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 5.93132692997753 "Total volume";
          constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_tot = 1960.3538158400308 "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]' "Volume of liquid and steam volume";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' "Heat transfer area";
          importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolue filling level";
          Real level_rel "relative filling level";
          Real 'yps[1]' "Relative volume of liquid phase [1] and vapour phase [2]";
          Real 'yps[2]' "Relative volume of liquid phase [1] and vapour phase [2]";
          importedFMUTypes.ClaRa_Basics_Units_Mass fluidMass "Total fluid mass";
          importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Systems's enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot "Total heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Zonal heat flow rate";
          importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
        end outline_rec;
      public
        outline_rec outline;
      protected
        record 'inlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[1]_rec';
      public
        'inlet[1]_rec' 'inlet[1]';
      protected
        record 'inlet[2]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[2]_rec';
      public
        'inlet[2]_rec' 'inlet[2]';
      protected
        record 'inlet[3]_rec'
          constant Boolean showExpertSummary = true;
          constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow = 0.0 "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          constant importedFMUTypes.ClaRa_Basics_Units_Power H_flow = 0.0 "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'inlet[3]_rec';
      public
        'inlet[3]_rec' 'inlet[3]';
      protected
        record 'outlet[1]_rec'
          constant Boolean showExpertSummary = true;
          importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
          importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
          importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
        end 'outlet[1]_rec';
      public
        'outlet[1]_rec' 'outlet[1]';
      protected
        record fluid_rec
          constant Boolean showExpertSummary = true;
          constant Integer N_cv = 2 "Number of zones or nodes";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
          importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
          Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
          Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
          importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        end fluid_rec;
      public
        fluid_rec fluid;
      end summary_rec;
    public
      summary_rec summary;
    end shell_rec;
  public
    shell_rec shell annotation(Dialog);
  protected
    record wall_rec
      constant Integer initOption = 1 "Type of initialisation";
      constant Real CF_lambda = 1 "Time-dependent correction factor for thermal conductivity";
      constant Integer N_rad = 3 "Number of radial elements";
      constant Real sizefunc = 1 "Stretching of the volume elements (+1: inner elements are smaller)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 20.0 "Length of cylinder";
      constant Integer N_tubes = 600 "Number of tubes in parallel";
      constant Integer N_passes = 2 "Number of passes per tube";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass_struc = 0.0 "Mass of inner structure elements, additional to the tubes itself";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[1]' = 300.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[2]' = 320.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_start[3]' = 340.0 "Start values of wall temperature inner --> outer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area A_heat_m = 1922.408279306038 "Mean area of heat transfer per pass";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR_nom = 1.3004521604029183E-08 "Nominal conductive heat resistance";
      constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 14996.706691176187 "Wall mass";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]'(nominal = 300.0) "Solid material temperature";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
      importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1888.0954423809537;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1894.3786334673498;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1903.798235860259;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1916.3646518008995;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1932.0641570182745;
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1950.9138610087246;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
      Real 'Tdr[1]' "Integral(Tdr)";
      Real 'Tdr[2]' "Integral(Tdr)";
      Real 'Tdr[3]' "Integral(Tdr)";
      Real 'Tdr[4]' "Integral(Tdr)";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[1]' = 2.203149621377829E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[2]' = 4.362862921108569E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance 'HR_rad[3]' = 6.438509061542792E-09 "Conductive heat resistance of each radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_ThermalResistance HR = 1.300452160402919E-08 "Conductive heat resistance of the wall";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[1]' = 1891.2318193173196 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[2]' = 1910.06077523423 "Mean area of heat transfer per radial volume element";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_m_rad[3]' = 1941.443256585978 "Mean area of heat transfer per radial volume element";
      importedFMUTypes.ClaRa_Basics_Units_Temperature T_mean "Mean temperature";
    protected
      record outerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end outerPhase_rec;
    public
      outerPhase_rec outerPhase;
    protected
      record 'solid[1]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[1]_rec';
    public
      'solid[1]_rec' 'solid[1]';
    protected
      record 'solid[2]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[2]_rec';
    public
      'solid[2]_rec' 'solid[2]';
    protected
      record 'solid[3]_rec'
        constant Modelica.Units.SI.Density d = 7800.0 "Density";
        Modelica.Units.SI.Temperature T "Temperature";
        constant Modelica.Units.SI.SpecificHeatCapacity cp = 490.0 "Heat capacity";
        constant Modelica.Units.SI.ThermalConductivity lambda = 40.0 "Thermal conductivity";
        constant Modelica.Units.SI.SpecificHeatCapacity cp_nominal = 490.0 "Specific heat capacity at standard reference point";
        constant Modelica.Units.SI.ThermalConductivity lambda_nominal = 40.0 "Thermal conductivity at standard reference point";
      end 'solid[3]_rec';
    public
      'solid[3]_rec' 'solid[3]';
    protected
      record innerPhase_rec
        Modelica.Units.SI.Temperature T "Port temperature";
        Modelica.Units.SI.HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
      end innerPhase_rec;
    public
      innerPhase_rec innerPhase;
    protected
      record summary_rec
        constant Integer N_rad = 3 "Number of radial elements";
        constant Integer N_A_heat = 6 "Number of surfaces used in order to model heat flow";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_o = 0.052 "Outer diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.05 "Inner diameter";
        constant importedFMUTypes.ClaRa_Basics_Units_Length length = 20.0 "Length of cylinder";
        constant Integer N_tubes = 600 "Number of tubes in parallel";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[1]' = 0.00016666666666666623 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[2]' = 0.00033333333333333245 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_radius[3]' = 0.0004999999999999987 "Thicknes of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[1]' = 0.025 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[2]' = 0.025166666666666667 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[3]' = 0.0255 "Radii of the heat transfer areas";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius[4]' = 0.025999999999999995 "Radii of the heat transfer areas";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Solid material temperature";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[1]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[2]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_InternalEnergy 'U[3]' "Internal energy";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' "Heat flow through material";
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[4]' "Heat flow through material";
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1888.0954423809537;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1894.3786334673498;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1903.798235860259;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[4]' = 1916.3646518008995;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[5]' = 1932.0641570182745;
        constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[6]' = 1950.9138610087246;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[1]' = 0.025041643557017306;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[2]' = 0.025124976966999876;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[3]' = 0.02524990832389919;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[4]' = 0.025416575591724333;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[5]' = 0.025624796746677853;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_m[6]' = 0.025874798710502783;
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[1]' = 0.025 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[2]' = 0.025083333333333336 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[3]' = 0.025333333333333333 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[4]' = 0.02575 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Length 'radius_v[5]' = 0.026 "Radial position of the volume elements";
        constant importedFMUTypes.ClaRa_Basics_Units_Mass mass = 14996.706691176187;
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[1]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[2]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityMassSpecific 'cp[3]' = 490.0 "Specific heat capacity";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[1]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[2]' = 7800.0 "Material density";
        constant importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'd[3]' = 7800.0 "Material density";
      end summary_rec;
    public
      summary_rec summary;
    end wall_rec;
  public
    wall_rec wall;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow "Heat flow rate";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_in "Fluid temperature at inlet T_1_in - T_2_in";
        importedFMUTypes.ClaRa_Basics_Units_TemperatureDifference Delta_T_out "Fluid temperature at outlet T_1_out - T_2_out";
        importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA "Overall heat transmission";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatCapacityFlowRate kA_nom = 2552565.7559367237 "Nominal overall heat transmission";
        importedFMUTypes.ClaRa_Basics_Units_Length level_abs "Absolute filling level";
        Real level_rel "relative filling level";
      end outline_rec;
    public
      outline_rec outline;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye2_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye2_rec;
  public
    eye2_rec eye2;
  protected
    record eye1_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye1_rec;
  public
    eye1_rec eye1;
  protected
    record 'eye_int1[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int1[1]_rec';
  public
    'eye_int1[1]_rec' 'eye_int1[1]';
  protected
    record 'eye_int2[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int2[1]_rec';
  public
    'eye_int2[1]_rec' 'eye_int2[1]';
  end preheater_LP4_rec;
public
  preheater_LP4_rec preheater_LP4 annotation(Dialog);
protected
  record Pump_preheater_LP3_rec
    constant Boolean showExpertSummary = true "True, if expert summary should be applied";
    constant Boolean showData = true "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p "Pressure difference between pressure side and suction side";
    importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
    importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Power to the fluid";
    constant Real eta_mech = 0.9 "Mechanic efficiency of the drive";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_start = 1 "Initial guess value for mass flow";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p_eps = 100 "Small pressure difference for linearisation around zero";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput P_drive "Power input of the pump's motor";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      importedFMUTypes.ClaRa_Basics_Units_Power powerAux;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          importedFMUTypes.ClaRa_Basics_Units_Power power_aux;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  protected
    record summary_rec
    protected
      record outline_rec
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference";
        importedFMUTypes.ClaRa_Basics_Units_Length head "Head";
        importedFMUTypes.ClaRa_Basics_Units_Length NPSHa "Net positive suction head available";
        constant Real eta_hyd = 0 "Hydraulic efficiency";
        constant Real eta_mech = 0.9 "Mechanic efficiency";
        importedFMUTypes.ClaRa_Basics_Units_Power P_fluid "Hydraulic power";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  end Pump_preheater_LP3_rec;
public
  Pump_preheater_LP3_rec Pump_preheater_LP3;
protected
  record valve_afterPumpLP3_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = false "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 1000 "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 30 "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_afterPumpLP3_rec;
public
  valve_afterPumpLP3_rec valve_afterPumpLP3;
protected
  record valveControl_preheater_LP2_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = true "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput opening_in "=1: completely open, =0: completely closed";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 20000.0 "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 25 "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        Real opening_ "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valveControl_preheater_LP2_rec;
public
  valveControl_preheater_LP2_rec valveControl_preheater_LP2;
protected
  record join_preheater_LP3_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant importedFMUTypes.ClaRa_Basics_Units_Volume volume(min = 1E-06) = 0.1 "System Volume";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_in_nom[1]' = 10 "Nominal mass flow rates at inlet";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow_in_nom[2]' = 10 "Nominal mass flow rates at inlet";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_nom "Nominal specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_start "Start value of sytsem specific enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure p_start "Start value of sytsem pressure";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean preciseTwoPhase = true "|Expert Stettings||True, if two-phase transients should be capured precisely";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_in[1]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate 'H_flow_in[2]';
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyFlowRate H_flow_out;
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h;
    importedFMUTypes.ClaRa_Basics_Units_Mass mass "Total system mass";
    Real drhodt;
    importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
  protected
    record summary_rec
    protected
      record outline_rec
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.1 "Total volume";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet1_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet1_rec;
    public
      inlet1_rec inlet1;
    protected
      record inlet2_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet2_rec;
    public
      inlet2_rec inlet2;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_Mass mass "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T_sat "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_bub "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_dew "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        Modelica.Units.SI.Enthalpy H "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end fluid_rec;
    public
      fluid_rec fluid;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record pressureLossIn1_rec
      constant Boolean hasPressureLoss = true;
      importedFMUTypes.ClaRa_Basics_Units_Pressure dp;
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 420.0;
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure dp_nom = 10 "Nominal pressure loss";
    end pressureLossIn1_rec;
  public
    pressureLossIn1_rec pressureLossIn1;
  protected
    record pressureLossIn2_rec
      constant Boolean hasPressureLoss = false;
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure dp = 0;
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
    end pressureLossIn2_rec;
  public
    pressureLossIn2_rec pressureLossIn2;
  protected
    record pressureLossOut_rec
      constant Boolean hasPressureLoss = false;
      constant importedFMUTypes.ClaRa_Basics_Units_Pressure dp = 0;
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
    end pressureLossOut_rec;
  public
    pressureLossOut_rec pressureLossOut;
  protected
    record inlet1_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet1_rec;
  public
    inlet1_rec inlet1;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record inlet2_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet2_rec;
  public
    inlet2_rec inlet2;
  end join_preheater_LP3_rec;
public
  join_preheater_LP3_rec join_preheater_LP3;
protected
  record valveControl_preheater_LP4_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = true "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput opening_in "=1: completely open, =0: completely closed";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 6000.0 "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 8 "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        Real opening_ "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valveControl_preheater_LP4_rec;
public
  valveControl_preheater_LP4_rec valveControl_preheater_LP4;
protected
  record valve_LP2_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom "Nominal pressure difference for Kv definition";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_LP2_rec;
public
  valve_LP2_rec valve_LP2;
protected
  record valve_LP3_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = true "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom "Nominal pressure difference for Kv definition";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valve_LP3_rec;
public
  valve_LP3_rec valve_LP3;
protected
  record boundaryVLE_Txim_flow_rec
    constant Boolean variable_m_flow = false "True, if mass flow defined by variable input";
    constant Boolean variable_T = false "True, if temperature defined by variable input";
    constant Boolean variable_xi = false "True, if composition defined by variable input";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_const = 25000 "Constant mass flow rate";
    constant importedFMUTypes.ClaRa_Basics_Units_Temperature T_const = 288.15 "Constant temperature of source";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_nom = 100000.0 "Nominal flange pressure";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 0 "Nominal flange mass flow (zero refers to ideal boundary)";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    constant Integer energyType = 0 "Type of energy";
  protected
    record steam_a_rec
      constant Modelica.Units.SI.MassFlowRate m_flow = -25000.0 "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow(nominal = 1000.0) "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end steam_a_rec;
  public
    steam_a_rec steam_a;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      constant Real m_flow = 25000.0 "Mass flow rate in kg/s";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T = 15.0 "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      constant Real m_flow = 25000.0 "Mass flow rate in kg/s";
      constant importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T = 15.0 "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerAux = 0;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_aux = 0.0;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  end boundaryVLE_Txim_flow_rec;
public
  boundaryVLE_Txim_flow_rec boundaryVLE_Txim_flow;
protected
  record boundaryVLE_phxi_rec
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    constant Integer energyType = 0 "Type of energy";
    constant Boolean variable_p = false "True, if pressure defined by variable input";
    constant Boolean variable_h = false "True, if spc. enthalpy defined by variable input";
    constant Boolean variable_xi = false "True, if composition defined by variable input";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure p_const = 200000.0 "Constant pressure";
    constant importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h_const = 100000.0 "Constant specific enthalpy of source";
    constant importedFMUTypes.ClaRa_Basics_Units_Pressure Delta_p = 0 "Flange pressure drop at nominal mass flow (zero refers to ideal boundary)";
    constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 1 "Nominal flange mass flow ";
  protected
    record steam_a_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      constant Modelica.Units.SI.AbsolutePressure p = 200000.0 "Thermodynamic pressure in the connection point";
      constant Modelica.Units.SI.SpecificEnthalpy h_outflow = 100000.0 "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end steam_a_rec;
  public
    steam_a_rec steam_a;
  protected
    record eye_rec
      constant Real p = 2.0 "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      constant Real p = 2.0 "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerAux = 0;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_aux = 0.0;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  end boundaryVLE_phxi_rec;
public
  boundaryVLE_phxi_rec boundaryVLE_phxi;
protected
  record PID_preheaterLP4_rec
    Real controlError "Control error (set point - measurement)";
    constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI "Type of controller";
    constant Real 'sign' = -1 "set to 1 if a positive control error leads to a positive control output, else -1";
    constant Boolean perUnitConversion = true "True, if input and output values should be normalised with respect to reference values";
    constant Real u_ref = 0.1 "Reference value for controlled variable";
    constant Real y_ref = 1 "Reference value for actuated variable";
    constant Real y_max = 1 "Upper limit of output";
    constant Real y_min = 0 "Lower limit of output";
    constant Real k = 0.2 "Gain of Proportional block";
    constant Modelica.Units.SI.Time Tau_i(min = 1E-60) = 15 "1/Ti is gain of integrator block";
    constant Modelica.Units.SI.Time Tau_d(min = 0.0) = 0.1 "Gain of derivative block";
    constant Modelica.Units.SI.Time Ni(min = 1E-13) = 0.9 "1/Ni is gain of anti-windup compensation";
    constant Real Nd = 1 "The smaller Nd, the more ideal the derivative block, setting Nd=0 introduces ideal derivative";
    constant Boolean use_activateInput = false "Provide Boolean input to switch controller on/off.";
    constant importedFMUTypes.ClaRa_Basics_Units_Time t_activation = 5 "Time when controller is switched on. For use_activateInput==true the controller is switched on if (time>t_activation AND activateController=true).";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_lag_I = 0.0 "Time lag for activation of integral part AFTER controller is being switched on ";
    constant Real y_inactive = 1 "Controller output if controller is not active";
    constant Real Tau_in(min = 0.0) = 0.8 "Time constant for input smoothening, Tau_in=0 refers to signal no smoothening";
    constant Real Tau_out(min = 0.0) = 0.8 "time constant for output smoothening, Tau_out=0 refers to signal no smoothening";
    constant Integer initOption = 796 "Initialisation option";
    constant Boolean limitsAtInit = true "= false, if limits are ignored during initializiation";
    constant Real xi_start = 0 "Initial or guess value value for integrator output (= integrator state)";
    constant Real y_start = 1 "Initial value of output";
    constant Real Tau_add(min = 0.0) = 0 "Set to >0 for additional state after add block in controller, if DAE-index reduction fails.";
    constant Real xd_start = 0 "Initial or guess value for state of derivative block";
    parameter Real _resetValueP_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueP(start = _resetValueP_start) "Input to P part before controller activation";
    parameter Real _resetValueID_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueID(start = _resetValueID_start) "Output of controller before activation";
    Real resetValueI;
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_s = 0.1 "Connector of setpoint input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_m "Connector of measurement input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of actuator output signal";
  protected
    record P_rec
      constant Real k = 0.2 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end P_rec;
  public
    P_rec P;
  protected
    record I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Boolean variable_Tau_i = false "True, if integrator time is set by variable input";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_i_const = 15.0 "Constant integrator time";
      constant Integer initOption = 504 "Initialisation option";
      constant Boolean y_startInputIsActive = true "True, if integrator initial output shall be set by variable input";
      constant Real y_start_const = 0 "Initial or guess value of output (= state)";
      constant importedFMUTypes.ClaRa_Basics_Units_Time startTime = 0 "Start time for integration";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput y_start = 1.0;
    end I_rec;
  public
    I_rec I;
  protected
    record addPID_rec
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
      constant Real k3 = 1 "Gain of input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end addPID_rec;
  public
    addPID_rec addPID;
  protected
    record addI_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end addI_rec;
  public
    addI_rec addI;
  protected
    record gainTrack_rec
      constant Real k = 1.1111111111111112 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end gainTrack_rec;
  public
    gainTrack_rec gainTrack;
  protected
    record limiter_rec
      constant Real uMax = 1.0 "Upper limits of input signals";
      constant Real uMin = 0.0 "Lower limits of input signals";
      constant Boolean strict = false "= true, if strict limits with noEvent(..)";
      constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end limiter_rec;
  public
    limiter_rec limiter;
  protected
    record Dzero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end Dzero_rec;
  public
    Dzero_rec Dzero;
  protected
    record toPU_rec
      constant Real k = -10.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end toPU_rec;
  public
    toPU_rec toPU;
  protected
    record feedback_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 = 0.1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end feedback_rec;
  public
    feedback_rec feedback;
  protected
    record fromPU_rec
      constant Real k = 1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end fromPU_rec;
  public
    fromPU_rec fromPU;
  protected
    record switch_OnOff_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_I_rec;
  public
    switch_OnOff_I_rec switch_OnOff_I;
  protected
    record I_off_zero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end I_off_zero_rec;
  public
    I_off_zero_rec I_off_zero;
  protected
    record switch_OnOff_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 1.0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_rec;
  public
    switch_OnOff_rec switch_OnOff;
  protected
    record y_unlocked_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
    end y_unlocked_rec;
  public
    y_unlocked_rec y_unlocked;
  protected
    record smoothPIDInput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.8 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 1 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDInput_rec;
  public
    smoothPIDInput_rec smoothPIDInput;
  protected
    record smoothPIDOutput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.8 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 1 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput_rec;
  public
    smoothPIDOutput_rec smoothPIDOutput;
  protected
    record addSat_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end addSat_rec;
  public
    addSat_rec addSat;
  protected
    record smoothPIDOutput1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput1_rec;
  public
    smoothPIDOutput1_rec smoothPIDOutput1;
  protected
    record y_start_I_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
    end y_start_I_rec;
  public
    y_start_I_rec y_start_I;
  protected
    record resetP_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end resetP_rec;
  public
    resetP_rec resetP;
  protected
    record y_unlocked1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked1_rec;
  public
    y_unlocked1_rec y_unlocked1;
  protected
    record resetPD_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end resetPD_rec;
  public
    resetPD_rec resetPD;
  protected
    record y_unlocked2_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked2_rec;
  public
    y_unlocked2_rec y_unlocked2;
  protected
    record activate__rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Value of Boolean output";
    end activate__rec;
  public
    activate__rec activate_;
  protected
    record time_lag_I_activation_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end time_lag_I_activation_rec;
  public
    time_lag_I_activation_rec time_lag_I_activation;
  protected
    record booleanPassThrough_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end booleanPassThrough_rec;
  public
    booleanPassThrough_rec booleanPassThrough;
  protected
    record I_activation_rec
      constant Real threshold = 0.0 "Comparison with respect to threshold";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end I_activation_rec;
  public
    I_activation_rec I_activation;
  end PID_preheaterLP4_rec;
public
  PID_preheaterLP4_rec PID_preheaterLP4 annotation(Dialog);
protected
  record setPoint_preheaterLP4_rec
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.1 "Value of Real output";
  end setPoint_preheaterLP4_rec;
public
  setPoint_preheaterLP4_rec setPoint_preheaterLP4;
protected
  record PID_preheaterLP3_rec
    Real controlError "Control error (set point - measurement)";
    constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI "Type of controller";
    constant Real 'sign' = -1 "set to 1 if a positive control error leads to a positive control output, else -1";
    constant Boolean perUnitConversion = true "True, if input and output values should be normalised with respect to reference values";
    constant Real u_ref = 0.2 "Reference value for controlled variable";
    constant Real y_ref = 150000 "Reference value for actuated variable";
    constant Real y_max = 10000000.0 "Upper limit of output";
    constant Real y_min = 2000 "Lower limit of output";
    constant Real k = 1 "Gain of Proportional block";
    constant Modelica.Units.SI.Time Tau_i(min = 1E-60) = 30 "1/Ti is gain of integrator block";
    constant Modelica.Units.SI.Time Tau_d(min = 0.0) = 0.1 "Gain of derivative block";
    constant Modelica.Units.SI.Time Ni(min = 1E-13) = 0.9 "1/Ni is gain of anti-windup compensation";
    constant Real Nd = 1 "The smaller Nd, the more ideal the derivative block, setting Nd=0 introduces ideal derivative";
    constant Boolean use_activateInput = false "Provide Boolean input to switch controller on/off.";
    constant importedFMUTypes.ClaRa_Basics_Units_Time t_activation = 2 "Time when controller is switched on. For use_activateInput==true the controller is switched on if (time>t_activation AND activateController=true).";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_lag_I = 0.0 "Time lag for activation of integral part AFTER controller is being switched on ";
    constant Real y_inactive = 150000 "Controller output if controller is not active";
    constant Real Tau_in(min = 0.0) = 0.8 "Time constant for input smoothening, Tau_in=0 refers to signal no smoothening";
    constant Real Tau_out(min = 0.0) = 0.8 "time constant for output smoothening, Tau_out=0 refers to signal no smoothening";
    constant Integer initOption = 796 "Initialisation option";
    constant Boolean limitsAtInit = true "= false, if limits are ignored during initializiation";
    constant Real xi_start = 0 "Initial or guess value value for integrator output (= integrator state)";
    Real y_start "Initial value of output";
    constant Real Tau_add(min = 0.0) = 0 "Set to >0 for additional state after add block in controller, if DAE-index reduction fails.";
    constant Real xd_start = 0 "Initial or guess value for state of derivative block";
    parameter Real _resetValueP_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueP(start = _resetValueP_start) "Input to P part before controller activation";
    parameter Real _resetValueID_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueID(start = _resetValueID_start) "Output of controller before activation";
    Real resetValueI;
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_s = 0.1 "Connector of setpoint input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_m "Connector of measurement input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of actuator output signal";
  protected
    record P_rec
      constant Real k = 1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end P_rec;
  public
    P_rec P;
  protected
    record I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Boolean variable_Tau_i = false "True, if integrator time is set by variable input";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_i_const = 30.0 "Constant integrator time";
      constant Integer initOption = 504 "Initialisation option";
      constant Boolean y_startInputIsActive = true "True, if integrator initial output shall be set by variable input";
      constant Real y_start_const = 0 "Initial or guess value of output (= state)";
      constant importedFMUTypes.ClaRa_Basics_Units_Time startTime = 0 "Start time for integration";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput y_start;
    end I_rec;
  public
    I_rec I;
  protected
    record addPID_rec
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
      constant Real k3 = 1 "Gain of input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end addPID_rec;
  public
    addPID_rec addPID;
  protected
    record addI_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end addI_rec;
  public
    addI_rec addI;
  protected
    record gainTrack_rec
      constant Real k = 1.1111111111111112 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end gainTrack_rec;
  public
    gainTrack_rec gainTrack;
  protected
    record limiter_rec
      constant Real uMax = 66.66666666666667 "Upper limits of input signals";
      constant Real uMin = 0.013333333333333334 "Lower limits of input signals";
      constant Boolean strict = false "= true, if strict limits with noEvent(..)";
      constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end limiter_rec;
  public
    limiter_rec limiter;
  protected
    record Dzero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end Dzero_rec;
  public
    Dzero_rec Dzero;
  protected
    record toPU_rec
      constant Real k = -5.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end toPU_rec;
  public
    toPU_rec toPU;
  protected
    record feedback_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 = 0.1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end feedback_rec;
  public
    feedback_rec feedback;
  protected
    record fromPU_rec
      constant Real k = 150000.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end fromPU_rec;
  public
    fromPU_rec fromPU;
  protected
    record switch_OnOff_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_I_rec;
  public
    switch_OnOff_I_rec switch_OnOff_I;
  protected
    record I_off_zero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end I_off_zero_rec;
  public
    I_off_zero_rec I_off_zero;
  protected
    record switch_OnOff_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 1.0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_rec;
  public
    switch_OnOff_rec switch_OnOff;
  protected
    record y_unlocked_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
    end y_unlocked_rec;
  public
    y_unlocked_rec y_unlocked;
  protected
    record smoothPIDInput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.8 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 1 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDInput_rec;
  public
    smoothPIDInput_rec smoothPIDInput;
  protected
    record smoothPIDOutput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.8 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 1 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux(nominal = 100000.0);
    end smoothPIDOutput_rec;
  public
    smoothPIDOutput_rec smoothPIDOutput;
  protected
    record addSat_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end addSat_rec;
  public
    addSat_rec addSat;
  protected
    record smoothPIDOutput1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput1_rec;
  public
    smoothPIDOutput1_rec smoothPIDOutput1;
  protected
    record y_start_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_start_I_rec;
  public
    y_start_I_rec y_start_I;
  protected
    record resetP_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end resetP_rec;
  public
    resetP_rec resetP;
  protected
    record y_unlocked1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked1_rec;
  public
    y_unlocked1_rec y_unlocked1;
  protected
    record resetPD_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end resetPD_rec;
  public
    resetPD_rec resetPD;
  protected
    record y_unlocked2_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked2_rec;
  public
    y_unlocked2_rec y_unlocked2;
  protected
    record activate__rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Value of Boolean output";
    end activate__rec;
  public
    activate__rec activate_;
  protected
    record time_lag_I_activation_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end time_lag_I_activation_rec;
  public
    time_lag_I_activation_rec time_lag_I_activation;
  protected
    record booleanPassThrough_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end booleanPassThrough_rec;
  public
    booleanPassThrough_rec booleanPassThrough;
  protected
    record I_activation_rec
      constant Real threshold = 0.0 "Comparison with respect to threshold";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end I_activation_rec;
  public
    I_activation_rec I_activation;
  end PID_preheaterLP3_rec;
public
  PID_preheaterLP3_rec PID_preheaterLP3 annotation(Dialog);
protected
  record setPoint_preheaterLP3_rec
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.1 "Value of Real output";
  end setPoint_preheaterLP3_rec;
public
  setPoint_preheaterLP3_rec setPoint_preheaterLP3;
protected
  record PID_NDVW3_rec
    Real controlError "Control error (set point - measurement)";
    constant Modelica.Blocks.Types.SimpleController controllerType = Modelica.Blocks.Types.SimpleController.PI "Type of controller";
    constant Real 'sign' = -1 "set to 1 if a positive control error leads to a positive control output, else -1";
    constant Boolean perUnitConversion = true "True, if input and output values should be normalised with respect to reference values";
    constant Real u_ref = 0.1 "Reference value for controlled variable";
    constant Real y_ref = 1 "Reference value for actuated variable";
    constant Real y_max = 1 "Upper limit of output";
    constant Real y_min = 0 "Lower limit of output";
    constant Real k = 0.5 "Gain of Proportional block";
    constant Modelica.Units.SI.Time Tau_i(min = 1E-60) = 20 "1/Ti is gain of integrator block";
    constant Modelica.Units.SI.Time Tau_d(min = 0.0) = 0.1 "Gain of derivative block";
    constant Modelica.Units.SI.Time Ni(min = 1E-13) = 0.9 "1/Ni is gain of anti-windup compensation";
    constant Real Nd = 1 "The smaller Nd, the more ideal the derivative block, setting Nd=0 introduces ideal derivative";
    constant Boolean use_activateInput = false "Provide Boolean input to switch controller on/off.";
    constant importedFMUTypes.ClaRa_Basics_Units_Time t_activation = 0.0 "Time when controller is switched on. For use_activateInput==true the controller is switched on if (time>t_activation AND activateController=true).";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_lag_I = 0.0 "Time lag for activation of integral part AFTER controller is being switched on ";
    constant Real y_inactive = 1 "Controller output if controller is not active";
    constant Real Tau_in(min = 0.0) = 0.8 "Time constant for input smoothening, Tau_in=0 refers to signal no smoothening";
    constant Real Tau_out(min = 0.0) = 0.8 "time constant for output smoothening, Tau_out=0 refers to signal no smoothening";
    constant Integer initOption = 796 "Initialisation option";
    constant Boolean limitsAtInit = true "= false, if limits are ignored during initializiation";
    constant Real xi_start = 0 "Initial or guess value value for integrator output (= integrator state)";
    constant Real y_start = 1 "Initial value of output";
    constant Real Tau_add(min = 0.0) = 0 "Set to >0 for additional state after add block in controller, if DAE-index reduction fails.";
    constant Real xd_start = 0 "Initial or guess value for state of derivative block";
    parameter Real _resetValueP_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueP(start = _resetValueP_start) "Input to P part before controller activation";
    parameter Real _resetValueID_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Real resetValueID(start = _resetValueID_start) "Output of controller before activation";
    Real resetValueI;
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_s = 0.1 "Connector of setpoint input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_m "Connector of measurement input signal";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of actuator output signal";
  protected
    record P_rec
      constant Real k = 0.5 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end P_rec;
  public
    P_rec P;
  protected
    record I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Boolean variable_Tau_i = false "True, if integrator time is set by variable input";
      constant importedFMUTypes.ClaRa_Basics_Units_Time Tau_i_const = 20.0 "Constant integrator time";
      constant Integer initOption = 504 "Initialisation option";
      constant Boolean y_startInputIsActive = true "True, if integrator initial output shall be set by variable input";
      constant Real y_start_const = 0 "Initial or guess value of output (= state)";
      constant importedFMUTypes.ClaRa_Basics_Units_Time startTime = 0 "Start time for integration";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput y_start = 1.0;
    end I_rec;
  public
    I_rec I;
  protected
    record addPID_rec
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
      constant Real k3 = 1 "Gain of input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end addPID_rec;
  public
    addPID_rec addPID;
  protected
    record addI_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end addI_rec;
  public
    addI_rec addI;
  protected
    record gainTrack_rec
      constant Real k = 1.1111111111111112 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end gainTrack_rec;
  public
    gainTrack_rec gainTrack;
  protected
    record limiter_rec
      constant Real uMax = 1.0 "Upper limits of input signals";
      constant Real uMin = 0.0 "Lower limits of input signals";
      constant Boolean strict = false "= true, if strict limits with noEvent(..)";
      constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end limiter_rec;
  public
    limiter_rec limiter;
  protected
    record Dzero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end Dzero_rec;
  public
    Dzero_rec Dzero;
  protected
    record toPU_rec
      constant Real k = -10.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end toPU_rec;
  public
    toPU_rec toPU;
  protected
    record feedback_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 = 0.1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end feedback_rec;
  public
    feedback_rec feedback;
  protected
    record fromPU_rec
      constant Real k = 1.0 "Gain value multiplied with input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
    end fromPU_rec;
  public
    fromPU_rec fromPU;
  protected
    record switch_OnOff_I_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_I_rec;
  public
    switch_OnOff_I_rec switch_OnOff_I;
  protected
    record I_off_zero_rec
      constant Real k = 0 "Constant output value";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
    end I_off_zero_rec;
  public
    I_off_zero_rec I_off_zero;
  protected
    record switch_OnOff_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of first Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u2 "Connector of Boolean input signal";
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u3 = 1.0 "Connector of second Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end switch_OnOff_rec;
  public
    switch_OnOff_rec switch_OnOff;
  protected
    record y_unlocked_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
    end y_unlocked_rec;
  public
    y_unlocked_rec y_unlocked;
  protected
    record smoothPIDInput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.8 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 1 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDInput_rec;
  public
    smoothPIDInput_rec smoothPIDInput;
  protected
    record smoothPIDOutput_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.8 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 1 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput_rec;
  public
    smoothPIDOutput_rec smoothPIDOutput;
  protected
    record addSat_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end addSat_rec;
  public
    addSat_rec addSat;
  protected
    record smoothPIDOutput1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Modelica.Units.SI.Time Tau = 0.0 "Time Constant, set Tau=0 for no signal smoothing";
      constant Integer initOption = 4 "Initialisation option";
      constant Real y_start = 1 "Start value at output";
      Real y_aux;
    end smoothPIDOutput1_rec;
  public
    smoothPIDOutput1_rec smoothPIDOutput1;
  protected
    record y_start_I_rec
      constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
    end y_start_I_rec;
  public
    y_start_I_rec y_start_I;
  protected
    record resetP_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Commanded input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Feedback input";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y;
    end resetP_rec;
  public
    resetP_rec resetP;
  protected
    record y_unlocked1_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked1_rec;
  public
    y_unlocked1_rec y_unlocked1;
  protected
    record resetPD_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      constant Real k1 = 1 "Gain of input signal 1";
      constant Real k2 = 1 "Gain of input signal 2";
    end resetPD_rec;
  public
    resetPD_rec resetPD;
  protected
    record y_unlocked2_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end y_unlocked2_rec;
  public
    y_unlocked2_rec y_unlocked2;
  protected
    record activate__rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Value of Boolean output";
    end activate__rec;
  public
    activate__rec activate_;
  protected
    record time_lag_I_activation_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
    end time_lag_I_activation_rec;
  public
    time_lag_I_activation_rec time_lag_I_activation;
  protected
    record booleanPassThrough_rec
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanInput u "Connector of Boolean input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end booleanPassThrough_rec;
  public
    booleanPassThrough_rec booleanPassThrough;
  protected
    record I_activation_rec
      constant Real threshold = 0.0 "Comparison with respect to threshold";
      importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
      importedFMUTypes.Modelica_Blocks_Interfaces_BooleanOutput y "Connector of Boolean output signal";
    end I_activation_rec;
  public
    I_activation_rec I_activation;
  end PID_NDVW3_rec;
public
  PID_NDVW3_rec PID_NDVW3 annotation(Dialog);
protected
  record setPoint_preheaterLP2_rec
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.1 "Value of Real output";
  end setPoint_preheaterLP2_rec;
public
  setPoint_preheaterLP2_rec setPoint_preheaterLP2;
protected
  record setPoint_preheaterLP1_rec
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.1 "Value of Real output";
  end setPoint_preheaterLP1_rec;
public
  setPoint_preheaterLP1_rec setPoint_preheaterLP1;
protected
  record setPoint_condenser_rec
    constant importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput y = 0.08333333333333333 "Value of Real output";
  end setPoint_condenser_rec;
public
  setPoint_condenser_rec setPoint_condenser;
protected
  record quadruple17_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple17_rec;
public
  quadruple17_rec quadruple17;
protected
  record quadruple18_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple18_rec;
public
  quadruple18_rec quadruple18;
protected
  record inertia_rec
    constant Modelica.Units.SI.Inertia J(min = 0.0) = 2000 "Moment of inertia";
    parameter Modelica.Units.SI.Angle _phi_start = 0
    annotation(Dialog(tab = "Initial", group = "States"));
    Modelica.Units.SI.Angle phi(start = _phi_start) "Absolute rotation angle of component";
    constant Modelica.Units.SI.AngularVelocity w = 314.1592653589793 "Absolute angular velocity of component (= der(phi))";
    constant Real _w_der(unit = "rad/s2") = 0.0 "der(Absolute angular velocity of component (= der(phi)))";
    constant Modelica.Units.SI.AngularAcceleration a = 0.0 "Absolute angular acceleration of component (= der(w))";
  protected
    record flange_a_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end flange_a_rec;
  public
    flange_a_rec flange_a;
  protected
    record flange_b_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end flange_b_rec;
  public
    flange_b_rec flange_b;
  end inertia_rec;
public
  inertia_rec inertia annotation(Dialog);
protected
  record simpleGenerator_rec
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    constant Real eta(min = 0.0) = 0.98 "Conversion efficiency (electrical + mechanical losses)";
    constant Integer N_pole_pairs(min = 1) = 1 "Number of electrical pole pairs";
    constant Boolean hasInertia = true "Model accounts for rotational inertia";
    constant importedFMUTypes.ClaRa_Basics_Units_MomentOfInertia J = 1500 "Moment of inertia";
    constant importedFMUTypes.ClaRa_Basics_Units_Frequency f_start = 50 "Initial grid frequency";
  protected
    record powerConnection_rec
      importedFMUTypes.ClaRa_Basics_Units_Power P "Active power";
      constant importedFMUTypes.ClaRa_Basics_Units_Frequency f = 50.0 "Frequency";
    end powerConnection_rec;
  public
    powerConnection_rec powerConnection;
  protected
    record shaft_rec
      Modelica.Units.SI.Angle phi "Absolute rotation angle of flange";
      constant Real _phi_der(unit = "rad/s") = 314.1592653589793 "der(Absolute rotation angle of flange)";
      Modelica.Units.SI.Torque tau "Cut torque in the flange";
    end shaft_rec;
  public
    shaft_rec shaft;
  protected
    record summary_rec
      importedFMUTypes.ClaRa_Basics_Units_Power P_shaft "Shaft power";
      importedFMUTypes.ClaRa_Basics_Units_Power P_el "Electrical power";
      importedFMUTypes.ClaRa_Basics_Units_RPM rpm "Rotational speed of shaft";
      constant importedFMUTypes.ClaRa_Basics_Units_Frequency f = 50.0 "Electrical frequency";
    end summary_rec;
  public
    summary_rec summary;
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerAux = 0;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_aux = 0.0;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  end simpleGenerator_rec;
public
  simpleGenerator_rec simpleGenerator;
protected
  record boundaryElectricFrequency_rec
    constant Boolean variable_f = false "True, if frequency defined by variable input";
    constant importedFMUTypes.ClaRa_Basics_Units_Frequency f_const = 50 "Constant frequency";
  protected
    record electricPortIn_rec
      importedFMUTypes.ClaRa_Basics_Units_Power P "Active power";
      constant importedFMUTypes.ClaRa_Basics_Units_Frequency f = 50.0 "Frequency";
    end electricPortIn_rec;
  public
    electricPortIn_rec electricPortIn;
  end boundaryElectricFrequency_rec;
public
  boundaryElectricFrequency_rec boundaryElectricFrequency;
protected
  record quadruple19_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple19_rec;
public
  quadruple19_rec quadruple19;
protected
  record quadruple20_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple20_rec;
public
  quadruple20_rec quadruple20;
protected
  record quadruple21_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple21_rec;
public
  quadruple21_rec quadruple21;
protected
  record fillingLevel_preheater_LP1_rec
    constant Real u_max = 1 "Upper boundary for visualised variable";
    constant Real u_min = 0 "Lower boundary for visualised variable";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean provideInputConnectors = true "If true connectors for the inputs are provided";
    constant Boolean provideLimitsConnectors = false "If true connectors for the limits and set values are provided";
    constant Boolean provideOutputConnector = false "If true an output connector y is provided";
    constant Real u = 0 "Variable to be visualised";
    constant Real u_set = 0.1 "Set Value of filling level";
    constant Real u_high = 0.2 "High input threshold";
    constant Real u_low = 0.05 "Low input threshold";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_in;
    Real u_int;
    constant Real u_set_int = 0.1;
    constant Real u_low_int = 0.05;
    constant Real u_high_int = 0.2;
  end fillingLevel_preheater_LP1_rec;
public
  fillingLevel_preheater_LP1_rec fillingLevel_preheater_LP1;
protected
  record fillingLevel_preheater_LP2_rec
    constant Real u_max = 1 "Upper boundary for visualised variable";
    constant Real u_min = 0 "Lower boundary for visualised variable";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean provideInputConnectors = true "If true connectors for the inputs are provided";
    constant Boolean provideLimitsConnectors = false "If true connectors for the limits and set values are provided";
    constant Boolean provideOutputConnector = false "If true an output connector y is provided";
    constant Real u = 0 "Variable to be visualised";
    constant Real u_set = 0.1 "Set Value of filling level";
    constant Real u_high = 0.2 "High input threshold";
    constant Real u_low = 0.05 "Low input threshold";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_in;
    Real u_int;
    constant Real u_set_int = 0.1;
    constant Real u_low_int = 0.05;
    constant Real u_high_int = 0.2;
  end fillingLevel_preheater_LP2_rec;
public
  fillingLevel_preheater_LP2_rec fillingLevel_preheater_LP2;
protected
  record fillingLevel_preheater_LP3_rec
    constant Real u_max = 1 "Upper boundary for visualised variable";
    constant Real u_min = 0 "Lower boundary for visualised variable";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean provideInputConnectors = true "If true connectors for the inputs are provided";
    constant Boolean provideLimitsConnectors = false "If true connectors for the limits and set values are provided";
    constant Boolean provideOutputConnector = false "If true an output connector y is provided";
    constant Real u = 0 "Variable to be visualised";
    constant Real u_set = 0.1 "Set Value of filling level";
    constant Real u_high = 0.2 "High input threshold";
    constant Real u_low = 0.05 "Low input threshold";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_in;
    Real u_int;
    constant Real u_set_int = 0.1;
    constant Real u_low_int = 0.05;
    constant Real u_high_int = 0.2;
  end fillingLevel_preheater_LP3_rec;
public
  fillingLevel_preheater_LP3_rec fillingLevel_preheater_LP3;
protected
  record fillingLevel_preheater_LP4_rec
    constant Real u_max = 1 "Upper boundary for visualised variable";
    constant Real u_min = 0 "Lower boundary for visualised variable";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean provideInputConnectors = true "If true connectors for the inputs are provided";
    constant Boolean provideLimitsConnectors = false "If true connectors for the limits and set values are provided";
    constant Boolean provideOutputConnector = false "If true an output connector y is provided";
    constant Real u = 0 "Variable to be visualised";
    constant Real u_set = 0.1 "Set Value of filling level";
    constant Real u_high = 0.2 "High input threshold";
    constant Real u_low = 0.05 "Low input threshold";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_in;
    Real u_int;
    constant Real u_set_int = 0.1;
    constant Real u_low_int = 0.05;
    constant Real u_high_int = 0.2;
  end fillingLevel_preheater_LP4_rec;
public
  fillingLevel_preheater_LP4_rec fillingLevel_preheater_LP4;
protected
  record fillingLevel_condenser_rec
    constant Real u_max = 1 "Upper boundary for visualised variable";
    constant Real u_min = 0 "Lower boundary for visualised variable";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean provideInputConnectors = true "If true connectors for the inputs are provided";
    constant Boolean provideLimitsConnectors = false "If true connectors for the limits and set values are provided";
    constant Boolean provideOutputConnector = false "If true an output connector y is provided";
    constant Real u = 0 "Variable to be visualised";
    constant Real u_set = 0.08333333333333333 "Set Value of filling level";
    constant Real u_high = 0.16666666666666666 "High input threshold";
    constant Real u_low = 0.041666666666666664 "Low input threshold";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_in;
    Real u_int;
    constant Real u_set_int = 0.08333333333333333;
    constant Real u_low_int = 0.041666666666666664;
    constant Real u_high_int = 0.16666666666666666;
  end fillingLevel_condenser_rec;
public
  fillingLevel_condenser_rec fillingLevel_condenser;
protected
  record fillingLevel_preheater_HP_rec
    constant Real u_max = 1 "Upper boundary for visualised variable";
    constant Real u_min = 0 "Lower boundary for visualised variable";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean provideInputConnectors = true "If true connectors for the inputs are provided";
    constant Boolean provideLimitsConnectors = false "If true connectors for the limits and set values are provided";
    constant Boolean provideOutputConnector = false "If true an output connector y is provided";
    constant Real u = 0 "Variable to be visualised";
    constant Real u_set = 0.5 "Set Value of filling level";
    constant Real u_high = 0.6 "High input threshold";
    constant Real u_low = 0.4 "Low input threshold";
    importedFMUTypes.Modelica_Blocks_Interfaces_RealInput u_in;
    Real u_int;
    constant Real u_set_int = 0.5;
    constant Real u_low_int = 0.4;
    constant Real u_high_int = 0.6;
  end fillingLevel_preheater_HP_rec;
public
  fillingLevel_preheater_HP_rec fillingLevel_preheater_HP;
protected
  record valveControl_preheater_LP4_display_rec
    constant Boolean provideConnector = false "If true a real output connector is provided";
    Real x1 "Variable value";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real u_aux;
  end valveControl_preheater_LP4_display_rec;
public
  valveControl_preheater_LP4_display_rec valveControl_preheater_LP4_display;
protected
  record valveControl_preheater_LP2_display2_rec
    constant Boolean provideConnector = false "If true a real output connector is provided";
    Real x1 "Variable value";
    constant Integer decimalSpaces = 1 "Accuracy to be displayed";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real u_aux;
  end valveControl_preheater_LP2_display2_rec;
public
  valveControl_preheater_LP2_display2_rec valveControl_preheater_LP2_display2;
protected
  record quadruple22_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple22_rec;
public
  quadruple22_rec quadruple22;
protected
  record quadruple23_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple23_rec;
public
  quadruple23_rec quadruple23;
protected
  record quadruple24_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple24_rec;
public
  quadruple24_rec quadruple24;
protected
  record downComer_feedWaterTank_rec
    constant Boolean frictionAtInlet = true "True if pressure loss between first cell and inlet shall be considered";
    constant Boolean frictionAtOutlet = false "True if pressure loss between last cell and outlet shall be considered";
    importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow w.r.t. all parallel tubes";
    constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 10000.0 "Nominal pressure loss w.r.t. all parallel tubes";
    constant Integer initOption = 0 "Type of initialisation";
    constant Boolean useHomotopy = true "true, if homotopy method is used during initialisation";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p_nom[1]' "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p_nom[2]' "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p_nom[3]' "Nominal pressure";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_nom[1]' "Nominal specific enthalpy for single tube";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_nom[2]' "Nominal specific enthalpy for single tube";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_nom[3]' "Nominal specific enthalpy for single tube";
    importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho_nom[1]' "Nominal density";
    importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho_nom[2]' "Nominal density";
    importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho_nom[3]' "Nominal density";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_start[1]' "Initial specific enthalpy for single tube";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_start[2]' "Initial specific enthalpy for single tube";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_start[3]' "Initial specific enthalpy for single tube";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p_start[1]' "Initial pressure";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p_start[2]' "Initial pressure";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p_start[3]' "Initial pressure";
    constant Boolean showExpertSummary = true "True, if an extended summary shall be shown, else false";
    constant Boolean showData = false "True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "Cell enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "Cell enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[3]' "Cell enthalpy";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "Cell pressure";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "Cell pressure";
    importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[3]' "Cell pressure";
    constant importedFMUTypes.ClaRa_Basics_Units_Length length = 8.0 "Length of the pipe (one pass)";
    constant importedFMUTypes.ClaRa_Basics_Units_Length diameter_i = 0.2 "Inner diameter of the pipe";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_in = 0.0 "Height of inlet above ground";
    constant importedFMUTypes.ClaRa_Basics_Units_Length z_out = -8.0 "Height of outlet above ground";
    constant Integer N_tubes = 1 "Number Of parallel pipes";
    constant Integer N_passes = 1 "Number of passes of the tubes";
    constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
    constant Integer N_cv(min = 3) = 3 "Number of finite volumes";
    constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 2.6666666666666665 "Discretisation scheme";
    constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 2.6666666666666665 "Discretisation scheme";
    constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[3]' = 2.6666666666666665 "Discretisation scheme";
    constant Boolean contributeToCycleSummary = true "True if component shall contribute to automatic efficiency calculation";
    constant Boolean heatFlowIsLoss = true "True if negative heat flow is a loss (not a process product)";
  protected
    record geo_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[1]'(min = 1E-15) = 0.08377580409572784 "Volume of the control volume";
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[2]'(min = 1E-15) = 0.08377580409572784 "Volume of the control volume";
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume[3]'(min = 1E-15) = 0.08377580409572784 "Volume of the control volume";
      constant Integer N_heat = 1 "No. of heat transfer areas";
      constant Real 'CF_geo[1]'(min = 1E-15) = 1 "Correction factor for heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1,1]'(min = 1E-15) = 1.6755160819145563 "Heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2,1]'(min = 1E-15) = 1.6755160819145563 "Heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3,1]'(min = 1E-15) = 1.6755160819145563 "Heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[1,1]'(min = 1E-15) = 1.6755160819145563 "Corrected heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[2,1]'(min = 1E-15) = 1.6755160819145563 "Corrected heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_CF[3,1]'(min = 1E-15) = 1.6755160819145563 "Corrected heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat_tot[1]' = 5.026548245743669 "Total Heat transfer area: /1/ dedicated to lateral surface";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross[1]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross[2]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross[3]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross_FM[1]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross_FM[2]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross_FM[3]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_cross_FM[4]'(min = 1E-15) = 0.031415926535897934 "Cross section for mass flow";
      constant importedFMUTypes.ClaRa_Basics_Units_Length z_in = 0.0 "Height of inlet ports";
      constant importedFMUTypes.ClaRa_Basics_Units_Length z_out = -8.0 "Height of outlet ports";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'z[1]' = -1.3333333333333333 "Height of center of cells";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'z[2]' = -4.0 "Height of center of cells";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'z[3]' = -6.666666666666666 "Height of center of cells";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_z_in[1]' = 1.3333333333333333 "Length from inlet to center of cells";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_z_in[2]' = 4.0 "Length from inlet to center of cells";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_z_in[3]' = 6.666666666666667 "Length from inlet to center of cells";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'diameter_hyd[1]' = 0.2 "Hydraulic diameter of the component";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'diameter_hyd[2]' = 0.2 "Hydraulic diameter of the component";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'diameter_hyd[3]' = 0.2 "Hydraulic diameter of the component";
      constant Integer N_cv = 3 "Number of control volumes";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[1]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[2]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x[3]' = 2.6666666666666665 "Discretisation scheme";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x_FM[1]' = 1.3333333333333333 "Discretisation scheme (Flow model)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x_FM[2]' = 2.6666666666666665 "Discretisation scheme (Flow model)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x_FM[3]' = 2.6666666666666665 "Discretisation scheme (Flow model)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length 'Delta_x_FM[4]' = 1.3333333333333333 "Discretisation scheme (Flow model)";
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume_FM[1]' = 0.04188790204786392;
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume_FM[2]' = 0.08377580409572784;
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume_FM[3]' = 0.08377580409572784;
      constant importedFMUTypes.ClaRa_Basics_Units_Volume 'volume_FM[4]' = 0.04188790204786392;
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 8.0 "Length of the component (one pass)";
      constant importedFMUTypes.ClaRa_Basics_Units_Length diameter = 0.2 "Diameter of the component";
      constant Integer N_tubes = 1 "Number of tubes in parallel";
      constant Integer N_passes = 1 "Number of passes of the tubes";
      constant Integer orientation = 0 "Main orientation of tube bundle (N_passes>1)";
    end geo_rec;
  public
    geo_rec geo;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        constant importedFMUTypes.ClaRa_Basics_Units_Volume volume_tot = 0.2513274122871835 "Total volume of system";
        constant Integer N_cv = 3 "Number of finite volumes";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference between outlet and inlet";
        importedFMUTypes.ClaRa_Basics_Units_Mass mass_tot "Total fluid mass in system mass";
        importedFMUTypes.ClaRa_Basics_Units_Enthalpy H_tot "Total system enthalpy";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate Q_flow_tot = 0.0 "Heat flow through entire pipe wall";
        importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "Fluid mass in cells";
        importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "Fluid mass in cells";
        importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[3]' "Fluid mass in cells";
        importedFMUTypes.ClaRa_Basics_Units_Momentum 'I[1]' "Momentum of fluid flow volumes through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Momentum 'I[2]' "Momentum of fluid flow volumes through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Momentum 'I[3]' "Momentum of fluid flow volumes through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Momentum 'I[4]' "Momentum of fluid flow volumes through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Force 'I_flow[1]' "Momentum flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Force 'I_flow[2]' "Momentum flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Force 'I_flow[3]' "Momentum flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Force 'I_flow[4]' "Momentum flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Force 'I_flow[5]' "Momentum flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[1]' "Mass flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[2]' "Mass flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[3]' "Mass flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[4]' "Mass flow through cell borders";
        importedFMUTypes.ClaRa_Basics_Units_Velocity 'w[1]' "Velocity of flow in cells";
        importedFMUTypes.ClaRa_Basics_Units_Velocity 'w[2]' "Velocity of flow in cells";
        importedFMUTypes.ClaRa_Basics_Units_Velocity 'w[3]' "Velocity of flow in cells";
        importedFMUTypes.ClaRa_Basics_Units_Velocity 'w[4]' "Velocity of flow in cells";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    protected
      record fluid_rec
        constant Boolean showExpertSummary = true;
        constant Integer N_cv = 3 "Number of zones or nodes";
        importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[1]' "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[2]' "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Mass 'mass[3]' "System mass";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "System temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[1]' "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[2]' "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_sat[3]' "System saturation temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[1]' "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[2]' "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_Pressure 'p[3]' "System pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[3]' "System specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[1]' "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[2]' "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_bub[3]' "Bubble specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[1]' "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[2]' "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_dew[3]' "Dew specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[1]' "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[2]' "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific 's[3]' "System specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[1]';
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[2]';
        importedFMUTypes.ClaRa_Basics_Units_MassFraction 'steamQuality[3]';
        Modelica.Units.SI.Enthalpy 'H[1]' "System enthalpy";
        Modelica.Units.SI.Enthalpy 'H[2]' "System enthalpy";
        Modelica.Units.SI.Enthalpy 'H[3]' "System enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[1]';
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[2]';
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho[3]';
      end fluid_rec;
    public
      fluid_rec fluid;
    protected
      record wall_rec
        constant Boolean showExpertSummary = true;
        constant Integer N_wall = 3 "Number of wall segments";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[1]' "Temperatures of wall segments";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[2]' "Temperatures of wall segments";
        importedFMUTypes.ClaRa_Basics_Units_Temperature 'T[3]' "Temperatures of wall segments";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[1]' = 0.0 "Heat flows through wall segments";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[2]' = 0.0 "Heat flows through wall segments";
        constant importedFMUTypes.ClaRa_Basics_Units_HeatFlowRate 'Q_flow[3]' = 0.0 "Heat flows through wall segments";
      end wall_rec;
    public
      wall_rec wall;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom "Nominal mass flow rate";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 10000.0 "Nominal pressure loss wrt. all parallel tubes";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[1]' "Pressure difference";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[2]' "Pressure difference";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[3]' "Pressure difference";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference 'Delta_p[4]' = 0.0 "Pressure difference";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[3]';
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[4]';
      constant importedFMUTypes.ClaRa_Basics_Units_Length length = 8.0;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record heatTransfer_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[1]' = 1.6755160819145563 "Area of heat transfer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[2]' = 1.6755160819145563 "Area of heat transfer";
      constant importedFMUTypes.ClaRa_Basics_Units_Area 'A_heat[3]' = 1.6755160819145563 "Area of heat transfer";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[1]' "Mass flow rate";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[2]' "Mass flow rate";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[3]' "Mass flow rate";
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[4]' "Mass flow rate";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_mean[1]';
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_mean[2]';
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'T_mean[3]';
      constant importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer alpha_nom = 10 "Constant heat transfer coefficient";
      constant Real 'PL_alpha[1,1]' = 0.0 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[1,2]' = 0.2 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[2,1]' = 0.5 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[2,2]' = 0.6 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[3,1]' = 0.7 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[3,2]' = 0.72 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[4,1]' = 1 "Correction factor for heat transfer in part load";
      constant Real 'PL_alpha[4,2]' = 1 "Correction factor for heat transfer in part load";
      importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[1]';
      importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[2]';
      importedFMUTypes.ClaRa_Basics_Units_CoefficientOfHeatTransfer 'alpha[3]';
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_wi[1]' "Temperature difference between wall and fluid inlet temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_wi[2]' "Temperature difference between wall and fluid inlet temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_wi[3]' "Temperature difference between wall and fluid inlet temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_wo[1]' "Temperature difference between wall and fluid outlet temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_wo[2]' "Temperature difference between wall and fluid outlet temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_wo[3]' "Temperature difference between wall and fluid outlet temperature";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[1]' "Mean temperature difference used for heat transfer calculation";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[2]' "Mean temperature difference used for heat transfer calculation";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_mean[3]' "Mean temperature difference used for heat transfer calculation";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_u[1]' "Upper temperature difference";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_u[2]' "Upper temperature difference";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_u[3]' "Upper temperature difference";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_l[1]' "Lower temperature difference";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_l[2]' "Lower temperature difference";
      importedFMUTypes.ClaRa_Basics_Units_Temperature 'Delta_T_l[3]' "Lower temperature difference";
    protected
      record 'heat[1]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[1]_rec';
    public
      'heat[1]_rec' 'heat[1]';
    protected
      record 'heat[2]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[2]_rec';
    public
      'heat[2]_rec' 'heat[2]';
    protected
      record 'heat[3]_rec'
        Modelica.Units.SI.Temperature T "Port temperature";
        constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'heat[3]_rec';
    public
      'heat[3]_rec' 'heat[3]';
    end heatTransfer_rec;
  public
    heatTransfer_rec heatTransfer;
  protected
    record mechanicalEquilibrium_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[1]';
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[2]';
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[3]';
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate 'm_flow[4]';
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_start[1]' "Start values for enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_start[2]' "Start values for enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h_start[3]' "Start values for enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho_mix[1]' "Mixture density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho_mix[2]' "Mixture density";
      importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific 'rho_mix[3]' "Mixture density";
      constant Real 'S[1]' = 1.0 "Slip between phases";
      constant Real 'S[2]' = 1.0 "Slip between phases";
      constant Real 'S[3]' = 1.0 "Slip between phases";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[1]' "Slip model enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[2]' "Slip model enthalpy";
      importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific 'h[3]' "Slip model enthalpy";
      constant importedFMUTypes.ClaRa_Basics_Units_Velocity 'w_gu[1]' = 0.0 "Mean drift velocity";
      constant importedFMUTypes.ClaRa_Basics_Units_Velocity 'w_gu[2]' = 0.0 "Mean drift velocity";
      constant importedFMUTypes.ClaRa_Basics_Units_Velocity 'w_gu[3]' = 0.0 "Mean drift velocity";
    end mechanicalEquilibrium_rec;
  public
    mechanicalEquilibrium_rec mechanicalEquilibrium;
  protected
    record 'eye_int[1]_rec'
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  protected
    record 'heat[1]_rec'
      Modelica.Units.SI.Temperature T "Port temperature";
      constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
    end 'heat[1]_rec';
  public
    'heat[1]_rec' 'heat[1]';
  protected
    record 'heat[2]_rec'
      Modelica.Units.SI.Temperature T "Port temperature";
      constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
    end 'heat[2]_rec';
  public
    'heat[2]_rec' 'heat[2]';
  protected
    record 'heat[3]_rec'
      Modelica.Units.SI.Temperature T "Port temperature";
      constant Modelica.Units.SI.HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
    end 'heat[3]_rec';
  public
    'heat[3]_rec' 'heat[3]';
  protected
    record connected2SimCenter_rec
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerIn = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_elMech = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerOut_th = 0;
      constant importedFMUTypes.ClaRa_Basics_Units_Power powerAux = 0;
    protected
      record cycleSumModel_rec
      protected
        record cycleSumPort_rec
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_in = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_elMech = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_out_th = 0.0;
          constant importedFMUTypes.ClaRa_Basics_Units_Power power_aux = 0.0;
        end cycleSumPort_rec;
      public
        cycleSumPort_rec cycleSumPort;
      end cycleSumModel_rec;
    public
      cycleSumModel_rec cycleSumModel;
    end connected2SimCenter_rec;
  public
    connected2SimCenter_rec connected2SimCenter;
  end downComer_feedWaterTank_rec;
public
  downComer_feedWaterTank_rec downComer_feedWaterTank;
protected
  record quadruple25_rec
    constant Integer identifier = 0 "Identifier of the quadruple";
    constant Boolean largeFonts = false "True if visualisers shall be displayed as large as posible";
    Real p "Pressure of state";
    Real h "Specific enthalpy of state";
    Real s "Specific enthalpy of state";
    Real T "Temperature of state";
    Real m_flow "Mass flow rate";
  protected
    record decimalSpaces_rec
      constant Integer T = 1 "Accuracy to be displayed for temperature";
      constant Integer m_flow = 1 "Accuracy to be displayed for mass flow";
      constant Integer h = 1 "Accuracy to be displayed for enthalpy";
      constant Integer p = 1 "Accuracy to be displayed for pressure";
    end decimalSpaces_rec;
  public
    decimalSpaces_rec decimalSpaces;
  protected
    record eye_rec
      Real p "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  end quadruple25_rec;
public
  quadruple25_rec quadruple25;
protected
  record valveControl_preheater_LP1_rec
    constant Boolean useHomotopy = true "True, if homotopy method is used during initialisation";
    constant Boolean checkValve = false "True, if valve is check valve";
    constant Boolean openingInputIsActive = false "True, if  a variable opening is used";
    constant Real opening_const_ = 1 "A constant opening: =1: open, =0: closed";
    constant Boolean showExpertSummary = true "|Summary and Visualisation||True, if expert summary should be applied";
    constant Boolean showData = true "|Summary and Visualisation||True, if a data port containing p,T,h,s,m_flow shall be shown, else false";
    constant Boolean useStabilisedMassFlow = false "|Expert Settings|Numerical Robustness|";
    constant importedFMUTypes.ClaRa_Basics_Units_Time Tau = 0.1 "Time Constant of Stabilisation";
    constant Real opening_leak_ = 0.0 "Leakage valve opening in p.u.";
  protected
    record inlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      Modelica.Units.SI.AbsolutePressure p "Thermodynamic pressure in the connection point";
      constant Modelica.Units.SI.SpecificEnthalpy h_outflow = 100000.0 "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end inlet_rec;
  public
    inlet_rec inlet;
  protected
    record outlet_rec
      Modelica.Units.SI.MassFlowRate m_flow "Mass flow rate from the connection point into the component";
      constant Modelica.Units.SI.AbsolutePressure p = 200000.0 "Thermodynamic pressure in the connection point";
      Modelica.Units.SI.SpecificEnthalpy h_outflow "Specific thermodynamic enthalpy close to the connection point if m_flow < 0";
    end outlet_rec;
  public
    outlet_rec outlet;
  protected
    record pressureLoss_rec
      importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow;
      constant Real flowIsChoked = 0 "1 if flow is choked, 0 if not";
      constant Real PR_choked = -1 "Pressure ratio at which choking occurs";
      constant Real 'CL_valve[1,1]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[1,2]' = 0 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,1]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant Real 'CL_valve[2,2]' = 1 "|Valve Characteristics|Effective apperture as function of valve position in p.u.";
      constant importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p_nom = 1000 "Nominal pressure difference for Kv definition";
      constant importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow_nom = 25000 "Nominal mass flow rate";
      Real aperture_ "Effective apperture";
      importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_in - p_out";
    protected
      record ValveCharacteristics_rec
        constant Integer n = 1 "Number of inputs (= number of outputs)";
        constant importedFMUTypes.Modelica_Blocks_Interfaces_RealInput 'u[1]' = 1.0 "Connector of Real input signals";
        importedFMUTypes.Modelica_Blocks_Interfaces_RealOutput 'y[1]' "Connector of Real output signals";
        constant Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
        constant Real 'table[1,1]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[1,2]' = 0.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,1]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Real 'table[2,2]' = 1.0 "Table matrix (grid = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
        constant Integer 'columns[1]' = 2 "Columns of table to be interpolated";
        constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
        Real u_min "Minimum abscissa value defined in table";
        Real u_max "Maximum abscissa value defined in table";
      end ValveCharacteristics_rec;
    public
      ValveCharacteristics_rec ValveCharacteristics;
    end pressureLoss_rec;
  public
    pressureLoss_rec pressureLoss;
  protected
    record summary_rec
    protected
      record outline_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_VolumeFlowRate V_flow "Volume flow rate";
        importedFMUTypes.ClaRa_Basics_Units_PressureDifference Delta_p "Pressure difference p_out - p_in";
        Real PR "Pressure ratio, always <1, i.e. dependent on flow direction";
        constant Real PR_choked = -1.0 "Critical pressure ratio";
        constant Real opening_ = 1.0 "Valve opening in p.u.";
        constant Real flowIsChoked = 0.0 "1 if flow is choked, 0 if not";
      end outline_rec;
    public
      outline_rec outline;
    protected
      record inlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        importedFMUTypes.ClaRa_Basics_Units_Pressure p "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end inlet_rec;
    public
      inlet_rec inlet;
    protected
      record outlet_rec
        constant Boolean showExpertSummary = true;
        importedFMUTypes.ClaRa_Basics_Units_MassFlowRate m_flow "Mass flow rate";
        importedFMUTypes.ClaRa_Basics_Units_Temperature T "Temperature";
        constant importedFMUTypes.ClaRa_Basics_Units_Pressure p = 200000.0 "Pressure";
        importedFMUTypes.ClaRa_Basics_Units_EnthalpyMassSpecific h "Specific enthalpy";
        importedFMUTypes.ClaRa_Basics_Units_EntropyMassSpecific s "Specific entropy";
        importedFMUTypes.ClaRa_Basics_Units_MassFraction steamQuality "Steam quality";
        importedFMUTypes.ClaRa_Basics_Units_Power H_flow "Enthalpy flow rate";
        importedFMUTypes.ClaRa_Basics_Units_DensityMassSpecific rho "Density";
      end outlet_rec;
    public
      outlet_rec outlet;
    end summary_rec;
  public
    summary_rec summary;
  protected
    record eye_rec
      constant Real p = 2.0 "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end eye_rec;
  public
    eye_rec eye;
  protected
    record 'eye_int[1]_rec'
      constant Real p = 2.0 "Pressure in bar";
      Real h "Specific enthalpy in kJ/kg";
      Real m_flow "Mass flow rate in kg/s";
      importedFMUTypes.ClaRa_Basics_Units_Temperature_DegC T "Tempearture in degC";
      Real s "Specific entropy in kJ/kgK";
    end 'eye_int[1]_rec';
  public
    'eye_int[1]_rec' 'eye_int[1]';
  end valveControl_preheater_LP1_rec;
public
  valveControl_preheater_LP1_rec valveControl_preheater_LP1;
  parameter Real _u_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _u_old;
public
  Modelica.Blocks.Interfaces.RealInput u(start = _u_start)
  annotation (Placement(transformation(extent={{-124,-20},{-84,20}})));
public
  parameter String fmi_instanceName="ClaRaTester_SteamCycle_fmu"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  parameter Boolean fmi_InputTime=false
  "Time point of input used when calling doStep."
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"),choices(choice= false "StepEnd", choice= true "StepStart"));
  parameter Boolean fmi_UsePreOnInputSignals=true
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"));
  parameter Real fmi_StartTime = 0.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_StopTime = 5000.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_NumberOfSteps = 500
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_CommunicationStepSize=(fmi_StopTime-fmi_StartTime)/fmi_NumberOfSteps
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Integer stepSizeScaleFactor = 1 "Number of doSteps called between two CommunicationStepSize"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Boolean fmi_forceShutDownAtStopTime=false
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Boolean fmi_setTol=false "Set the tolerance fmi_rTol in fmi2SetupExperiment, if false fmu defautl tolerence will be used."
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_rTol=1E-05 "Relative tolerance for the internal solver of the fmu"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter String fmi_resourceLocation="file:///"+ModelicaServices.ExternalReferences.loadResource("modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/resources")
  annotation (Dialog(tab="FMI", group="Instantiation"));
protected
  fmi_Functions.fmiModel fmi;
  Boolean fmi_exitInit(start=false,fixed=true);
  Boolean fmi_flip(start=false,fixed=true);
  parameter Real fmi_rdum(start=0,fixed=false);
  parameter Integer fmi_idum(start=0,fixed=false);
  Boolean fmi_StepOK;
  parameter Real zeroOffset = 0;
  parameter Real myTimeStart(fixed=false);
Real RealVariables1[100];
Real RealVariables2[100];
Real RealVariables3[100];
Real RealVariables4[100];
Real RealVariables5[100];
Real RealVariables6[100];
Real RealVariables7[100];
Real RealVariables8[100];
Real RealVariables9[100];
Real RealVariables10[100];
Real RealVariables11[100];
Real RealVariables12[100];
Real RealVariables13[100];
Real RealVariables14[100];
Real RealVariables15[100];
Real RealVariables16[100];
Real RealVariables17[100];
Real RealVariables18[100];
Real RealVariables19[100];
Real RealVariables20[100];
Real RealVariables21[100];
Real RealVariables22[100];
Real RealVariables23[100];
Real RealVariables24[100];
Real RealVariables25[100];
Real RealVariables26[100];
Real RealVariables27[100];
Real RealVariables28[100];
Real RealVariables29[100];
Real RealVariables30[100];
Real RealVariables31[100];
Real RealVariables32[100];
Real RealVariables33[100];
Real RealVariables34[69];
Real RealDependentParameters1[100];
Real RealDependentParameters2[100];
Real RealDependentParameters3[100];
Real RealDependentParameters4[100];
Real RealDependentParameters5[100];
Real RealDependentParameters6[71];
Real RealFixedLocal1[100];
Real RealFixedLocal2[100];
Real RealFixedLocal3[100];
Real RealFixedLocal4[100];
Real RealFixedLocal5[100];
Real RealFixedLocal6[100];
Real RealFixedLocal7[100];
Real RealFixedLocal8[100];
Real RealFixedLocal9[100];
Real RealFixedLocal10[100];
Real RealFixedLocal11[100];
Real RealFixedLocal12[100];
Real RealFixedLocal13[100];
Real RealFixedLocal14[100];
Real RealFixedLocal15[100];
Real RealFixedLocal16[100];
Integer IntegerFixedLocal[43];
Boolean BooleanVariables[12];
Boolean BooleanFixedLocal[3];
  parameter String fmi_xNames[133]= {"steamGenerator.h_IP", "steamGenerator.p_IP", "steamGenerator.h_HP", "steamGenerator.p_HP", "steamGenerator.heatRelease.x_scaled[1]", "steamGenerator.heatRelease.x_scaled[2]", "condenser.tubes.p", "condenser.tubes.h", "condenser.shell.h_liq", "condenser.shell.h_vap", "condenser.shell.volume_vap", "condenser.shell.p_vap", "condenser.wall.U[1]", "condenser.wall.U[2]", "condenser.wall.U[3]", "feedWaterTank.volume.h_liq", "feedWaterTank.volume.h_vap", "feedWaterTank.volume.volume_vap", "feedWaterTank.volume.p_vap", "feedWaterTank.wall.U[1]", "feedWaterTank.wall.U[2]", "feedWaterTank.wall.U[3]", "PI_Pump_cond.resetValueP", "PI_Pump_cond.resetValueID", "PI_Pump_cond.resetValueI", "PI_Pump_cond.I.y", "PI_Pump_cond.smoothPIDInput.y_aux", "PI_Pump_cond.smoothPIDOutput.y_aux", "PI_Pump_cond.smoothPIDOutput1.y_aux", "join_LP1.h", "join_LP1.p", "join_HP.h", "join_HP.p", "preheater_HP.tubes.p", "preheater_HP.tubes.h", "preheater_HP.shell.h_liq", "preheater_HP.shell.h_vap", "preheater_HP.shell.volume_vap", "preheater_HP.shell.p_vap", "preheater_HP.wall.U[1]", "preheater_HP.wall.U[2]", "preheater_HP.wall.U[3]", "preheater_LP1.tubes.p", "preheater_LP1.tubes.h", "preheater_LP1.shell.h_liq", "preheater_LP1.shell.h_vap", "preheater_LP1.shell.volume_vap", "preheater_LP1.shell.p_vap", "preheater_LP1.wall.U[1]", "preheater_LP1.wall.U[2]", "preheater_LP1.wall.U[3]", "PI_valveControl_preheater_HP.resetValueP", "PI_valveControl_preheater_HP.resetValueID", "PI_valveControl_preheater_HP.resetValueI", "PI_valveControl_preheater_HP.I.y", "PI_valveControl_preheater_HP.smoothPIDInput.y_aux", "PI_valveControl_preheater_HP.smoothPIDOutput.y_aux", "PI_valveControl_preheater_HP.smoothPIDOutput1.y_aux", "measurement.y", "join_LP_main.h", "join_LP_main.p", "PI_preheater1.resetValueP", "PI_preheater1.resetValueID", "PI_preheater1.resetValueI", "PI_preheater1.I.y", "PI_preheater1.smoothPIDInput.y_aux", "PI_preheater1.smoothPIDOutput.y_aux", "PI_preheater1.smoothPIDOutput1.y_aux", "split_IP2.h", "split_IP2.p", "join_IP3.h", "join_IP3.p", "join_LP2.h", "join_LP2.p", "split_LP3.h", "split_LP3.p", "preheater_LP2.tubes.p", "preheater_LP2.tubes.h", "preheater_LP2.shell.h_liq", "preheater_LP2.shell.h_vap", "preheater_LP2.shell.volume_vap", "preheater_LP2.shell.p_vap", "preheater_LP2.wall.U[1]", "preheater_LP2.wall.U[2]", "preheater_LP2.wall.U[3]", "preheater_LP3.tubes.p", "preheater_LP3.tubes.h", "preheater_LP3.shell.h_liq", "preheater_LP3.shell.h_vap", "preheater_LP3.shell.volume_vap", "preheater_LP3.shell.p_vap", "preheater_LP3.wall.U[1]", "preheater_LP3.wall.U[2]", "preheater_LP3.wall.U[3]", "preheater_LP4.tubes.p", "preheater_LP4.tubes.h", "preheater_LP4.shell.h_liq", "preheater_LP4.shell.h_vap", "preheater_LP4.shell.volume_vap", "preheater_LP4.shell.p_vap", "preheater_LP4.wall.U[1]", "preheater_LP4.wall.U[2]", "preheater_LP4.wall.U[3]", "join_preheater_LP3.h", "join_preheater_LP3.p", "PID_preheaterLP4.resetValueP", "PID_preheaterLP4.resetValueID", "PID_preheaterLP4.resetValueI", "PID_preheaterLP4.I.y", "PID_preheaterLP4.smoothPIDInput.y_aux", "PID_preheaterLP4.smoothPIDOutput.y_aux", "PID_preheaterLP4.smoothPIDOutput1.y_aux", "PID_preheaterLP3.resetValueP", "PID_preheaterLP3.resetValueID", "PID_preheaterLP3.resetValueI", "PID_preheaterLP3.I.y", "PID_preheaterLP3.smoothPIDInput.y_aux", "PID_preheaterLP3.smoothPIDOutput.y_aux", "PID_preheaterLP3.smoothPIDOutput1.y_aux", "PID_NDVW3.resetValueP", "PID_NDVW3.resetValueID", "PID_NDVW3.resetValueI", "PID_NDVW3.I.y", "PID_NDVW3.smoothPIDInput.y_aux", "PID_NDVW3.smoothPIDOutput.y_aux", "PID_NDVW3.smoothPIDOutput1.y_aux", "inertia.phi", "downComer_feedWaterTank.h[1]", "downComer_feedWaterTank.h[2]", "downComer_feedWaterTank.h[3]", "downComer_feedWaterTank.p[1]", "downComer_feedWaterTank.p[2]", "downComer_feedWaterTank.p[3]"};
  parameter Integer fmi_xVrs[133]= {33554432, 33554433, 33554434, 33554435, 33554436, 33554437, 33554438, 33554439, 33554440, 33554441, 33554442, 33554443, 33554444, 33554445, 33554446, 33554447, 33554448, 33554449, 33554450, 33554451, 33554452, 33554453, 33554454, 33554455, 33554456, 33554457, 33554458, 33554459, 33554460, 33554461, 33554462, 33554463, 33554464, 33554465, 33554466, 33554467, 33554468, 33554469, 33554470, 33554471, 33554472, 33554473, 33554474, 33554475, 33554476, 33554477, 33554478, 33554479, 33554480, 33554481, 33554482, 33554483, 33554484, 33554485, 33554486, 33554487, 33554488, 33554489, 33554490, 33554491, 33554492, 33554493, 33554494, 33554495, 33554496, 33554497, 33554498, 33554499, 33554500, 33554501, 33554502, 33554503, 33554504, 33554505, 33554506, 33554507, 33554508, 33554509, 33554510, 33554511, 33554512, 33554513, 33554514, 33554515, 33554516, 33554517, 33554518, 33554519, 33554520, 33554521, 33554522, 33554523, 33554524, 33554525, 33554526, 33554527, 33554528, 33554529, 33554530, 33554531, 33554532, 33554533, 33554534, 33554535, 33554536, 33554537, 33554538, 33554539, 33554540, 33554541, 33554542, 33554543, 33554544, 33554545, 33554546, 33554547, 33554548, 33554549, 33554550, 33554551, 33554552, 33554553, 33554554, 33554555, 33554556, 33554557, 33554558, 33554559, 33554560, 33554561, 33554562, 33554563, 33554564};
  parameter String fmi_dxNames[133]= {"der(steamGenerator.h_IP)", "der(steamGenerator.p_IP)", "der(steamGenerator.h_HP)", "der(steamGenerator.p_HP)", "der(steamGenerator.heatRelease.x_scaled[1])", "der(steamGenerator.heatRelease.x_scaled[2])", "der(condenser.tubes.p)", "der(condenser.tubes.h)", "der(condenser.shell.h_liq)", "der(condenser.shell.h_vap)", "der(condenser.shell.volume_vap)", "der(condenser.shell.p_vap)", "der(condenser.wall.U[1])", "der(condenser.wall.U[2])", "der(condenser.wall.U[3])", "der(feedWaterTank.volume.h_liq)", "der(feedWaterTank.volume.h_vap)", "der(feedWaterTank.volume.volume_vap)", "der(feedWaterTank.volume.p_vap)", "der(feedWaterTank.wall.U[1])", "der(feedWaterTank.wall.U[2])", "der(feedWaterTank.wall.U[3])", "der(PI_Pump_cond.resetValueP)", "der(PI_Pump_cond.resetValueID)", "der(PI_Pump_cond.resetValueI)", "der(PI_Pump_cond.I.y)", "der(PI_Pump_cond.smoothPIDInput.y_aux)", "der(PI_Pump_cond.smoothPIDOutput.y_aux)", "der(PI_Pump_cond.smoothPIDOutput1.y_aux)", "der(join_LP1.h)", "der(join_LP1.p)", "der(join_HP.h)", "der(join_HP.p)", "der(preheater_HP.tubes.p)", "der(preheater_HP.tubes.h)", "der(preheater_HP.shell.h_liq)", "der(preheater_HP.shell.h_vap)", "der(preheater_HP.shell.volume_vap)", "der(preheater_HP.shell.p_vap)", "der(preheater_HP.wall.U[1])", "der(preheater_HP.wall.U[2])", "der(preheater_HP.wall.U[3])", "der(preheater_LP1.tubes.p)", "der(preheater_LP1.tubes.h)", "der(preheater_LP1.shell.h_liq)", "der(preheater_LP1.shell.h_vap)", "der(preheater_LP1.shell.volume_vap)", "der(preheater_LP1.shell.p_vap)", "der(preheater_LP1.wall.U[1])", "der(preheater_LP1.wall.U[2])", "der(preheater_LP1.wall.U[3])", "der(PI_valveControl_preheater_HP.resetValueP)", "der(PI_valveControl_preheater_HP.resetValueID)", "der(PI_valveControl_preheater_HP.resetValueI)", "der(PI_valveControl_preheater_HP.I.y)", "der(PI_valveControl_preheater_HP.smoothPIDInput.y_aux)", "der(PI_valveControl_preheater_HP.smoothPIDOutput.y_aux)", "der(PI_valveControl_preheater_HP.smoothPIDOutput1.y_aux)", "der(measurement.y)", "der(join_LP_main.h)", "der(join_LP_main.p)", "der(PI_preheater1.resetValueP)", "der(PI_preheater1.resetValueID)", "der(PI_preheater1.resetValueI)", "der(PI_preheater1.I.y)", "der(PI_preheater1.smoothPIDInput.y_aux)", "der(PI_preheater1.smoothPIDOutput.y_aux)", "der(PI_preheater1.smoothPIDOutput1.y_aux)", "der(split_IP2.h)", "der(split_IP2.p)", "der(join_IP3.h)", "der(join_IP3.p)", "der(join_LP2.h)", "der(join_LP2.p)", "der(split_LP3.h)", "der(split_LP3.p)", "der(preheater_LP2.tubes.p)", "der(preheater_LP2.tubes.h)", "der(preheater_LP2.shell.h_liq)", "der(preheater_LP2.shell.h_vap)", "der(preheater_LP2.shell.volume_vap)", "der(preheater_LP2.shell.p_vap)", "der(preheater_LP2.wall.U[1])", "der(preheater_LP2.wall.U[2])", "der(preheater_LP2.wall.U[3])", "der(preheater_LP3.tubes.p)", "der(preheater_LP3.tubes.h)", "der(preheater_LP3.shell.h_liq)", "der(preheater_LP3.shell.h_vap)", "der(preheater_LP3.shell.volume_vap)", "der(preheater_LP3.shell.p_vap)", "der(preheater_LP3.wall.U[1])", "der(preheater_LP3.wall.U[2])", "der(preheater_LP3.wall.U[3])", "der(preheater_LP4.tubes.p)", "der(preheater_LP4.tubes.h)", "der(preheater_LP4.shell.h_liq)", "der(preheater_LP4.shell.h_vap)", "der(preheater_LP4.shell.volume_vap)", "der(preheater_LP4.shell.p_vap)", "der(preheater_LP4.wall.U[1])", "der(preheater_LP4.wall.U[2])", "der(preheater_LP4.wall.U[3])", "der(join_preheater_LP3.h)", "der(join_preheater_LP3.p)", "der(PID_preheaterLP4.resetValueP)", "der(PID_preheaterLP4.resetValueID)", "der(PID_preheaterLP4.resetValueI)", "der(PID_preheaterLP4.I.y)", "der(PID_preheaterLP4.smoothPIDInput.y_aux)", "der(PID_preheaterLP4.smoothPIDOutput.y_aux)", "der(PID_preheaterLP4.smoothPIDOutput1.y_aux)", "der(PID_preheaterLP3.resetValueP)", "der(PID_preheaterLP3.resetValueID)", "der(PID_preheaterLP3.resetValueI)", "der(PID_preheaterLP3.I.y)", "der(PID_preheaterLP3.smoothPIDInput.y_aux)", "der(PID_preheaterLP3.smoothPIDOutput.y_aux)", "der(PID_preheaterLP3.smoothPIDOutput1.y_aux)", "der(PID_NDVW3.resetValueP)", "der(PID_NDVW3.resetValueID)", "der(PID_NDVW3.resetValueI)", "der(PID_NDVW3.I.y)", "der(PID_NDVW3.smoothPIDInput.y_aux)", "der(PID_NDVW3.smoothPIDOutput.y_aux)", "der(PID_NDVW3.smoothPIDOutput1.y_aux)", "der(inertia.phi)", "der(downComer_feedWaterTank.h[1])", "der(downComer_feedWaterTank.h[2])", "der(downComer_feedWaterTank.h[3])", "der(downComer_feedWaterTank.p[1])", "der(downComer_feedWaterTank.p[2])", "der(downComer_feedWaterTank.p[3])"};
  parameter Integer fmi_dxVrs[133]= {587202560, 587202561, 587202562, 587202563, 587202564, 587202565, 587202566, 587202567, 587202568, 587202569, 587202570, 587202571, 587202572, 587202573, 587202574, 587202575, 587202576, 587202577, 587202578, 587202579, 587202580, 587202581, 587202582, 587202583, 587202584, 587202585, 587202586, 587202587, 587202588, 587202589, 587202590, 587202591, 587202592, 587202593, 587202594, 587202595, 587202596, 587202597, 587202598, 587202599, 587202600, 587202601, 587202602, 587202603, 587202604, 587202605, 587202606, 587202607, 587202608, 587202609, 587202610, 587202611, 587202612, 587202613, 587202614, 587202615, 587202616, 587202617, 587202618, 587202619, 587202620, 587202621, 587202622, 587202623, 587202624, 587202625, 587202626, 587202627, 587202628, 587202629, 587202630, 587202631, 587202632, 587202633, 587202634, 587202635, 587202636, 587202637, 587202638, 587202639, 587202640, 587202641, 587202642, 587202643, 587202644, 587202645, 587202646, 587202647, 587202648, 587202649, 587202650, 587202651, 587202652, 587202653, 587202654, 587202655, 587202656, 587202657, 587202658, 587202659, 587202660, 587202661, 587202662, 587202663, 587202664, 587202665, 587202666, 587202667, 587202668, 587202669, 587202670, 587202671, 587202672, 587202673, 587202674, 587202675, 587202676, 587202677, 587202678, 587202679, 587202680, 587202681, 587202682, 587202683, 587202684, 587202685, 587202686, 587202687, 587202688, 587202689, 587202690, 587202691, 587202692};
  parameter String fmi_uNames[1]= {"u"};
  parameter Integer fmi_uVrs[1]= {352321536};
  parameter String fmi_yNames[0]= fill("",0);
  parameter Integer fmi_yVrs[0]= fill(0,0);
package fmi_Functions
    class fmiModel
      extends ExternalObject;
      function constructor "Initialize FMI model"
        extends Modelica.Icons.Function;
        input String instanceName;
        input Boolean loggingOn;
        input String resourceLocation;
        output fmiModel fmi;
        external"C" fmi = ClaRaTester_SteamCycle31074496487706_fmiInstantiateModel2(instanceName, loggingOn, resourceLocation)
        annotation(Include="
#ifndef ClaRaTester_SteamCycle31074496487706_Instantiate_C
#define ClaRaTester_SteamCycle31074496487706_Instantiate_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ClaRaTester_SteamCycle31074496487706Logger(fmi2ComponentEnvironment componentEnvironment, fmi2String instanceName, fmi2Status status,
  fmi2String category, fmi2String message, ...) {
  char msg[4096];
  char buf[4096];
  va_list ap;
  int len;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len < 4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmi2Fatal:
      ModelicaMessage(\"[fmi2Fatal]: \");
      break;
    case fmi2Error:
      ModelicaMessage(\"[fmi2Error]: \");
      break;
    case fmi2Discard:
      ModelicaMessage(\"[fmi2Discard]: \");
      break;
    case fmi2Warning:
      ModelicaMessage(\"[fmi2Warning]: \");
      break;
    case fmi2OK:
      ModelicaMessage(\"[fmi2OK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * ClaRaTester_SteamCycle31074496487706_fmiInstantiateModel2(const char*instanceName, fmi2Boolean loggingOn, fmi2String resourceLocation) {
  static fmi2CallbackFunctions funcs = {&ClaRaTester_SteamCycle31074496487706Logger, &calloc, &free, NULL, NULL};
  struct dy_fmi2Extended* res;
  res = calloc(1, sizeof(struct dy_fmi2Extended));
  if (res!=0) {
#ifdef _WIN32
    if (!(res->hInst=LoadLibraryW(L\"ClaRaTester_SteamCycle.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (ClaRaTester_SteamCycle.dll) failed!\");
#else
    if (!(res->hInst=LoadLibrary(\"ClaRaTester_SteamCycle.so\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (ClaRaTester_SteamCycle.so) failed!\");
#endif
      return 0;
    }
    if (!(res->dyFmiInstantiate=(fmi2InstantiateFunc)GetProcAddress(res->hInst,\"fmi2Instantiate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Instantiate!\");
      return 0;
    }
    if (!(res->dyFmiFreeInstance=(fmi2FreeInstanceFunc)GetProcAddress(res->hInst,\"fmi2FreeInstance\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeInstance!\");
      return 0;
    }
    if (!(res->dyFmiSetupExperiment=(fmi2SetupExperimentFunc)GetProcAddress(res->hInst,\"fmi2SetupExperiment\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetupExperiment!\");
      return 0;
    }
    if (!(res->dyFmiEnterInitializationMode=(fmi2EnterInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2EnterInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2EnterInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiExitInitializationMode=(fmi2ExitInitializationModeFunc)GetProcAddress(res->hInst,\"fmi2ExitInitializationMode\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2ExitInitializationMode!\");
      return 0;
    }
    if (!(res->dyFmiTerminate=(fmi2TerminateFunc)GetProcAddress(res->hInst,\"fmi2Terminate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Terminate!\");
      return 0;
    }
    if (!(res->dyFmiReset=(fmi2ResetFunc)GetProcAddress(res->hInst,\"fmi2Reset\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2Reset!\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmi2SetRealFunc)GetProcAddress(res->hInst,\"fmi2SetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmi2GetRealFunc)GetProcAddress(res->hInst,\"fmi2GetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmi2SetIntegerFunc)GetProcAddress(res->hInst,\"fmi2SetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmi2GetIntegerFunc)GetProcAddress(res->hInst,\"fmi2GetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmi2SetBooleanFunc)GetProcAddress(res->hInst,\"fmi2SetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmi2GetBooleanFunc)GetProcAddress(res->hInst,\"fmi2GetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmi2SetDebugLoggingFunc)GetProcAddress(res->hInst,\"fmi2SetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetDebugLogging!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmi2SetStringFunc)GetProcAddress(res->hInst,\"fmi2SetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmi2GetStringFunc)GetProcAddress(res->hInst,\"fmi2GetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetString!\");
      return 0;
    }
    if(!(res->dyFmiDoStep=(fmi2DoStepFunc)GetProcAddress(res->hInst,\"fmi2DoStep\"))){
      ModelicaError(\"GetProcAddress failed for fmi2DoStep!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiDoStep\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiGetBooleanStatus=(fmi2GetBooleanStatusFunc)GetProcAddress(res->hInst,\"fmi2GetBooleanStatus\"))){
      ModelicaError(\"GetProcAddress failed for fmi2GetBooleanStatus!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiGetBooleanStatus\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiGetRealStatus=(fmi2GetRealStatusFunc)GetProcAddress(res->hInst,\"fmi2GetRealStatus\"))){
      ModelicaError(\"GetProcAddress failed for fmi2GetRealStatus!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiGetRealStatus\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if (!(res->dyFmiGetDirectionalDerivative=(fmi2GetDirectionalDerivativeFunc)GetProcAddress(res->hInst,\"fmi2GetDirectionalDerivative\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetDirectionalDerivative!\");
      return 0;
    }
    if (!(res->dyFmiGetFMUstate=(fmi2GetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2GetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2GetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSetFMUstate=(fmi2SetFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SetFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SetFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiFreeFMUstate=(fmi2FreeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2FreeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2FreeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiSerializedFMUstateSize=(fmi2SerializedFMUstateSizeFunc)GetProcAddress(res->hInst,\"fmi2SerializedFMUstateSize\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializedFMUstateSize!\");
      return 0;
    }
    if (!(res->dyFmiSerializeFMUstate=(fmi2SerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2SerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2SerializeFMUstate!\");
      return 0;
    }
    if (!(res->dyFmiDeSerializeFMUstate=(fmi2DeSerializeFMUstateFunc)GetProcAddress(res->hInst,\"fmi2DeSerializeFMUstate\"))) {
      ModelicaError(\"GetProcAddress failed for fmi2DeSerializeFMUstate!\");
      return 0;
    }
    res->m=res->dyFmiInstantiate(instanceName, fmi2CoSimulation, \"{f3e10dc7-debc-449f-b6cb-4bbbc87be706}\",resourceLocation, &funcs, fmi2False, loggingOn);
    res->der = calloc(133,sizeof(double));
    res->out = calloc(0,sizeof(double));
    if (!res->m || !res->der && 133 || !res->out && 0 ) {free(res);res=0;ModelicaError(\"InstantiateModel failed\");}
    else {
      /*static const char* funcCalls = \"FunctionCalls\";*/
      /*res->dyFmiSetDebugLogging(res->m,fmi2True,1,&funcCalls);*/
      res->dyTriggered=0;
      res->dyTime=res->dyLastTime=-1e37;
      res->discreteInputChanged=1;
      res->currentMode=dyfmi2InstantiationMode;
      res->dyLastStepTime=0;
      res->dyFMUstate=NULL;
    }
  }
  return res;
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
        annotation (__Dymola_doNotLinkSharedObject=true, __Dymola_CriticalRegion="ClaRaTester_SteamCycle");
      end constructor;

      function destructor "Release storage of FMI model"
          extends Modelica.Icons.Function;
          input fmiModel fmi;
          external"C"
                     ClaRaTester_SteamCycle31074496487706_fmiFreeModelInstance2(fmi)
          annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_Free_C
#define ClaRaTester_SteamCycle31074496487706_Free_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ClaRaTester_SteamCycle31074496487706_fmiFreeModelInstance2(void*m) {
  struct dy_fmi2Extended*a=m;
  if (a) {
    if(a->dyFMUstate)
    a->dyFmiFreeFMUstate(a->m, &a->dyFMUstate);
    /*a->dyFmiSetDebugLogging(a->m,fmi2True,0,NULL);*/
    a->dyFmiTerminate(a->m);
    a->dyFmiFreeInstance(a->m);
    FreeLibrary(a->hInst);
    free(a->der);a->der=0;
    free(a->out);a->out=0;
    free(a);
  }
}
#endif",       Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
        annotation(__Dymola_doNotLinkSharedObject=true,__Dymola_CriticalRegion = "ClaRaTester_SteamCycle");
      end destructor;
    end fmiModel;

    function  fmiDoStep
    input fmiModel fmi;
    input Real currentTime;
    input Real stepSize;
    input Real preAvailable;
    output Boolean stepOK;
    output Real postAvailable=preAvailable;
    external"C" stepOK= ClaRaTester_SteamCycle31074496487706_fmiDoStep2(fmi, currentTime, stepSize)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_DoStep_C
#define ClaRaTester_SteamCycle31074496487706_DoStep_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double ClaRaTester_SteamCycle31074496487706_fmiDoStep2(void*m, double currentTime, double stepSize) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  fmi2Boolean value=fmi2False;
  if (a) {
    status=a->dyFmiDoStep(a->m, currentTime, stepSize, fmi2True);
    if(status==fmi2Discard){
      status = a->dyFmiGetBooleanStatus(a->m, fmi2Terminated, &value);
      if(value==fmi2True){
        double tt = 0;
        char s[64] = {0};
        fmi2Status stat2 = fmi2Error;
        stat2 = a->dyFmiGetRealStatus(a->m, fmi2LastSuccessfulTime, &tt);
#if defined(_MSC_VER) && _MSC_VER >= 1200
        if(stat2 == fmi2OK && _snprintf(s, sizeof(s)/sizeof(*s), \"Terminate signaled by the FMU at time %g\", tt) > 0){
#else
        if(stat2 == fmi2OK && snprintf(s, sizeof(s)/sizeof(*s), \"Terminate signaled by the FMU at time %g\", tt) > 0){
#endif
			terminate(s);
        }else{
          terminate(\"Terminate signaled by the FMU\");
        }
      }
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning){    ModelicaFormatError(\"The call of fmi2DoStep(%f, %f) failed in FMU\\r\\nNote: setting fmi_loggingOn in the FMU component may produce more information from the FMU.\",currentTime, stepSize);  }  return 1.0;
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiDoStep;

    function fmiReset
      input fmiModel fmi;
      output Boolean resetOK;
      external"C" resetOK = ClaRaTester_SteamCycle31074496487706_fmiReset2(fmi)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_Reset_C
#define ClaRaTester_SteamCycle31074496487706_Reset_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
double ClaRaTester_SteamCycle31074496487706_fmiReset2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiReset(a->m);
    a->currentMode=dyfmi2InstantiationMode;
    a->cpDer = 1;
    a->cpOut = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiReset failed\");
    return 1.0;
  }
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiReset;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetReal_C
#define ClaRaTester_SteamCycle31074496487706_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetReal;

    function fmiGetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real preAvailable;
      output Real vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetReal_C
#define ClaRaTester_SteamCycle31074496487706_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetReal failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetRealwf;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      external"C"
                 ClaRaTester_SteamCycle31074496487706_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetReal_C
#define ClaRaTester_SteamCycle31074496487706_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
    a->cpDer = 1;
    a->cpOut = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealwf
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      input Real preAvailable;
      output Real postAvailable=preAvailable;
      external"C"
                 ClaRaTester_SteamCycle31074496487706_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetReal_C
#define ClaRaTester_SteamCycle31074496487706_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
    a->cpDer = 1;
    a->cpOut = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetReal failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealwf;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetInteger_C
#define ClaRaTester_SteamCycle31074496487706_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetInteger;

    function fmiGetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Integer vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetInteger_C
#define ClaRaTester_SteamCycle31074496487706_GetInteger_C 1
#include \"FMI/fmi2Import.h\"
#include <stdlib.h>
void ClaRaTester_SteamCycle31074496487706_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetIntegerwf;

    function fmiSetInteger
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetInteger_C
#define ClaRaTester_SteamCycle31074496487706_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetInteger failed in SetInteger\");
      for( i = 0; i < nrefs; ++i){
        if(oldVals[i] != vals[i]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
      a->cpDer = 1;
      a->cpOut = 1;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiSetIntegerwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
      input Integer preAvailable;
      output Integer postAvailable=preAvailable;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSetInteger2wf(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetIntegerwf_C
#define ClaRaTester_SteamCycle31074496487706_SetIntegerwf_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetInteger2wf(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
      a->cpDer = 1;
      a->cpOut = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetIntegerwf;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetBoolean_C
#define ClaRaTester_SteamCycle31074496487706_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetBoolean;

    function fmiGetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Integer preAvailable;
      output Boolean vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetBoolean_C
#define ClaRaTester_SteamCycle31074496487706_GetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(vals));
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed\");
    for(i=nr-1;i>=0;i--) vals[i]=((fmi2Boolean*)(vals))[i];
  }
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetBooleanwf;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetBoolean_C
#define ClaRaTester_SteamCycle31074496487706_SetBoolean_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals, int* dummy, int* oldVals) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    if(!a->discreteInputChanged){
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmi2Boolean*)(oldVals));
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"GetBoolean failed in SetBoolean\");
      for(j=nr-1;j>=0;j--){
        oldVals[j]=((fmi2Boolean*)(oldVals))[j];
        if(oldVals[j] != dummy[j]){
          a->discreteInputChanged = 1;
          break;
        }
      }
    }
    if(a->discreteInputChanged){
      if(a->currentMode == dyfmi2ContinuousTimeMode){
        status = a->dyFmiEnterEventMode(a->m);
        if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
        a->currentMode = dyfmi2EventMode;
      }
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
      a->cpDer = 1;
      a->cpOut = 1;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetString
      input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetString_C
#define ClaRaTester_SteamCycle31074496487706_SetString_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetString2(void*m, const int*refs, size_t nrefs,const fmi2String vals[]) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  size_t i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyfmi2ContinuousTimeMode){
      status = a->dyFmiEnterEventMode(a->m);
      if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiEnterEventModeFailed\");
      a->currentMode = dyfmi2EventMode;
    }
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    a->discreteInputChanged = fmi2True;
    a->cpDer = 1;
    a->cpOut = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetString failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiSetBooleanwf
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
      input Integer preAvailable;
      output Integer postAvailable=preAvailable;
    protected
      Boolean dummy[size(refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSetBoolean2wf(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_SetBooleanwf_C
#define ClaRaTester_SteamCycle31074496487706_SetBooleanwf_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSetBoolean2wf(void*m, const int* refs, size_t nr, const int* vals, int* dummy) {
  size_t i;
  int j;
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmi2Boolean*)(dummy))[i]=vals[i];
  if (a) {
    status=a->dyFmiSetBoolean(a->m, refs, nr, (fmi2Boolean*)(dummy));
      a->cpDer = 1;
      a->cpOut = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true,
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetBooleanwf;

    function fmiGetDirectionalDerivative
      input fmiModel fmi;
      input Integer z_refs[:];
      input Integer v_refs[:];
      input Real dv[size(v_refs, 1)];
      output Real dz[size(z_refs, 1)];
      external"C" ClaRaTester_SteamCycle31074496487706_GetDirectionalDerivative2(
        fmi,
        z_refs,
        size(z_refs, 1),
        v_refs,
        size(v_refs, 1),
        dv,
        dz)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_GetDirectionalDerivative2_C
#define ClaRaTester_SteamCycle31074496487706_GetDirectionalDerivative2_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_GetDirectionalDerivative2(void*m, const int* zref, size_t nzr, const int* vrefs, size_t nvr, const double *dv, double *dz) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status=a->dyFmiGetDirectionalDerivative(a->m, zref, nzr, vrefs, nvr, dv, dz);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetDirectionalDerivative failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiGetDirectionalDerivative;

    function GetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetRealScalar(fmi,outputValueReference[1]);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable, LateInline=true);
    end GetRealVariable;

    function GetRealVariable2
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Integer outputIndex;
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetOutput(fmi,outputIndex);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable2, LateInline=true);
    end GetRealVariable2;

    function GetRealDerVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Integer outputIndex;
      output Real outputVariable;
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //SetString(fmi,stringInputValueReferences,stringInputs);
      outputVariable:=fmiGetDerivatives2(fmi,outputIndex);
      annotation(derivative(noDerivative=realLinearDependentInputs,noDerivative=linearDependentStates)=derGetRealVariable2, LateInline=true);
    end GetRealDerVariable;

    function derGetRealVariable
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Real derRealInputs[:];
      input Real derStates[:];
      input Real derLinearOffsets;
      output Real derOutputVariable;
    protected
      Real dummy[1];
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //setString(fmi,stringInputValueReferences,stringInputs);
      dummy:=fmiGetDirectionalDerivative(fmi, outputValueReference,  cat(1,realInputValueReferences,statesValueRefernces), cat(1,derRealInputs,derStates));
      derOutputVariable:=dummy[1]+derLinearOffsets;
      annotation(LateInline=true);
    end derGetRealVariable;

    function derGetRealVariable2
      input fmiModel fmi;
      input Real Time;
      input Real realInputs[:];
      input Real realLinearDependentInputs[:];
      input Real states[:];
      input Real linearDependentStates[:];
      input Real linearOffset=0;
      input Boolean booleanInputs[:];
      input Integer integerInputs[:];
      //input String stringInputs[:];
      input Integer realInputValueReferences[:];
      input Integer realLinearDependentInputsValueReferences[:];
      input Integer statesValueRefernces[:];
      input Integer booleanInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      //input Integer stringInputValueReferences[:];
      input Integer outputValueReference[:];
      input Integer outputIndex;
      input Real derRealInputs[:];
      input Real derStates[:];
      input Real derLinearOffsets;
      output Real derOutputVariable;
    protected
      Real dummy[1];
    algorithm
      //fmi_Functions.fmiSetTime(fmi, Time);
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetReal(fmi,realLinearDependentInputsValueReferences,realLinearDependentInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      //setString(fmi,stringInputValueReferences,stringInputs);
      dummy:=fmiGetDirectionalDerivative(fmi, outputValueReference,  cat(1,realInputValueReferences,statesValueRefernces), cat(1,derRealInputs,derStates));
      derOutputVariable:=dummy[1]+derLinearOffsets;
      annotation(LateInline=true);
    end derGetRealVariable2;

    function linearizeFMU
      input fmiModel fmi;
      input Integer xVr[:];
      input Integer dxVr[:];
      input Integer uVr[:];
      input Integer yVr[:];
      output Real A[size(dxVr, 1), size(xVr, 1)];
      output Real B[size(dxVr, 1), size(uVr, 1)];
      output Real C[size(yVr, 1), size(xVr, 1)];
      output Real D[size(yVr, 1), size(uVr, 1)];
    protected
      parameter Integer nD = size(dxVr, 1);
      parameter Integer nY = size(yVr, 1);
      parameter Integer nU = size(uVr, 1);
      parameter Integer nX = size(xVr, 1);
      parameter Integer zRef[nD + nY] = cat(1, dxVr, yVr);
      Real vec[nD + nY];
      parameter Real one[1] = { 1.0};
    algorithm
      for i in 1:nX loop
        vec := fmiGetDirectionalDerivative(
          fmi,zRef,{ xVr[i]}, one);
        A[:, i] := vec[1:nD];
        C[:, i] := vec[nD + 1:end];
      end for;
      for i in 1:nU loop
        vec := fmiGetDirectionalDerivative(
        fmi,zRef,{ uVr[i]}, one);
        B[:, i] := vec[1:nD];
        D[:, i] := vec[nD + 1:end];
      end for;
    end linearizeFMU;

    function fmiSaveFMUState
      input fmiModel fmi;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSaveFMUState2(fmi)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_fmiSaveFMUState_C
#define ClaRaTester_SteamCycle31074496487706_fmiSaveFMUState_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSaveFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiSaveFMUState;

    function fmiRestoreFMUState
      input fmiModel fmi;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiRestoreFMUState2(fmi)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_fmiRestoreFMUState_C
#define ClaRaTester_SteamCycle31074496487706_fmiRestoreFMUState_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiRestoreFMUState2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
    a->cpOut = 1;
    a->cpDer = 1;
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiRestoreFMUState;

    function fmiSerializeFMUstate
      input fmiModel fmi;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiSerializeFMUstate2(fmi)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_fmiSerializeFMUstate_C
#define ClaRaTester_SteamCycle31074496487706_fmiSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    status = a->dyFmiGetFMUstate(a->m, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiGetFMUstate failed\");
    status = a->dyFmiSerializedFMUstateSize(a->m, a->dyFMUstate, &a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializedFMUstateSize failed\");
    if( a->dySerializeFMUstate) free(a->dySerializeFMUstate); a->dySerializeFMUstate = NULL;
    a->dySerializeFMUstate = malloc(a->dyFMUStateSize);
    if(!a->dySerializeFMUstate)  ModelicaError(\"malloc call to allocate SerializeFMUstate failed\");
    status = a->dyFmiSerializeFMUstate(a->m, a->dyFMUstate, a->dySerializeFMUstate, a->dyFMUStateSize);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSerializeFMUstate failed\");
  }
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiSerializeFMUstate;

    function fmiDeSerializeFMUstate
      input fmiModel fmi;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiDeSerializeFMUstate2(fmi)
        annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_fmiDeSerializeFMUstate_C
#define ClaRaTester_SteamCycle31074496487706_fmiDeSerializeFMUstate_C 1
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiDeSerializeFMUstate2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(!a->dySerializeFMUstate) ModelicaError(\"serializedFmuState is not allocated!!!\");
    if(a->dyFMUstate){
      a->dyFmiFreeFMUstate(a->m, &a->dyFMUstate);
      a->dyFMUstate = NULL;    }
    status = a->dyFmiDeSerializeFMUstate(a->m, a->dySerializeFMUstate, a->dyFMUStateSize, &a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiDeSerializeFMUstate failed\");
    status = a->dyFmiSetFMUstate(a->m, a->dyFMUstate);
    if (status != fmi2OK && status != fmi2Warning) ModelicaError(\"fmiSetFMUstate failed\");
  }
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiDeSerializeFMUstate;

    function fmiEnterSlaveInitializationMode
      input fmiModel fmi;
      input Boolean setTolerance;
      input Real relativeTolerance;
      input Real tStart;
      input Boolean forceShutDownAtTStop;
      input Real tStop;
      input Real preAvailable;
      output Real postAvailable = preAvailable;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiEnterSlaveInitializationMode2(fmi, setTolerance, relativeTolerance, tStart, forceShutDownAtTStop, tStop)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_fmiEnterSlaveInitializationMode_C
#define ClaRaTester_SteamCycle31074496487706_fmiEnterSlaveInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiEnterSlaveInitializationMode2(void*m, int setTolerance, double relativeTolerance, double tStart, int forceShutDownAtTStop, double tStop) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode==dyfmi2InstantiationMode){
      status=a->dyFmiSetupExperiment(a->m, setTolerance, relativeTolerance, tStart, forceShutDownAtTStop, tStop);
      status=a->dyFmiEnterInitializationMode(a->m);
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
      a->currentMode=dyfmi2InitializationMode;
    }else{
      status=fmi2OK;
    }
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"InitializeSlave failed\");
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiEnterSlaveInitializationMode;

    function fmiExitSlaveInitializationMode
      input fmiModel fmi;
      input Real preAvailable;
      output Real postAvailable = preAvailable;
      external"C" ClaRaTester_SteamCycle31074496487706_fmiExitSlaveInitializationMode2(fmi)
      annotation (Include="
#ifndef ClaRaTester_SteamCycle31074496487706_fmiExitSlaveInitializationMode_C
#define ClaRaTester_SteamCycle31074496487706_fmiExitSlaveInitializationMode_C 1
#include <stdlib.h>
#include \"FMI/fmi2Import.h\"
void ClaRaTester_SteamCycle31074496487706_fmiExitSlaveInitializationMode2(void*m) {
  struct dy_fmi2Extended*a=m;
  fmi2Status status=fmi2Fatal;
  if (a) {
    if(a->currentMode==dyfmi2InitializationMode){
      status=a->dyFmiExitInitializationMode(a->m);
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
      a->currentMode = dyfmi2EventMode;
    }else{status = fmi2OK;}
  }
  if (status!=fmi2OK && status!=fmi2Warning) ModelicaError(\"fmiExitModelInitialization failed!\");
  return;
}
#endif", Library="ClaRaTester_SteamCycle", LibraryDirectory="modelica://ClaRaTester/Resources/Library/FMU/ClaRaTester_SteamCycle/binaries");
      annotation (
        __Dymola_doNotLinkSharedObject=true,
        __Dymola_CriticalRegion="ClaRaTester_SteamCycle",
        __Dymola_LockExternalObject=true);
    end fmiExitSlaveInitializationMode;
end fmi_Functions;
initial equation
equation
  when initial() then
    fmi = fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn, fmi_resourceLocation);
  end when;
initial algorithm
  fmi_Functions.fmiSetReal(fmi, {637552266, 637552313, 637552569, 637552742, 637552886, 637553043, 637553217, 637553219, 33554454, 33554455, 637553856, 637554019, 637554156, 637554405, 637554568, 637554705, 33554483, 33554484, 33554493, 33554494, 637555749, 637555912, 637556049, 637556150, 637556314, 637556456, 637556457, 637556552, 637556715, 637556851, 33554537, 33554538, 33554544, 33554545, 33554551, 33554552, 33554558}, {steamGenerator.convert2PressureDrop_HP.'_u[1]_start', steamGenerator.convert2PressureDrop_IP.'_u[1]_start', condenser.tubes.heat._T_start, condenser.shell._volume_liq_start, condenser.shell.pressureLoss.'_Delta_p[2]_start', feedWaterTank.volume._volume_liq_start, feedWaterTank.volume.pressureLoss.'_Delta_p[1]_start', feedWaterTank.volume.pressureLoss.'_Delta_p[3]_start', PI_Pump_cond._resetValueP_start, PI_Pump_cond._resetValueID_start, preheater_HP.tubes.heat._T_start, preheater_HP.shell._volume_liq_start, preheater_HP.shell.pressureLoss.'_Delta_p[1]_start', preheater_LP1.tubes.heat._T_start, preheater_LP1.shell._volume_liq_start, preheater_LP1.shell.pressureLoss.'_Delta_p[1]_start', PI_valveControl_preheater_HP._resetValueP_start, PI_valveControl_preheater_HP._resetValueID_start, PI_preheater1._resetValueP_start, PI_preheater1._resetValueID_start, preheater_LP2.tubes.heat._T_start, preheater_LP2.shell._volume_liq_start, preheater_LP2.shell.pressureLoss.'_Delta_p[1]_start', preheater_LP3.tubes.heat._T_start, preheater_LP3.shell._volume_liq_start, preheater_LP3.shell.pressureLoss.'_Delta_p[1]_start', preheater_LP3.shell.pressureLoss.'_Delta_p[2]_start', preheater_LP4.tubes.heat._T_start, preheater_LP4.shell._volume_liq_start, preheater_LP4.shell.pressureLoss.'_Delta_p[1]_start', PID_preheaterLP4._resetValueP_start, PID_preheaterLP4._resetValueID_start, PID_preheaterLP3._resetValueP_start, PID_preheaterLP3._resetValueID_start, PID_NDVW3._resetValueP_start, PID_NDVW3._resetValueID_start, inertia._phi_start});
    fmi_Functions.fmiEnterSlaveInitializationMode(fmi, fmi_setTol, fmi_rTol, fmi_StartTime, fmi_forceShutDownAtStopTime, fmi_StopTime, 1);
  fmi_rdum := 1;
  fmi_idum := 1;
  myTimeStart :=time;
    fmi_Functions.fmiSetReal(fmi, {352321536}, {_u_start});
algorithm
assert(fmi_CommunicationStepSize > 0.0,"The parameter fmi_CommunicationStepSize has an invalid value, please set a positive value larger than 0.0");
  when {initial(), sample(fmi_StartTime, fmi_CommunicationStepSize)} then
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321536}, {_u_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321536}, {pre(u)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321536}, {u});
      end if;
    end if;
      if fmi_rdum > 0  and fmi_idum > 0 and not fmi_exitInit and not initial() then
        fmi_Functions.fmiExitSlaveInitializationMode(fmi, 1);
        fmi_exitInit:=true;
RealFixedLocal1 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100663436,100663437,100663438,100663439,100663440,100663441,100663506,100663507,100663508,100663509,100663511,100663512,100663516,100663497,100663498,100663664,100663665,100663669,100663723,100663731,100663732,100663734,100663735,100663802,100663803,100663804,100663805,100663806,100663807,100663841,100663842,100663843,100663844,100663845,100663846,100663900,100663964,100663965,100663966,100663967,100663969,100663970,100663974,100663955,100663956,100664115,100664116,100664117,100664118,100664120,100664121,100664125,100664106,100664107,100664400,100664406,100664407,100664586,100664587,100664588,100664589,100664590,100664591,100664609,100664610,100664611,100664612,100664613,100664614,100664641,100664642,100664657,100664832,100664833,100664834,100664835,100664883,100664884,100664885,100664886,100664887,100664888,100664922,100664923,100664924,100664925,100664926,100664927,100664961,100664962,100664963,100664964,100664965,100664966,100665000,100665001,100665002,100665003,100665004,
          100665005},
        fmi_rdum);
RealFixedLocal2 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100665096,100665230,100665259,100665260,100665262,100665264,100665266,100665309,100665310,100665335,100665464,100665465,100665466,100665467,100665468,100665521,100665522,100665523,100665524,100665525,100665526,100665560,100665561,100665562,100665563,100665564,100665565,100665599,100665600,100665601,100665602,100665603,100665604,100665638,100665639,100665640,100665641,100665642,100665643,100665677,100665678,100665679,100665680,100665681,100665682,100666022,100666033,100666034,100666049,100666093,100666070,100666071,100666140,100666141,100666158,100666144,100666155,100666156,100666270,100666271,100666272,100666273,100666275,100666276,100666280,100666261,100666262,100666408,100666409,100666410,100666411,100666412,100666413,100666755,100666759,100666760,100666780,100666781,100666766,100666777,100666778,100666877,100666878,100666879,100666880,100666881,100666882,100667091,100667092,100667093,100667097,100667098,100667099,100667120,100667121,100667122,100667124,100667125,100667174,
          100667175},
        fmi_rdum);
RealFixedLocal3 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100667176,100667235,100667236,100667273,100667274,100667275,100667276,100667277,100667278,100667296,100667297,100667298,100667299,100667300,100667301,100667349,100667350,100667480,100667481,100667482,100667483,100667484,100667534,100667535,100667536,100667537,100667538,100667539,100667573,100667574,100667575,100667576,100667577,100667578,100667612,100667613,100667614,100667615,100667616,100667617,100667651,100667652,100667653,100667654,100667655,100667656,100667715,100667716,100667906,100667910,100667931,100667932,100667917,100667928,100667929,100668059,100668060,100668064,100668077,100668078,100668235,100668236,100668237,100668241,100668242,100668243,100668264,100668265,100668266,100668268,100668269,100668318,100668319,100668320,100668379,100668380,100668417,100668418,100668419,100668420,100668421,100668422,100668440,100668441,100668442,100668443,100668444,100668445,100668497,100668498,100668628,100668629,100668630,100668631,100668632,100668682,100668683,100668684,100668685,
          100668686},
        fmi_rdum);
RealFixedLocal4 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100668687,100668721,100668722,100668723,100668724,100668725,100668726,100668760,100668761,100668762,100668763,100668764,100668765,100668799,100668800,100668801,100668802,100668803,100668804,100668863,100668864,100669091,100669201,100669184,100669186,100669187,100669189,100670204,100670202,100669233,100669234,100669239,100669240,100669218,100669219,100669220,100669221,100669222,100669223,100669224,100669225,100671557,100671558,100669279,100669282,100669283,100669253,100669254,100669255,100669256,100669257,100669258,100669259,100669260,100669261,100669262,100669263,100669264,100670976,100669401,100671246,100669362,100669363,100669368,100669369,100669347,100669348,100669349,100669350,100669351,100669352,100669353,100669354,100669405,100669382,100669383,100669384,100669385,100669386,100669387,100669388,100669389,100669448,100669455,100669456,100669457,100669458,100669459,100669429,100669430,100669431,100669432,100669433,100669434,100669435,100669436,100669437,100669438,100669439,
          100669440},
        fmi_rdum);
RealFixedLocal5 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100669504,100669505,100670122,100669981,100669485,100669486,100669487,100669488,100669489,100669490,100669491,100669492,100669493,100669540,100669541,100669546,100669547,100669525,100669526,100669527,100669528,100669529,100669530,100669531,100669532,100671851,100669586,100669589,100669590,100669560,100669561,100669562,100669563,100669564,100669565,100669566,100669567,100669568,100669569,100669570,100669571,100669780,100669906,100669712,100669776,100669777,100669778,100669779,100669781,100669782,100669784,100669948,100669809,100669825,100669826,100669831,100669832,100669810,100669811,100669812,100669813,100669814,100669815,100669816,100669817,100669860,100669845,100669846,100669847,100669848,100669849,100669850,100669851,100669852,100669853,100669902,100669883,100669884,100669885,100669886,100669887,100669888,100669889,100669890,100669949,100669930,100669931,100669932,100669933,100669934,100669935,100669936,100669937,100669982,100669963,100669964,100669965,100669966,100669967,
          100669968},
        fmi_rdum);
RealFixedLocal6 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100669969,100669970,100670011,100670012,100670017,100670018,100669996,100669997,100669998,100669999,100670000,100670001,100670002,100670003,100670046,100670047,100670052,100670053,100670031,100670032,100670033,100670034,100670035,100670036,100670037,100670038,100670726,100670081,100670066,100670067,100670068,100670069,100670070,100670071,100670072,100670073,100670074,100670155,100670123,100670104,100670105,100670106,100670107,100670108,100670109,100670110,100670111,100670159,100670136,100670137,100670138,100670139,100670140,100670141,100670142,100670143,100670198,100670199,100670205,100670183,100670184,100670185,100670186,100670187,100670188,100670189,100670190,100671313,100670597,100670598,100670603,100670604,100670582,100670583,100670584,100670585,100670586,100670587,100670588,100670589,100670780,100670632,100670633,100670638,100670639,100670617,100670618,100670619,100670620,100670621,100670622,100670623,100670624,100670673,100670652,100670653,100670654,100670655,100670656,
          100670657},
        fmi_rdum);
RealFixedLocal7 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100670658,100670659,100670660,100670705,100670706,100670707,100670708,100670709,100670710,100670711,100670712,100670713,100670765,100670766,100670767,100670768,100670769,100670770,100670771,100670772,100670818,100670819,100670824,100670825,100670803,100670804,100670805,100670806,100670807,100670808,100670809,100670810,100671275,100670853,100670854,100670859,100670860,100670838,100670839,100670840,100670841,100670842,100670843,100670844,100670845,100670891,100670892,100670873,100670874,100670875,100670876,100670877,100670878,100670879,100670880,100670972,100670975,100670924,100670925,100670906,100670907,100670908,100670909,100670910,100670911,100670912,100670913,100670914,100671359,100670946,100670947,100670948,100670949,100670950,100670951,100670952,100670953,100670954,100670955,100670956,100670957,100671484,100671485,100671066,100671069,100671070,100671040,100671041,100671042,100671043,100671044,100671045,100671046,100671047,100671048,100671049,100671050,100671051,100671164,
          100671160},
        fmi_rdum);
RealFixedLocal8 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100671163,100671134,100671135,100671136,100671137,100671138,100671139,100671140,100671141,100671142,100671143,100671144,100671145,100671406,100671247,100671228,100671229,100671230,100671231,100671232,100671233,100671234,100671235,100671260,100671261,100671262,100671263,100671264,100671265,100671266,100671267,100671268,100671355,100671298,100671299,100671300,100671301,100671302,100671303,100671304,100671305,100671306,100671402,100671336,100671337,100671338,100671339,100671340,100671341,100671342,100671343,100671383,100671384,100671385,100671386,100671387,100671388,100671389,100671390,100671445,100671446,100671451,100671452,100671430,100671431,100671432,100671433,100671434,100671435,100671436,100671437,100671465,100671466,100671467,100671468,100671469,100671470,100671471,100671472,100671473,100671523,100671524,100671505,100671506,100671507,100671508,100671509,100671510,100671511,100671512,100671538,100671539,100671540,100671541,100671542,100671543,100671544,100671545,100671546,
          100671853},
        fmi_rdum);
RealFixedLocal9 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100671857,100671858,100671859,100671826,100671827,100671828,100671829,100671830,100671831,100671939,100671956,100671942,100671953,100671954,100672048,100672049,100672050,100672051,100672052,100672053,100672250,100672251,100672266,100672310,100672287,100672288,100672356,100672473,100672456,100672458,100672459,100672461,100673496,100673494,100672505,100672506,100672511,100672512,100672490,100672491,100672492,100672493,100672494,100672495,100672496,100672497,100674866,100674867,100672551,100672554,100672555,100672525,100672526,100672527,100672528,100672529,100672530,100672531,100672532,100672533,100672534,100672535,100672536,100674277,100672675,100674553,100672636,100672637,100672642,100672643,100672621,100672622,100672623,100672624,100672625,100672626,100672627,100672628,100672679,100672656,100672657,100672658,100672659,100672660,100672661,100672662,100672663,100672732,100672734,100672704,100672706,100672709,100672710,100672712,100672713,100672715,100672784,100672785,100673412,
          100673269},
        fmi_rdum);
RealFixedLocal10 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100672765,100672766,100672767,100672768,100672769,100672770,100672771,100672772,100672773,100672821,100672822,100672827,100672828,100672806,100672807,100672808,100672809,100672810,100672811,100672812,100672813,100675160,100672867,100672870,100672871,100672841,100672842,100672843,100672844,100672845,100672846,100672847,100672848,100672849,100672850,100672851,100672852,100673063,100673193,100672995,100673059,100673060,100673061,100673062,100673065,100673236,100673110,100673111,100673116,100673117,100673095,100673096,100673097,100673098,100673099,100673100,100673101,100673102,100673147,100673132,100673133,100673134,100673135,100673136,100673137,100673138,100673139,100673140,100673189,100673170,100673171,100673172,100673173,100673174,100673175,100673176,100673177,100673237,100673218,100673219,100673220,100673221,100673222,100673223,100673224,100673225,100673270,100673251,100673252,100673253,100673254,100673255,100673256,100673257,100673258,100673300,100673301,100673306,100673307,
          100673285},
        fmi_rdum);
RealFixedLocal11 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100673286,100673287,100673288,100673289,100673290,100673291,100673292,100673336,100673337,100673342,100673343,100673321,100673322,100673323,100673324,100673325,100673326,100673327,100673328,100674025,100673371,100673356,100673357,100673358,100673359,100673360,100673361,100673362,100673363,100673364,100673446,100673413,100673394,100673395,100673396,100673397,100673398,100673399,100673400,100673401,100673450,100673427,100673428,100673429,100673430,100673431,100673432,100673433,100673434,100673490,100673491,100673497,100673475,100673476,100673477,100673478,100673479,100673480,100673481,100673482,100674620,100673895,100673896,100673901,100673902,100673880,100673881,100673882,100673883,100673884,100673885,100673886,100673887,100674080,100673930,100673931,100673936,100673937,100673915,100673916,100673917,100673918,100673919,100673920,100673921,100673922,100673971,100673950,100673951,100673952,100673953,100673954,100673955,100673956,100673957,100673958,100674004,100674005,100674006,
          100674007},
        fmi_rdum);
RealFixedLocal12 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100674008,100674009,100674010,100674011,100674012,100674065,100674066,100674067,100674068,100674069,100674070,100674071,100674072,100674119,100674120,100674125,100674126,100674104,100674105,100674106,100674107,100674108,100674109,100674110,100674111,100674582,100674154,100674155,100674160,100674161,100674139,100674140,100674141,100674142,100674143,100674144,100674145,100674146,100674192,100674193,100674174,100674175,100674176,100674177,100674178,100674179,100674180,100674181,100674273,100674276,100674225,100674226,100674207,100674208,100674209,100674210,100674211,100674212,100674213,100674214,100674215,100674666,100674247,100674248,100674249,100674250,100674251,100674252,100674253,100674254,100674255,100674256,100674257,100674258,100674793,100674794,100674369,100674372,100674373,100674343,100674344,100674345,100674346,100674347,100674348,100674349,100674350,100674351,100674352,100674353,100674354,100674469,100674465,100674468,100674439,100674440,100674441,100674442,100674443,
          100674444},
        fmi_rdum);
RealFixedLocal13 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100674445,100674446,100674447,100674448,100674449,100674450,100674714,100674554,100674535,100674536,100674537,100674538,100674539,100674540,100674541,100674542,100674567,100674568,100674569,100674570,100674571,100674572,100674573,100674574,100674575,100674662,100674605,100674606,100674607,100674608,100674609,100674610,100674611,100674612,100674613,100674710,100674643,100674644,100674645,100674646,100674647,100674648,100674649,100674650,100674691,100674692,100674693,100674694,100674695,100674696,100674697,100674698,100674754,100674755,100674760,100674761,100674739,100674740,100674741,100674742,100674743,100674744,100674745,100674746,100674774,100674775,100674776,100674777,100674778,100674779,100674780,100674781,100674782,100674832,100674833,100674814,100674815,100674816,100674817,100674818,100674819,100674820,100674821,100674847,100674848,100674849,100674850,100674851,100674852,100674853,100674854,100674855,100675162,100675166,100675167,100675168,100675135,100675136,100675137,
          100675138},
        fmi_rdum);
RealFixedLocal14 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100675139,100675140,100675241,100675242,100675243,100675244,100675246,100675247,100675251,100675232,100675233,100675392,100675393,100675394,100675395,100675397,100675398,100675402,100675383,100675384,100675524,100675525,100675526,100675527,100675528,100675529,100675729,100675730,100675731,100675732,100675733,100675734,100675965,100675966,100675967,100675968,100675970,100675971,100675975,100675956,100675957,100676116,100676117,100676118,100676119,100676121,100676122,100676126,100676107,100676108,100676248,100676249,100676250,100676251,100676252,100676253,100676453,100676454,100676455,100676456,100676457,100676458,100676686,100676687,100676704,100676690,100676701,100676702,100676806,100676807,100676808,100676812,100676813,100676814,100676835,100676836,100676837,100676839,100676840,100676889,100676890,100676891,100676950,100676951,100676988,100676989,100676990,100676991,100676992,100676993,100677011,100677012,100677013,100677014,100677015,100677016,100677068,100677069,100677199,
          100677200},
        fmi_rdum);
RealFixedLocal15 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100677201,100677202,100677203,100677253,100677254,100677255,100677256,100677257,100677258,100677292,100677293,100677294,100677295,100677296,100677297,100677331,100677332,100677333,100677334,100677335,100677336,100677370,100677371,100677372,100677373,100677374,100677375,100677434,100677435,100677606,100677607,100677608,100677612,100677613,100677614,100677634,100677635,100677636,100677638,100677639,100677707,100677708,100677709,100677768,100677769,100677806,100677807,100677808,100677809,100677810,100677811,100677829,100677830,100677831,100677832,100677833,100677834,100677886,100677887,100678016,100678017,100678018,100678019,100678020,100678067,100678068,100678069,100678070,100678071,100678072,100678106,100678107,100678108,100678109,100678110,100678111,100678145,100678146,100678147,100678148,100678149,100678150,100678184,100678185,100678186,100678187,100678188,100678189,100678244,100678399,100678400,100678401,100678405,100678406,100678407,100678427,100678428,100678429,100678431,
          100678432},
        fmi_rdum);
RealFixedLocal16 :=fmi_Functions.fmiGetRealwf(
        fmi,
        {100678501,100678502,100678503,100678562,100678563,100678600,100678601,100678602,100678603,100678604,100678605,100678623,100678624,100678625,100678626,100678627,100678628,100678680,100678681,100678811,100678812,100678813,100678814,100678815,100678865,100678866,100678867,100678868,100678869,100678870,100678904,100678905,100678906,100678907,100678908,100678909,100678943,100678944,100678945,100678946,100678947,100678948,100678982,100678983,100678984,100678985,100678986,100678987,100679046,100679047,100679351,100679337,100679348,100679349,100679483,100679484,100679578,100679579,100679580,100679581,100679821,100679822,100679943,100679944,100679961,100679947,100679958,100679959,100680082,100680083,100680100,100680086,100680097,100680098,100680440,100680484,100680721,100680868,100680869,100680870,100680871,100680872,100680873,100680874,100680875,100680876,100680877,100680878,100680879,100680880,100680881,100680882,100680915,100680949,100680950,100680951,100681151,100681137,100681148,
          100681149},
        fmi_rdum);
IntegerFixedLocal :=fmi_Functions.fmiGetIntegerwf(
        fmi,
        {100663793,100663832,100664577,100664600,100664874,100664913,100664952,100664991,100665512,100665551,100665590,100665629,100665668,100667264,100667287,100667525,100667564,100667603,100667642,100668408,100668431,100668673,100668712,100668751,100668790,100676979,100677002,100677244,100677283,100677322,100677361,100677797,100677820,100678058,100678097,100678136,100678175,100678591,100678614,100678856,100678895,100678934,100678973},
        fmi_idum);
BooleanFixedLocal :=fmi_Functions.fmiGetBooleanwf(
        fmi,
        {100666782,100667933,100668065},
        fmi_idum);
      end if;
    if time>=fmi_CommunicationStepSize +fmi_StartTime then
      for stepSizeIndex in 1:stepSizeScaleFactor loop
        fmi_StepOK :=fmi_Functions.fmiDoStep(
          fmi,
          time + (stepSizeIndex - 1 - stepSizeScaleFactor)*fmi_CommunicationStepSize/stepSizeScaleFactor,
          fmi_CommunicationStepSize/stepSizeScaleFactor,
          1);
      end for;
      fmi_flip :=not pre(fmi_flip);
    end if;
    if not initial() then
    end if;
RealVariables1 :=fmi_Functions.fmiGetReal(fmi, {905987636,905987637,905987638,905987639,905987640,905987641,905987642,637552193,905987650,637552195,905987652,905987653,905987647,637552187,637552188,637552189,637552190,905987648,905987698,905987699,905987678,637552251,637552221,905987679,905987700,905987657,905987656,905987658,905987701,905987655,905987654,905987703,905987704,905987705,905987706,436207616,33554432,33554433,637552256,637552257,33554434,33554435,637552258,637552259,637552260,637552261,905987768,637552252,637552253,637552254,637552255,587202565,33554436,33554437,637552266,637552267,637552268,905987725,905987726,637552271,637552272,637552273,637552274,637552275,637552276,637552277,637552278,637552279,905987736,905987737,905987738,905987739,905987740,905987741,905987742,905987743,905987744,905987745,637552290,905987747,905987748,637552293,637552294,637552295,637552296,637552297,637552298,637552299,637552300,637552301,905987758,905987759,905987760,905987761,905987762,
      905987763,905987764,905987765,905987766,905987767});
RealVariables2 :=fmi_Functions.fmiGetReal(fmi, {637552313,637552314,637552315,905987772,905987773,637552318,905987775,905987776,905987777,905987778,905987779,905987780,637552387,905987781,905987782,905987783,637552333,905987790,637552328,637552335,905987792,905987793,905987787,637552329,637552330,905987788,905987839,905987840,905987819,637552362,905987820,905987841,905987798,905987797,905987799,905987842,905987796,905987794,905987795,905987845,905987846,905987847,905987848,637552401,905987858,637552396,637552403,905987860,905987861,905987855,637552393,637552394,637552395,637552397,637552398,905987856,905987907,905987908,905987887,637552430,905987888,905987909,905987866,905987865,905987867,905987910,905987864,905987862,905987863,905987912,905987913,905987914,905987915,637552460,637552461,637552462,637552517,637552463,637552464,637552465,637552466,905987969,905987970,905987971,905987972,905987974,905987975,905987926,637552468,905987925,905987927,905987976,637552467,905987949,905987947,
      905987948,905987950,905987977,905987946,637554759});
RealVariables3 :=fmi_Functions.fmiGetReal(fmi, {637552522,637552523,637552524,637552525,33554438,33554439,637552566,637552569,637552570,637552563,637557344,905988031,905988032,905988027,905988030,637557382,637552564,637552567,905988068,905988069,905988028,905988067,905988021,905988005,905987999,905988000,905987983,637552528,905988029,637552526,905988033,905988034,905988035,905988036,905988037,905988038,905988039,905988040,905988041,905988042,905988043,905988044,905988045,905988046,905988047,905988048,905988049,905988050,905988051,905988052,905988053,905988054,905988055,905988056,905988057,905988058,905988059,905988060,905988061,905988062,905988063,905988064,905988065,905988066,905988070,905988071,905988072,905988073,905988074,905988075,905988076,905988077,905988078,905988079,905988080,905988081,905988082,905988083,905988084,905988085,905988086,905988087,905988088,905988089,905988090,905988091,905988092,905988093,905988094,905988095,905988096,905988097,905988098,905988099,905988100,
      905988101,905988102,905988103,637552648,637552649});
RealVariables4 :=fmi_Functions.fmiGetReal(fmi, {637552650,637552651,637552652,637552653,637552654,637552655,905988112,905988113,637552658,637552659,637552660,33554440,33554441,637552740,637552741,637552742,637552743,33554442,637552744,637552745,637552746,637552747,637552748,637552749,637552750,587202571,33554443,637552751,637552752,637552753,637552754,637552755,637552756,637552924,637552925,637552926,905988383,905988384,637552758,637552759,637552760,905988217,637552737,905988218,905988187,905988219,905988220,905988221,905988222,905988223,905988224,905988225,905988226,905988227,905988228,905988229,905988230,905988231,905988232,905988233,905988234,905988235,905988236,905988237,905988238,637552738,905988239,905988188,905988240,905988241,905988242,905988243,905988244,905988245,905988246,905988247,905988248,905988249,905988250,905988251,905988252,905988253,905988254,905988255,905988256,905988257,905988258,905988259,905988260,905988189,905988261,905988262,905988263,905988264,905988265,
      905988266,905988267,905988268,905988269,905988270});
RealVariables5 :=fmi_Functions.fmiGetReal(fmi, {905988271,905988272,905988273,905988274,905988275,905988276,905988277,905988278,905988279,905988280,637552739,905988281,905988190,905988282,905988283,905988284,905988285,905988286,905988287,905988288,905988289,905988290,905988291,905988292,905988293,905988294,905988295,905988296,905988297,905988298,905988299,905988300,905988301,905988302,905988303,637552848,637552849,905988306,637552851,637552852,637552853,905988310,637552855,637552856,637552857,637552858,637552859,637552860,637552861,637552862,637552863,637552864,637552865,637552866,637552867,637552868,637552869,637552870,905988327,905988328,905988329,905988330,637552875,637552885,637552886,905988343,905988344,905988345,905988346,905988347,905988348,905988349,905988350,905988351,637553307,905988352,637552735,637552736,637552723,637552692,637552717,637552686,637552718,637552687,905988157,905988126,637552702,637552671,905988353,905988354,637552700,637552669,637552899,637552900,637552901,
      33554444,33554445,33554446,637552902,637552903});
RealVariables6 :=fmi_Functions.fmiGetReal(fmi, {637552904,637552905,905988362,905988363,905988364,905988365,905988366,637552911,905988368,905988369,905988370,905988371,905988372,905988373,905988374,905988375,905988376,905988377,905988378,905988379,637552929,637552930,637552931,637552932,637552933,637552934,637552935,637552936,637552937,905988394,905988395,637557548,905988396,905988397,637552942,637552943,637553233,637553234,637553235,905988400,905988401,905988402,905988403,905988404,905988405,905988406,905988407,905988408,905988409,905988410,905988411,905988412,905988413,905988414,905988415,905988416,905988417,637553250,905988418,637553251,905988419,905988420,905988421,905988422,905988423,905988490,905988700,905988701,905988605,905988606,905988604,33554447,33554448,637553041,637553042,637553043,637553044,33554449,637553045,637553046,637553047,637553048,637553049,637553050,637553051,587202578,33554450,637553052,637553053,637553054,637553055,637553056,637553057,637553058,637553059,
      637553252,637553061,637553062,637553063,905988520});
RealVariables7 :=fmi_Functions.fmiGetReal(fmi, {637553037,905988521,905988486,905988522,905988523,905988524,905988525,905988526,905988527,905988528,905988529,905988530,905988531,905988532,905988533,905988534,905988535,905988536,905988537,905988538,905988539,905988540,905988541,637553038,905988542,905988487,905988543,905988544,905988545,905988546,905988547,905988548,905988549,905988550,905988551,905988552,905988553,905988554,905988555,905988556,905988557,905988558,905988559,905988560,905988561,905988562,637553039,905988563,905988488,905988564,905988565,905988566,905988567,905988568,905988569,905988570,905988571,905988572,905988573,905988574,905988575,905988576,905988577,905988578,905988579,905988580,905988581,905988582,905988583,637553040,905988584,905988489,905988585,905988586,905988587,905988588,905988589,905988590,905988591,905988592,905988593,905988594,905988595,905988596,905988597,905988598,905988599,905988600,905988601,905988602,905988603,905988607,905988608,905988609,905988610,
      905988611,905988612,905988613,905988614,905988615});
RealVariables8 :=fmi_Functions.fmiGetReal(fmi, {905988616,905988617,905988618,905988619,905988620,905988621,905988622,905988623,905988624,905988625,905988626,905988627,637553172,637553173,637553174,637553175,905988632,637553177,637553178,637553179,637553180,905988637,637553182,637553183,637553184,637553185,637553186,637553187,637553188,637553189,637553190,637553191,637553192,637553193,637553194,637553195,637553196,637553197,637553198,637553199,637553200,637553201,637553202,637553203,905988660,637553205,637553217,637553218,637553219,905988676,905988677,905988678,905988679,905988680,905988681,905988682,905988683,905988684,905988685,905988686,637553035,637553036,637553022,637552991,637553016,637552985,637553017,637552986,905988456,905988425,637553001,637552970,905988687,905988688,637552999,637552968,33554451,33554452,33554453,637553236,637553237,587202581,905988694,905988695,905988696,905988697,905988698,905988699,905988702,905988703,905988704,905988705,637553253,637553254,637553255,
      637553256,637553257,637553258,637553312,637553259});
RealVariables9 :=fmi_Functions.fmiGetReal(fmi, {637553260,905988764,905988765,905988766,905988767,905988769,905988770,905988720,637553262,905988719,905988721,905988771,637553261,905988743,905988741,905988742,905988744,905988772,905988740,905988773,33554454,33554455,33554456,637553318,637553319,637553320,33554457,637553321,637553326,637553322,637553323,637553329,637553324,637553325,637553327,637553328,33554458,33554459,33554460,637553330,637555111,637553335,905988792,905988793,905988819,905988818,905988820,905988794,905988787,905988798,905988797,905988799,905988795,905988796,905988839,905988840,905988841,905988842,637553393,905988850,637553395,905988852,905988853,905988847,637553387,637553388,637553389,637553390,905988848,905988899,905988900,905988879,637553422,905988880,905988901,905988858,905988857,905988859,905988902,905988856,905988854,905988855,905988904,905988905,905988906,905988907,637553463,637553464,637553465,33554461,637553466,637553467,33554462,905988908,905988909,637553454,
      905988911,905988912,905988913,905988914});
RealVariables10 :=fmi_Functions.fmiGetReal(fmi, {637553459,905988916,905988917,905988977,905988975,905988976,905988978,905988924,905988974,905988954,905988952,905988953,905988955,905988925,905988951,905989000,905988998,905988999,905989001,905988926,905988997,905988930,905988948,905988942,905988943,905988929,637553475,905988927,637553472,637555356,637553494,637553564,637553565,637553566,637553621,637553567,637553568,637553569,637553570,905989073,905989074,905989075,905989076,905989078,905989079,905989030,637553572,905989029,905989031,905989080,637553571,905989053,905989051,905989052,905989054,905989081,905989050,637553631,637553632,637555221,637553626,905989089,905989090,637553635,905989092,637553637,637553628,905989099,905989100,905989126,905989125,637553671,905989101,637553627,905989105,905989104,905989106,905989102,905989103,905989146,905989147,905989148,905989149,637553704,637553705,637553706,33554463,637553707,637553708,33554464,905989150,905989151,905989152,905989153,905989154,
      905989155,637553700,905989157,905989158,905989219});
RealVariables11 :=fmi_Functions.fmiGetReal(fmi, {905989217,905989218,905989220,905989165,905989216,905989196,905989194,905989195,905989197,905989166,905989193,905989242,905989240,905989241,905989243,905989167,905989239,905989172,905989190,905989184,905989185,905989171,637553717,905989168,637553714,637553713,637553736,637554747,637553806,637553807,637553808,637553809,637553810,637553811,33554465,33554466,637553852,637553856,637553857,905989314,637553849,637553853,905989319,905989320,905989315,905989318,637553850,637553854,905989356,905989357,905989316,905989355,905989307,905989291,905989285,905989286,905989269,637553814,905989317,637553812,905989321,905989322,905989323,905989324,905989325,905989326,905989327,905989328,905989329,905989330,905989331,905989332,905989333,905989334,905989335,905989336,905989337,905989338,905989339,905989340,905989341,905989342,905989343,905989344,905989345,905989346,905989347,905989348,905989349,905989350,905989351,905989352,905989353,905989354,905989358,
      905989359,905989360,905989361,905989362,905989363});
RealVariables12 :=fmi_Functions.fmiGetReal(fmi, {905989364,905989365,905989366,905989367,905989368,905989369,905989370,905989371,905989372,905989373,905989374,905989375,905989376,905989377,905989378,905989379,905989380,905989381,905989382,905989383,905989384,905989385,905989386,905989387,905989388,905989389,905989390,905989391,637553936,637553937,637553938,637553939,637553940,637553941,905989398,637553946,33554467,33554468,637554017,637554018,637554019,637554020,33554469,637554021,637554022,637554023,637554024,637554025,637554026,637554027,587202598,33554470,637554028,637554029,637554030,637554031,905989649,905989650,905989651,905989652,637554033,637554034,637554035,905989492,637554015,905989493,905989465,905989494,905989495,905989496,905989497,905989498,905989499,905989500,905989501,905989502,905989503,905989504,905989505,905989506,905989507,905989508,905989509,905989510,905989511,905989512,905989513,905989514,905989466,905989515,905989516,905989517,905989518,905989519,905989520,
      905989521,905989522,905989523,905989524,905989525});
RealVariables13 :=fmi_Functions.fmiGetReal(fmi, {905989526,905989527,905989528,905989529,905989530,905989531,905989532,905989533,905989534,905989535,905989467,905989536,905989537,905989538,905989539,905989540,905989541,905989542,905989543,905989544,905989545,905989546,905989547,905989548,905989549,905989550,905989551,905989552,905989553,905989554,905989555,637554016,905989556,905989468,905989557,905989558,905989559,905989560,905989561,905989562,905989563,905989564,905989565,905989566,905989567,905989568,905989569,905989570,905989571,905989572,905989573,905989574,905989575,905989576,905989577,905989578,637554123,905989580,905989581,637554126,637554127,905989584,905989585,637554130,637554131,637554132,637554133,637554134,637554135,637554136,637554137,637554138,637554139,637554140,637554141,905989598,905989599,905989600,905989601,637554146,637554156,905989613,905989614,905989615,905989616,905989617,905989618,905989619,905989620,905989621,637554013,637554014,637554001,637553970,637553995,
      637553964,637553996,637553965,905989435,905989404});
RealVariables14 :=fmi_Functions.fmiGetReal(fmi, {637553980,637553949,905989622,905989623,637553978,637553947,637554168,637554169,637554170,33554471,33554472,33554473,637554171,637554172,637554173,637554174,905989631,905989632,905989633,905989634,905989635,637554180,905989637,905989638,905989639,905989640,905989641,905989642,905989643,905989644,905989645,905989646,905989647,905989648,905989658,905989659,637554204,905989661,637554206,637554207,905989669,905989670,905989698,637554200,905989697,637554243,905989671,637554240,905989676,637554218,905989675,637554221,905989672,637554217,905989718,905989719,905989720,905989721,637554266,905989728,905989729,637554274,637554275,637554276,637554277,637554278,637554279,905989737,905989738,637554310,637554270,905989765,905989767,905989739,637554308,637554288,637554286,905989743,905989745,905989740,637554285,905989786,905989787,905989788,905989789,905989790,905989791,905989792,905989793,637554928,637554358,637554359,637554360,33554474,33554475,
      637554401,637554405,637554406,905989863,637554398});
RealVariables15 :=fmi_Functions.fmiGetReal(fmi, {637554402,905989868,905989869,905989864,905989867,637554830,637554399,637554403,905989905,905989906,905989865,905989904,905989856,905989840,905989834,905989835,905989818,637554363,905989866,637554361,905989870,905989871,905989872,905989873,905989874,905989875,905989876,905989877,905989878,905989879,905989880,905989881,905989882,905989883,905989884,905989885,905989886,905989887,905989888,905989889,905989890,905989891,905989892,905989893,905989894,905989895,905989896,905989897,905989898,905989899,905989900,905989901,905989902,905989903,905989907,905989908,905989909,905989910,905989911,905989912,905989913,905989914,905989915,905989916,905989917,905989918,905989919,905989920,905989921,905989922,905989923,905989924,905989925,905989926,905989927,905989928,905989929,905989930,905989931,905989932,905989933,905989934,905989935,905989936,905989937,905989938,905989939,905989940,637554485,637554486,637554487,637554488,637554489,637554490,905989947,
      637554495,33554476,33554477,637554566,637554567});
RealVariables16 :=fmi_Functions.fmiGetReal(fmi, {637554568,637554569,33554478,637554570,637554571,637554572,637554573,637554574,637554575,637554576,587202607,33554479,637554577,637554578,637554579,637554580,905990198,905990199,905990200,905990201,637554582,637554583,637554584,905990041,637554564,905990042,905990014,905990043,905990044,905990045,905990046,905990047,905990048,905990049,905990050,905990051,905990052,905990053,905990054,905990055,905990056,905990057,905990058,905990059,905990060,905990061,905990062,905990063,905990015,905990064,905990065,905990066,905990067,905990068,905990069,905990070,905990071,905990072,905990073,905990074,905990075,905990076,905990077,905990078,905990079,905990080,905990081,905990082,905990083,905990084,905990016,905990085,905990086,905990087,905990088,905990089,905990090,905990091,905990092,905990093,905990094,905990095,905990096,905990097,905990098,905990099,905990100,905990101,905990102,905990103,905990104,637554565,905990105,905990017,905990106,
      905990107,905990108,905990109,905990110,905990111});
RealVariables17 :=fmi_Functions.fmiGetReal(fmi, {905990112,905990113,905990114,905990115,905990116,905990117,905990118,905990119,905990120,905990121,905990122,905990123,905990124,905990125,905990126,905990127,637554672,905990129,905990130,637554675,637554676,905990133,905990134,637554679,637554680,637554681,637554682,637554683,637554684,637554685,637554686,637554687,637554688,637554689,637554690,905990147,905990148,905990149,905990150,637554695,637554705,905990162,905990163,905990164,905990165,905990166,905990167,905990168,905990169,905990170,637554562,637554563,637554550,637554519,637554544,637554513,637554545,637554514,905989984,905989953,637554529,637554498,905990171,905990172,637554527,637554496,637554717,637554718,637554719,33554480,33554481,33554482,637554720,637554721,637554722,637554723,905990180,905990181,905990182,905990183,905990184,637554729,905990186,905990187,905990188,905990189,905990190,905990191,905990192,905990193,905990194,905990195,905990196,905990197,905990202,
      33554483,33554484,33554485,637554748,637554749});
RealVariables18 :=fmi_Functions.fmiGetReal(fmi, {637554750,33554486,637554751,637554755,637554752,637554753,637554757,637554754,637554756,33554487,33554488,33554489,637554758,33554490,637554765,905990222,905990223,905990251,905990219,905990250,905990252,905990224,905990249,905990229,905990227,905990228,905990230,905990225,905990226,905990271,905990272,905990273,905990274,637554820,637554821,637554822,33554491,637554823,637554824,33554492,905990317,905990315,905990316,905990318,905990281,905990314,905990340,905990338,905990339,905990341,905990282,905990337,905990363,905990361,905990362,905990364,905990283,905990360,905990290,905990308,905990302,905990303,905990289,637554835,905990284,637554832,637554829,637554831,905990310,905990311,905990312,905990313,905990383,33554493,33554494,33554495,637554929,637554930,637554931,33554496,637554932,637554937,637554933,637554934,637554940,637554935,637554936,637554938,637554939,33554497,33554498,33554499,637554941,905990398,637554949,905990406,
      637554951,905990408,905990409,905990403});
RealVariables19 :=fmi_Functions.fmiGetReal(fmi, {637554943,637554944,637554945,637554946,905990404,905990455,905990456,905990435,637554978,905990436,905990457,905990414,905990413,905990415,905990458,905990412,905990410,905990411,905990460,905990461,905990462,905990463,637555012,905990469,637555014,905990471,905990472,905990466,637555008,637555009,905990467,905990518,905990519,905990498,637555041,905990499,905990520,905990477,905990476,905990478,905990521,905990475,905990473,905990474,905990523,905990524,905990525,905990526,637555080,637555081,637555082,33554500,637555083,637555084,33554501,905990527,905990528,905990529,905990530,905990531,905990532,905990533,905990534,905990594,905990592,905990593,905990595,905990541,905990591,905990571,905990569,905990570,905990572,905990542,905990568,905990617,905990615,905990616,905990618,905990543,905990614,905990547,905990565,905990559,905990560,905990546,637555092,905990544,637555089,637555190,637555191,637555192,33554502,637555193,637555194,
      33554503,905990637,905990638,905990639,905990640});
RealVariables20 :=fmi_Functions.fmiGetReal(fmi, {905990641,905990642,905990643,905990644,905990704,905990702,905990703,905990705,905990651,905990701,905990681,905990679,905990680,905990682,905990652,905990678,905990727,905990725,905990726,905990728,905990653,905990724,905990657,905990675,905990669,905990670,905990656,637555202,905990654,637555199,637555297,905990754,637555299,905990756,905990757,905990751,637555291,637555292,637555293,637555294,905990752,905990803,905990804,905990783,637555326,905990784,905990805,905990762,905990761,905990763,905990806,905990760,905990758,905990759,905990808,905990809,905990810,905990811,637555361,905990818,637555363,905990820,905990821,905990815,637555357,637555358,905990816,905990867,905990868,905990847,637555390,905990848,905990869,905990826,905990825,905990827,905990870,905990824,905990822,905990823,905990872,905990873,905990874,905990875,637555430,637555431,637555432,33554504,637555433,637555434,33554505,905990876,905990877,905990878,905990879,
      905990880,905990881,637555426,905990883,905990884});
RealVariables21 :=fmi_Functions.fmiGetReal(fmi, {905990944,905990942,905990943,905990945,905990891,905990941,905990921,905990919,905990920,905990922,905990892,905990918,905990967,905990965,905990966,905990968,905990893,905990964,905990897,905990915,905990909,905990910,905990896,637555442,905990894,637555439,637555461,637555541,637555542,637555543,33554506,637555544,637555545,33554507,905990987,905990988,905990989,905990990,905990991,905990992,637555537,905990994,905990995,905991055,905991053,905991054,905991056,905991002,905991052,905991032,905991030,905991031,905991033,905991003,905991029,905991078,905991076,905991077,905991079,905991004,905991075,905991008,905991026,905991020,905991021,905991007,637555553,905991005,637555550,637555572,637555647,637555642,637555648,905991105,905991106,905991132,905991131,905991133,905991107,905991099,905991111,905991110,905991112,905991108,905991109,905991152,905991153,905991154,905991155,637557417,637555700,637555701,637555702,637555703,637555704,
      33554508,33554509,637555745,637555749,637555750});
RealVariables22 :=fmi_Functions.fmiGetReal(fmi, {905991207,637555742,637555746,905991212,905991213,905991208,905991211,637555743,637555747,905991249,905991250,905991209,905991248,905991200,905991184,905991178,905991179,905991162,637555707,905991210,637555705,905991214,905991215,905991216,905991217,905991218,905991219,905991220,905991221,905991222,905991223,905991224,905991225,905991226,905991227,905991228,905991229,905991230,905991231,905991232,905991233,905991234,905991235,905991236,905991237,905991238,905991239,905991240,905991241,905991242,905991243,905991244,905991245,905991246,905991247,905991251,905991252,905991253,905991254,905991255,905991256,905991257,905991258,905991259,905991260,905991261,905991262,905991263,905991264,905991265,905991266,905991267,905991268,905991269,905991270,905991271,905991272,905991273,905991274,905991275,905991276,905991277,905991278,905991279,905991280,905991281,905991282,905991283,905991284,637555829,637555830,637555831,637555832,637555833,637555834,
      905991291,637555839,33554510,33554511,637555910});
RealVariables23 :=fmi_Functions.fmiGetReal(fmi, {637555911,637555912,637555913,33554512,637555914,637555915,637555916,637555917,637555918,637555919,637555920,587202641,33554513,637555921,637555922,637555923,637555924,905991543,905991544,905991545,905991546,637555926,637555927,637555928,905991385,637555908,905991386,905991358,905991387,905991388,905991389,905991390,905991391,905991392,905991393,905991394,905991395,905991396,905991397,905991398,905991399,905991400,905991401,905991402,905991403,905991404,905991405,905991406,905991407,905991359,905991408,905991409,905991410,905991411,905991412,905991413,905991414,905991415,905991416,905991417,905991418,905991419,905991420,905991421,905991422,905991423,905991424,905991425,905991426,905991427,905991428,905991360,905991429,905991430,905991431,905991432,905991433,905991434,905991435,905991436,905991437,905991438,905991439,905991440,905991441,905991442,905991443,905991444,905991445,905991446,905991447,905991448,637555909,905991449,905991361,
      905991450,905991451,905991452,905991453,905991454});
RealVariables24 :=fmi_Functions.fmiGetReal(fmi, {905991455,905991456,905991457,905991458,905991459,905991460,905991461,905991462,905991463,905991464,905991465,905991466,905991467,905991468,905991469,905991470,905991471,637556016,905991473,905991474,637556019,637556020,905991477,905991478,637556023,637556024,637556025,637556026,637556027,637556028,637556029,637556030,637556031,637556032,637556033,637556034,905991491,905991492,905991493,905991494,637556039,637556049,905991506,905991507,905991508,905991509,905991510,905991511,905991512,905991513,637556086,905991514,637555906,637555907,637555894,637555863,637555888,637555857,637555889,637555858,905991328,905991297,637555873,637555842,905991515,905991516,637555871,637555840,637556061,637556062,637556063,33554514,33554515,33554516,637556064,637556065,637556066,637556067,905991524,905991525,905991526,905991527,905991528,637556073,905991530,905991531,905991532,905991533,905991534,905991535,905991536,905991537,905991538,905991539,905991540,
      905991541,637557402,637556091,637556092,637556093});
RealVariables25 :=fmi_Functions.fmiGetReal(fmi, {637556094,637556095,637556096,637556097,637556098,637556099,905991556,905991557,637556102,637556103,637556104,637556105,33554517,33554518,637556146,637556150,637556151,905991608,637556143,637556147,905991613,905991614,905991609,905991612,637557076,637556144,637556148,905991650,905991651,905991610,905991649,905991601,905991585,905991579,905991580,905991563,637556108,905991611,637556106,905991615,905991616,905991617,905991618,905991619,905991620,905991621,905991622,905991623,905991624,905991625,905991626,905991627,905991628,905991629,905991630,905991631,905991632,905991633,905991634,905991635,905991636,905991637,905991638,905991639,905991640,905991641,905991642,905991643,905991644,905991645,905991646,905991647,905991648,905991652,905991653,905991654,905991655,905991656,905991657,905991658,905991659,905991660,905991661,905991662,905991663,905991664,905991665,905991666,905991667,905991668,905991669,905991670,905991671,905991672,905991673,
      905991674,905991675,905991676,905991677,905991678});
RealVariables26 :=fmi_Functions.fmiGetReal(fmi, {905991679,905991680,905991681,905991682,905991683,905991684,905991685,637556230,637556231,637556232,637556233,637556234,637556235,905991692,637556240,33554519,33554520,637556312,637556313,637556314,637556315,33554521,637556316,637556317,637556318,637556319,637556320,637556321,637556322,587202650,33554522,637556323,637556324,637556325,637556326,637556327,637556328,637556330,637556331,905991788,637556309,905991789,905991759,905991790,905991791,905991792,905991793,905991794,905991795,905991796,905991797,905991798,905991799,905991800,905991801,905991802,905991803,905991804,905991805,905991806,905991807,905991808,905991809,637556310,905991810,905991760,905991811,905991812,905991813,905991814,905991815,905991816,905991817,905991818,905991819,905991820,905991821,905991822,905991823,905991824,905991825,905991826,905991827,905991828,905991829,905991830,905991831,905991761,905991832,905991833,905991834,905991835,905991836,905991837,905991838,
      905991839,905991840,905991841,905991842,905991843});
RealVariables27 :=fmi_Functions.fmiGetReal(fmi, {905991844,905991845,905991846,905991847,905991848,905991849,905991850,905991851,637556311,905991852,905991762,905991853,905991854,905991855,905991856,905991857,905991858,905991859,905991860,905991861,905991862,905991863,905991864,905991865,905991866,905991867,905991868,905991869,905991870,905991871,905991872,905991873,905991874,637556419,637556420,905991877,637556422,637556423,637556424,905991881,637556426,637556427,637556428,637556429,637556430,637556431,637556432,637556433,637556434,637556435,637556436,637556437,637556438,637556439,637556440,637556441,905991898,905991899,905991900,905991901,637556446,637556456,637556457,905991914,905991915,905991916,905991917,905991918,905991919,905991920,905991921,905991922,637556938,905991923,637556307,637556308,637556295,637556264,637556289,637556258,637556290,637556259,905991729,905991698,637556274,637556243,905991924,905991925,637556272,637556241,637556470,637556471,637556472,33554523,33554524,
      33554525,637556473,637556474,637556475,905991932});
RealVariables28 :=fmi_Functions.fmiGetReal(fmi, {905991933,905991934,905991935,905991936,637556481,905991938,905991939,905991940,905991941,905991946,905991947,905991948,905991949,905991942,905991943,905991944,905991945,637557387,637556494,637556495,637556496,637556497,637556498,637556499,905991956,905991957,905991958,905991959,637556504,637556505,637556506,637556507,33554526,33554527,637556548,637556552,637556553,905992010,637556545,637556549,905992015,905992016,905992011,905992014,637556546,637556550,905992052,905992053,905992012,905992051,905992003,905991987,905991981,905991982,905991965,637556510,905992013,637556508,905992017,905992018,905992019,905992020,905992021,905992022,905992023,905992024,905992025,905992026,905992027,905992028,905992029,905992030,905992031,905992032,905992033,905992034,905992035,905992036,905992037,905992038,905992039,905992040,905992041,905992042,905992043,905992044,905992045,905992046,905992047,905992048,905992049,905992050,905992054,905992055,905992056,
      905992057,905992058,905992059,905992060,905992061});
RealVariables29 :=fmi_Functions.fmiGetReal(fmi, {905992062,905992063,905992064,905992065,905992066,905992067,905992068,905992069,905992070,905992071,905992072,905992073,905992074,905992075,905992076,905992077,905992078,905992079,905992080,905992081,905992082,905992083,905992084,905992085,905992086,905992087,637556632,637556633,637556634,637556635,637556636,637556637,905992094,637556642,33554528,33554529,637556713,637556714,637556715,637556716,33554530,637556717,637556718,637556719,637556720,637556721,637556722,637556723,587202659,33554531,637556724,637556725,637556726,637556727,637556729,637556730,905992187,637556711,905992188,905992161,905992189,905992190,905992191,905992192,905992193,905992194,905992195,905992196,905992197,905992198,905992199,905992200,905992201,905992202,905992203,905992204,905992205,905992206,905992207,905992208,905992209,905992162,905992210,905992211,905992212,905992213,905992214,905992215,905992216,905992217,905992218,905992219,905992220,905992221,905992222,
      905992223,905992224,905992225,905992226,905992227});
RealVariables30 :=fmi_Functions.fmiGetReal(fmi, {905992228,905992229,905992230,905992163,905992231,905992232,905992233,905992234,905992235,905992236,905992237,905992238,905992239,905992240,905992241,905992242,905992243,905992244,905992245,905992246,905992247,905992248,905992249,905992250,637556712,905992251,905992164,905992252,905992253,905992254,905992255,905992256,905992257,905992258,905992259,905992260,905992261,905992262,905992263,905992264,905992265,905992266,905992267,905992268,905992269,905992270,905992271,905992272,905992273,637556818,905992275,905992276,637556821,637556822,905992279,905992280,637556825,637556826,637556827,637556828,637556829,637556830,637556831,637556832,637556833,637556834,637556835,637556836,905992293,905992294,905992295,905992296,637556841,637556851,905992308,905992309,905992310,905992311,905992312,905992313,905992314,905992315,905992316,637556709,637556710,637556697,637556666,637556691,637556660,637556692,637556661,905992131,905992100,637556676,637556645,
      905992317,905992318,637556674,637556643,637556863});
RealVariables31 :=fmi_Functions.fmiGetReal(fmi, {637556864,637556865,33554532,33554533,33554534,637556866,637556867,637556868,905992325,905992326,905992327,905992328,905992329,637556874,905992331,905992332,905992333,905992334,905992339,905992340,905992341,905992342,905992335,905992336,905992337,905992338,637556887,637556888,637556889,637556890,637556891,905992395,905992396,905992397,905992398,905992399,905992400,905992351,637556893,905992350,905992352,905992401,637556892,905992374,905992372,905992373,905992375,905992402,905992371,637556952,905992409,905992410,905992438,905992406,905992437,905992439,905992411,905992436,905992416,905992414,905992415,905992417,905992412,905992413,905992458,905992459,905992460,905992461,637557012,637557013,637557010,637557011,905992470,905992471,905992497,905992496,905992498,905992472,905992462,905992476,905992475,905992477,905992473,905992474,905992517,905992518,905992519,905992520,637557066,637557067,637557068,33554535,637557069,637557070,33554536,
      905992563,905992561,905992562,905992564,905992527});
RealVariables32 :=fmi_Functions.fmiGetReal(fmi, {905992560,905992586,905992584,905992585,905992587,905992528,905992583,905992609,905992607,905992608,905992610,905992529,905992606,905992536,905992554,905992548,905992549,905992535,637557081,905992530,637557078,637557075,637557077,905992556,905992557,905992558,905992559,637557179,637557180,637557177,637557178,905992637,905992638,905992664,905992663,905992665,905992639,905992629,905992643,905992642,905992644,905992640,905992641,905992684,905992685,905992686,905992687,637557236,905992693,905992694,905992720,905992719,905992721,905992695,905992688,905992699,905992698,905992700,905992696,905992697,905992740,905992741,905992742,905992743,637557292,905992749,905992750,905992776,905992775,905992777,905992751,905992744,905992755,905992754,905992756,905992752,905992753,905992796,905992797,905992798,905992799,905992822,905992823,905992824,905992839,905992840,905992841,905992842,33554537,33554538,33554539,637557388,637557389,637557390,33554540,
      637557391,637557396,637557392,637557393,637557399});
RealVariables33 :=fmi_Functions.fmiGetReal(fmi, {637557394,637557395,637557397,637557398,33554541,33554542,33554543,637557400,905992857,33554544,33554545,33554546,637557403,637557404,33554547,637557405,637557410,637557406,637557407,637557414,637557408,637557409,637557411,637557412,637557413,33554548,33554549,33554550,637557415,905992872,33554551,33554552,33554553,637557418,637557419,637557420,33554554,637557421,637557426,637557422,637557423,637557429,637557424,637557425,637557427,637557428,33554555,33554556,33554557,637557430,33554558,905992887,905992888,905992891,905992892,905992893,905992890,33554559,33554560,33554561,33554562,33554563,33554564,905992949,905992950,905992951,637557514,637557515,637557516,905992952,905992953,905992954,905992955,905992956,905992957,905992958,905992959,905992960,637557537,637557538,905993000,905993001,905993002,905993003,905992942,905992947,905992895,905992987,637557533,905992894,905992943,905992948,905992919,905992988,637557536,905992918,905992944,
      905992945,905992946,905993058});
RealVariables34 :=fmi_Functions.fmiGetReal(fmi, {905993082,905993106,905993052,905993076,905993100,905993053,905993077,905993101,905993037,905993061,905993085,637557528,637557529,637557530,905992961,905992962,905992963,637557580,637557604,637557628,905993108,905993109,905993110,637557508,637557509,637557510,905993005,905993006,905993007,905993008,905993009,905993010,905993011,905993012,905993013,905993014,905993015,905993016,905993017,905993018,905993019,905993020,905993021,905993022,637557573,637557574,637557575,905993032,905993033,905993034,905993035,637557660,905993117,905993118,905993136,905993114,905993135,905993137,905993119,905993134,905993124,905993122,905993123,905993125,905993120,905993121,905993156,905993157,905993158});
BooleanVariables :=fmi_Functions.fmiGetBoolean(fmi, {637552164,637552162,637552167,637552165,637552170,637552168,637552173,637552171,637552176,637552174,637552179,637552177});
  end when;
  when {pre(fmi_flip), not pre(fmi_flip)} then
    _u_old := pre(u);
  end when;
initial equation
RealDependentParameters1 = fmi_Functions.fmiGetRealwf(fmi, {100681249, 100663426, 100663427, 100669200, 100669202, 100669235, 100669236, 100669237, 100669238, 100669275, 100669276, 100669277, 100669278, 100669280, 100669281, 100669364, 100669365, 100669366, 100669367, 100669402, 100669403, 100669404, 100669406, 100669450, 100669451, 100669452, 100669453, 100669454, 100669500, 100669501, 100669502, 100669503, 100669506, 100669542, 100669543, 100669544, 100669545, 100669582, 100669583, 100669584, 100669585, 100669587, 100669588, 100669713, 100669714, 100669715, 100669774, 100669775, 100669783, 100669827, 100669828, 100669829, 100669830, 100669861, 100669862, 100669863, 100669864, 100669903, 100669904, 100669905, 100669907, 100669944, 100669945, 100669946, 100669947, 100669977, 100669978, 100669979, 100669980, 100670013, 100670014, 100670015, 100670016, 100670048, 100670049, 100670050, 100670051, 100670082, 100670083, 100670084, 100670085, 100670118, 100670119, 100670120, 100670121, 100670156, 100670157, 100670158, 100670160, 100670200, 100670201, 100670203, 100670229, 100670230, 100670231, 100670248, 100670249, 100670250, 100670267, 100670268},fmi_rdum);
RealDependentParameters2 = fmi_Functions.fmiGetRealwf(fmi, {100670269, 100670286, 100670287, 100670288, 100670305, 100670306, 100670307, 100670324, 100670325, 100670326, 100670344, 100670345, 100670346, 100670363, 100670364, 100670365, 100670382, 100670383, 100670384, 100670402, 100670403, 100670404, 100670421, 100670422, 100670423, 100670440, 100670441, 100670442, 100670459, 100670460, 100670461, 100670478, 100670479, 100670480, 100670497, 100670498, 100670499, 100670516, 100670517, 100670518, 100670535, 100670536, 100670537, 100670554, 100670555, 100670556, 100670573, 100670574, 100670575, 100670599, 100670600, 100670601, 100670602, 100670634, 100670635, 100670636, 100670637, 100670672, 100670674, 100670675, 100670676, 100670725, 100670727, 100670728, 100670729, 100670777, 100670778, 100670779, 100670820, 100670821, 100670822, 100670823, 100670855, 100670856, 100670857, 100670858, 100670887, 100670888, 100670889, 100670890, 100670921, 100670922, 100670923, 100670926, 100670927, 100670968, 100670969, 100670970, 100670971, 100670973, 100670974, 100671062, 100671063, 100671064, 100671065, 100671067, 100671068, 100671156, 100671157, 100671158},fmi_rdum);
RealDependentParameters3 = fmi_Functions.fmiGetRealwf(fmi, {100671159, 100671161, 100671162, 100671242, 100671243, 100671244, 100671245, 100671276, 100671277, 100671278, 100671279, 100671314, 100671315, 100671316, 100671317, 100671356, 100671357, 100671358, 100671360, 100671403, 100671404, 100671405, 100671407, 100671447, 100671448, 100671449, 100671450, 100671480, 100671481, 100671482, 100671483, 100671486, 100671519, 100671520, 100671521, 100671522, 100671553, 100671554, 100671555, 100671556, 100671559, 100671589, 100671590, 100671591, 100671608, 100671609, 100671610, 100671627, 100671628, 100671629, 100671646, 100671647, 100671648, 100671665, 100671666, 100671667, 100671684, 100671685, 100671686, 100671703, 100671704, 100671705, 100671722, 100671723, 100671724, 100671741, 100671742, 100671743, 100671760, 100671761, 100671762, 100671779, 100671780, 100671781, 100671798, 100671799, 100671800, 100671817, 100671818, 100671819, 100671850, 100671852, 100671854, 100671856, 100671892, 100671893, 100671894, 100672472, 100672474, 100672507, 100672508, 100672509, 100672510, 100672547, 100672548, 100672549, 100672550, 100672552, 100672553, 100672638},fmi_rdum);
RealDependentParameters4 = fmi_Functions.fmiGetRealwf(fmi, {100672639, 100672640, 100672641, 100672676, 100672677, 100672678, 100672680, 100672725, 100672726, 100672727, 100672728, 100672729, 100672780, 100672781, 100672782, 100672783, 100672786, 100672823, 100672824, 100672825, 100672826, 100672863, 100672864, 100672865, 100672866, 100672868, 100672869, 100672996, 100672997, 100672998, 100673057, 100673058, 100673066, 100673112, 100673113, 100673114, 100673115, 100673148, 100673149, 100673150, 100673151, 100673190, 100673191, 100673192, 100673194, 100673232, 100673233, 100673234, 100673235, 100673265, 100673266, 100673267, 100673268, 100673302, 100673303, 100673304, 100673305, 100673338, 100673339, 100673340, 100673341, 100673372, 100673373, 100673374, 100673375, 100673408, 100673409, 100673410, 100673411, 100673447, 100673448, 100673449, 100673451, 100673492, 100673493, 100673495, 100673521, 100673522, 100673523, 100673540, 100673541, 100673542, 100673559, 100673560, 100673561, 100673580, 100673581, 100673582, 100673600, 100673601, 100673602, 100673619, 100673620, 100673621, 100673639, 100673640, 100673641, 100673658, 100673659, 100673660},fmi_rdum);
RealDependentParameters5 = fmi_Functions.fmiGetRealwf(fmi, {100673678, 100673679, 100673680, 100673698, 100673699, 100673700, 100673717, 100673718, 100673719, 100673737, 100673738, 100673739, 100673756, 100673757, 100673758, 100673775, 100673776, 100673777, 100673794, 100673795, 100673796, 100673813, 100673814, 100673815, 100673832, 100673833, 100673834, 100673851, 100673852, 100673853, 100673870, 100673871, 100673872, 100673897, 100673898, 100673899, 100673900, 100673932, 100673933, 100673934, 100673935, 100673970, 100673972, 100673973, 100673974, 100674024, 100674026, 100674027, 100674028, 100674077, 100674078, 100674079, 100674121, 100674122, 100674123, 100674124, 100674156, 100674157, 100674158, 100674159, 100674188, 100674189, 100674190, 100674191, 100674222, 100674223, 100674224, 100674227, 100674228, 100674269, 100674270, 100674271, 100674272, 100674274, 100674275, 100674365, 100674366, 100674367, 100674368, 100674370, 100674371, 100674461, 100674462, 100674463, 100674464, 100674466, 100674467, 100674549, 100674550, 100674551, 100674552, 100674583, 100674584, 100674585, 100674586, 100674621, 100674622, 100674623, 100674624, 100674663},fmi_rdum);
RealDependentParameters6 = fmi_Functions.fmiGetRealwf(fmi, {100674664, 100674665, 100674667, 100674711, 100674712, 100674713, 100674715, 100674756, 100674757, 100674758, 100674759, 100674789, 100674790, 100674791, 100674792, 100674795, 100674828, 100674829, 100674830, 100674831, 100674862, 100674863, 100674864, 100674865, 100674868, 100674898, 100674899, 100674900, 100674917, 100674918, 100674919, 100674936, 100674937, 100674938, 100674955, 100674956, 100674957, 100674974, 100674975, 100674976, 100674993, 100674994, 100674995, 100675012, 100675013, 100675014, 100675031, 100675032, 100675033, 100675050, 100675051, 100675052, 100675069, 100675070, 100675071, 100675088, 100675089, 100675090, 100675107, 100675108, 100675109, 100675126, 100675127, 100675128, 100675159, 100675161, 100675163, 100675165, 100675204, 100675205, 100675206},fmi_rdum);
equation
  simCenter.cycleSumPort.power_in = RealVariables1[1];
  simCenter.cycleSumPort.power_out_elMech = RealVariables1[2];
  simCenter.cycleSumPort.power_aux = RealVariables1[3];
  simCenter.summary.eta_gross = RealVariables1[4];
  simCenter.summary.eta_net = RealVariables1[5];
  simCenter.summary.eta_util = RealVariables1[6];
  simCenter.summary.spec_heat_cons = RealVariables1[7];
  Turbine_HP1.h_is = RealVariables1[8];
  Turbine_HP1.P_t = RealVariables1[9];
  Turbine_HP1.eta_is = RealVariables1[10];
  Turbine_HP1.S_irr = RealVariables1[11];
  Turbine_HP1.p_l = RealVariables1[12];
  Turbine_HP1.rpm = RealVariables1[13];
  Turbine_HP1.inlet.m_flow = RealVariables1[14];
  Turbine_HP1.outlet.m_flow = RealVariables1[15];
  Turbine_HP1.outlet.h_outflow = RealVariables1[16];
  Turbine_HP1.iCom.rho_in = RealVariables1[17];
  Turbine_HP1.iCom.Delta_h_is = RealVariables1[18];
  Turbine_HP1.summary.outline.Delta_p = RealVariables1[19];
  Turbine_HP1.summary.outline.P_mech = RealVariables1[20];
  Turbine_HP1.summary.inlet.T = RealVariables1[21];
  Turbine_HP1.summary.inlet.h = RealVariables1[22];
  Turbine_HP1.summary.inlet.s = RealVariables1[23];
  Turbine_HP1.summary.inlet.steamQuality = RealVariables1[24];
  Turbine_HP1.summary.inlet.H_flow = RealVariables1[25];
  Turbine_HP1.summary.outlet.T = RealVariables1[26];
  Turbine_HP1.summary.outlet.s = RealVariables1[27];
  Turbine_HP1.summary.outlet.steamQuality = RealVariables1[28];
  Turbine_HP1.summary.outlet.H_flow = RealVariables1[29];
  Turbine_HP1.summary.outlet.rho = RealVariables1[30];
  Turbine_HP1.shaft_b.tau = RealVariables1[31];
  Turbine_HP1.eye.p = RealVariables1[32];
  Turbine_HP1.eye.h = RealVariables1[33];
  Turbine_HP1.eye.T = RealVariables1[34];
  Turbine_HP1.eye.s = RealVariables1[35];
  steamGenerator.QF_setl_ = RealVariables1[36];
  steamGenerator.h_IP = RealVariables1[37];
  steamGenerator.p_IP = RealVariables1[38];
  steamGenerator.mass_IP = RealVariables1[39];
  steamGenerator.drhodt_IP = RealVariables1[40];
  steamGenerator.h_HP = RealVariables1[41];
  steamGenerator.p_HP = RealVariables1[42];
  steamGenerator.mass_HP = RealVariables1[43];
  steamGenerator.drhodt_HP = RealVariables1[44];
  steamGenerator.Q_flow_HP = RealVariables1[45];
  steamGenerator.Q_flow_IP = RealVariables1[46];
  steamGenerator.h_evap = RealVariables1[47];
  steamGenerator.reheat_out.m_flow = RealVariables1[48];
  steamGenerator.reheat_out.h_outflow = RealVariables1[49];
  steamGenerator.feedwater.m_flow = RealVariables1[50];
  steamGenerator.reheat_in.m_flow = RealVariables1[51];
  steamGenerator.heatRelease.'x[1]' = RealVariables1[52];
  steamGenerator.heatRelease.'x_scaled[1]' = RealVariables1[53];
  steamGenerator.heatRelease.'x_scaled[2]' = RealVariables1[54];
  steamGenerator.convert2PressureDrop_HP.'u[1]' = RealVariables1[55];
  steamGenerator.convert2PressureDrop_HP.'y[1]' = RealVariables1[56];
  steamGenerator.liveSteam.d = RealVariables1[57];
  steamGenerator.liveSteam.s = RealVariables1[58];
  steamGenerator.liveSteam.T = RealVariables1[59];
  steamGenerator.liveSteam.q = RealVariables1[60];
  steamGenerator.liveSteam.cp = RealVariables1[61];
  steamGenerator.liveSteam.cv = RealVariables1[62];
  steamGenerator.liveSteam.beta = RealVariables1[63];
  steamGenerator.liveSteam.kappa = RealVariables1[64];
  steamGenerator.liveSteam.w = RealVariables1[65];
  steamGenerator.liveSteam.drhodh_pxi = RealVariables1[66];
  steamGenerator.liveSteam.drhodp_hxi = RealVariables1[67];
  steamGenerator.liveSteam.gamma = RealVariables1[68];
  steamGenerator.liveSteam.VLE.d_l = RealVariables1[69];
  steamGenerator.liveSteam.VLE.d_v = RealVariables1[70];
  steamGenerator.liveSteam.VLE.h_l = RealVariables1[71];
  steamGenerator.liveSteam.VLE.h_v = RealVariables1[72];
  steamGenerator.liveSteam.VLE.p_l = RealVariables1[73];
  steamGenerator.liveSteam.VLE.p_v = RealVariables1[74];
  steamGenerator.liveSteam.VLE.s_l = RealVariables1[75];
  steamGenerator.liveSteam.VLE.s_v = RealVariables1[76];
  steamGenerator.liveSteam.VLE.T_l = RealVariables1[77];
  steamGenerator.liveSteam.VLE.T_v = RealVariables1[78];
  steamGenerator.reheatedSteam.d = RealVariables1[79];
  steamGenerator.reheatedSteam.s = RealVariables1[80];
  steamGenerator.reheatedSteam.T = RealVariables1[81];
  steamGenerator.reheatedSteam.q = RealVariables1[82];
  steamGenerator.reheatedSteam.cp = RealVariables1[83];
  steamGenerator.reheatedSteam.cv = RealVariables1[84];
  steamGenerator.reheatedSteam.beta = RealVariables1[85];
  steamGenerator.reheatedSteam.kappa = RealVariables1[86];
  steamGenerator.reheatedSteam.w = RealVariables1[87];
  steamGenerator.reheatedSteam.drhodh_pxi = RealVariables1[88];
  steamGenerator.reheatedSteam.drhodp_hxi = RealVariables1[89];
  steamGenerator.reheatedSteam.gamma = RealVariables1[90];
  steamGenerator.reheatedSteam.VLE.d_l = RealVariables1[91];
  steamGenerator.reheatedSteam.VLE.d_v = RealVariables1[92];
  steamGenerator.reheatedSteam.VLE.h_l = RealVariables1[93];
  steamGenerator.reheatedSteam.VLE.h_v = RealVariables1[94];
  steamGenerator.reheatedSteam.VLE.p_l = RealVariables1[95];
  steamGenerator.reheatedSteam.VLE.p_v = RealVariables1[96];
  steamGenerator.reheatedSteam.VLE.s_l = RealVariables1[97];
  steamGenerator.reheatedSteam.VLE.s_v = RealVariables1[98];
  steamGenerator.reheatedSteam.VLE.T_l = RealVariables1[99];
  steamGenerator.reheatedSteam.VLE.T_v = RealVariables1[100];
  steamGenerator.convert2PressureDrop_IP.'u[1]' = RealVariables2[1];
  steamGenerator.convert2PressureDrop_IP.'y[1]' = RealVariables2[2];
  steamGenerator.convert2HPFiring.'y[1]' = RealVariables2[3];
  steamGenerator.IPInjection.p = RealVariables2[4];
  steamGenerator.HPInjection.p = RealVariables2[5];
  steamGenerator.calculateEfficiency.'y[1]' = RealVariables2[6];
  steamGenerator.eye_LS.p = RealVariables2[7];
  steamGenerator.eye_LS.h = RealVariables2[8];
  steamGenerator.eye_LS.T = RealVariables2[9];
  steamGenerator.eye_LS.s = RealVariables2[10];
  steamGenerator.eye_RH.p = RealVariables2[11];
  steamGenerator.eye_RH.h = RealVariables2[12];
  steamGenerator.eye_RH.m_flow = RealVariables2[13];
  steamGenerator.eye_RH.T = RealVariables2[14];
  steamGenerator.eye_RH.s = RealVariables2[15];
  steamGenerator.connected2SimCenter.powerIn = RealVariables2[16];
  Turbine_IP1.h_is = RealVariables2[17];
  Turbine_IP1.P_t = RealVariables2[18];
  Turbine_IP1.p_out = RealVariables2[19];
  Turbine_IP1.eta_is = RealVariables2[20];
  Turbine_IP1.S_irr = RealVariables2[21];
  Turbine_IP1.p_l = RealVariables2[22];
  Turbine_IP1.rpm = RealVariables2[23];
  Turbine_IP1.outlet.h_outflow = RealVariables2[24];
  Turbine_IP1.iCom.rho_in = RealVariables2[25];
  Turbine_IP1.iCom.Delta_h_is = RealVariables2[26];
  Turbine_IP1.summary.outline.Delta_p = RealVariables2[27];
  Turbine_IP1.summary.outline.P_mech = RealVariables2[28];
  Turbine_IP1.summary.inlet.T = RealVariables2[29];
  Turbine_IP1.summary.inlet.s = RealVariables2[30];
  Turbine_IP1.summary.inlet.steamQuality = RealVariables2[31];
  Turbine_IP1.summary.inlet.H_flow = RealVariables2[32];
  Turbine_IP1.summary.outlet.T = RealVariables2[33];
  Turbine_IP1.summary.outlet.s = RealVariables2[34];
  Turbine_IP1.summary.outlet.steamQuality = RealVariables2[35];
  Turbine_IP1.summary.outlet.H_flow = RealVariables2[36];
  Turbine_IP1.summary.outlet.rho = RealVariables2[37];
  Turbine_IP1.shaft_a.tau = RealVariables2[38];
  Turbine_IP1.shaft_b.tau = RealVariables2[39];
  Turbine_IP1.eye.p = RealVariables2[40];
  Turbine_IP1.eye.h = RealVariables2[41];
  Turbine_IP1.eye.T = RealVariables2[42];
  Turbine_IP1.eye.s = RealVariables2[43];
  Turbine_LP4.h_is = RealVariables2[44];
  Turbine_LP4.P_t = RealVariables2[45];
  Turbine_LP4.p_out = RealVariables2[46];
  Turbine_LP4.eta_is = RealVariables2[47];
  Turbine_LP4.S_irr = RealVariables2[48];
  Turbine_LP4.p_l = RealVariables2[49];
  Turbine_LP4.rpm = RealVariables2[50];
  Turbine_LP4.inlet.m_flow = RealVariables2[51];
  Turbine_LP4.inlet.h_outflow = RealVariables2[52];
  Turbine_LP4.outlet.m_flow = RealVariables2[53];
  Turbine_LP4.outlet.h_outflow = RealVariables2[54];
  Turbine_LP4.iCom.rho_in = RealVariables2[55];
  Turbine_LP4.iCom.Delta_h_is = RealVariables2[56];
  Turbine_LP4.summary.outline.Delta_p = RealVariables2[57];
  Turbine_LP4.summary.outline.P_mech = RealVariables2[58];
  Turbine_LP4.summary.inlet.T = RealVariables2[59];
  Turbine_LP4.summary.inlet.s = RealVariables2[60];
  Turbine_LP4.summary.inlet.steamQuality = RealVariables2[61];
  Turbine_LP4.summary.inlet.H_flow = RealVariables2[62];
  Turbine_LP4.summary.outlet.T = RealVariables2[63];
  Turbine_LP4.summary.outlet.s = RealVariables2[64];
  Turbine_LP4.summary.outlet.steamQuality = RealVariables2[65];
  Turbine_LP4.summary.outlet.H_flow = RealVariables2[66];
  Turbine_LP4.summary.outlet.rho = RealVariables2[67];
  Turbine_LP4.shaft_a.tau = RealVariables2[68];
  Turbine_LP4.shaft_b.tau = RealVariables2[69];
  Turbine_LP4.eye.p = RealVariables2[70];
  Turbine_LP4.eye.h = RealVariables2[71];
  Turbine_LP4.eye.T = RealVariables2[72];
  Turbine_LP4.eye.s = RealVariables2[73];
  Pump_FW.Delta_p = RealVariables2[74];
  Pump_FW.V_flow = RealVariables2[75];
  Pump_FW.P_fluid = RealVariables2[76];
  Pump_FW.P_drive = RealVariables2[77];
  Pump_FW.inlet.m_flow = RealVariables2[78];
  Pump_FW.outlet.m_flow = RealVariables2[79];
  Pump_FW.outlet.p = RealVariables2[80];
  Pump_FW.outlet.h_outflow = RealVariables2[81];
  Pump_FW.eye.p = RealVariables2[82];
  Pump_FW.eye.h = RealVariables2[83];
  Pump_FW.eye.T = RealVariables2[84];
  Pump_FW.eye.s = RealVariables2[85];
  Pump_FW.summary.outline.head = RealVariables2[86];
  Pump_FW.summary.outline.NPSHa = RealVariables2[87];
  Pump_FW.summary.inlet.T = RealVariables2[88];
  Pump_FW.summary.inlet.h = RealVariables2[89];
  Pump_FW.summary.inlet.s = RealVariables2[90];
  Pump_FW.summary.inlet.steamQuality = RealVariables2[91];
  Pump_FW.summary.inlet.H_flow = RealVariables2[92];
  Pump_FW.summary.inlet.rho = RealVariables2[93];
  Pump_FW.summary.outlet.T = RealVariables2[94];
  Pump_FW.summary.outlet.h = RealVariables2[95];
  Pump_FW.summary.outlet.s = RealVariables2[96];
  Pump_FW.summary.outlet.steamQuality = RealVariables2[97];
  Pump_FW.summary.outlet.H_flow = RealVariables2[98];
  Pump_FW.summary.outlet.rho = RealVariables2[99];
  condenser.level = RealVariables2[100];
  condenser.Out2.m_flow = RealVariables3[1];
  condenser.Out1.m_flow = RealVariables3[2];
  condenser.Out1.p = RealVariables3[3];
  condenser.Out1.h_outflow = RealVariables3[4];
  condenser.tubes.p = RealVariables3[5];
  condenser.tubes.h = RealVariables3[6];
  condenser.tubes.mass = RealVariables3[7];
  condenser.tubes.heat.T = RealVariables3[8];
  condenser.tubes.heat.Q_flow = RealVariables3[9];
  condenser.tubes.summary.inlet.T = RealVariables3[10];
  condenser.tubes.summary.inlet.h = RealVariables3[11];
  condenser.tubes.summary.inlet.s = RealVariables3[12];
  condenser.tubes.summary.inlet.steamQuality = RealVariables3[13];
  condenser.tubes.summary.inlet.H_flow = RealVariables3[14];
  condenser.tubes.summary.inlet.rho = RealVariables3[15];
  condenser.tubes.summary.outlet.m_flow = RealVariables3[16];
  condenser.tubes.summary.outlet.T = RealVariables3[17];
  condenser.tubes.summary.outlet.h = RealVariables3[18];
  condenser.tubes.summary.outlet.s = RealVariables3[19];
  condenser.tubes.summary.outlet.steamQuality = RealVariables3[20];
  condenser.tubes.summary.outlet.H_flow = RealVariables3[21];
  condenser.tubes.summary.outlet.rho = RealVariables3[22];
  condenser.tubes.summary.fluid.T = RealVariables3[23];
  condenser.tubes.summary.fluid.T_sat = RealVariables3[24];
  condenser.tubes.summary.fluid.h_bub = RealVariables3[25];
  condenser.tubes.summary.fluid.h_dew = RealVariables3[26];
  condenser.tubes.summary.fluid.s = RealVariables3[27];
  condenser.tubes.summary.fluid.steamQuality = RealVariables3[28];
  condenser.tubes.summary.fluid.H = RealVariables3[29];
  condenser.tubes.summary.fluid.rho = RealVariables3[30];
  condenser.tubes.fluidIn.cp = RealVariables3[31];
  condenser.tubes.fluidIn.cv = RealVariables3[32];
  condenser.tubes.fluidIn.beta = RealVariables3[33];
  condenser.tubes.fluidIn.kappa = RealVariables3[34];
  condenser.tubes.fluidIn.w = RealVariables3[35];
  condenser.tubes.fluidIn.drhodh_pxi = RealVariables3[36];
  condenser.tubes.fluidIn.drhodp_hxi = RealVariables3[37];
  condenser.tubes.fluidIn.gamma = RealVariables3[38];
  condenser.tubes.fluidIn.transp.Pr = RealVariables3[39];
  condenser.tubes.fluidIn.transp.lambda = RealVariables3[40];
  condenser.tubes.fluidIn.transp.eta = RealVariables3[41];
  condenser.tubes.fluidIn.transp.sigma = RealVariables3[42];
  condenser.tubes.fluidIn.VLE.d_l = RealVariables3[43];
  condenser.tubes.fluidIn.VLE.d_v = RealVariables3[44];
  condenser.tubes.fluidIn.VLE.h_l = RealVariables3[45];
  condenser.tubes.fluidIn.VLE.h_v = RealVariables3[46];
  condenser.tubes.fluidIn.VLE.p_l = RealVariables3[47];
  condenser.tubes.fluidIn.VLE.p_v = RealVariables3[48];
  condenser.tubes.fluidIn.VLE.s_l = RealVariables3[49];
  condenser.tubes.fluidIn.VLE.s_v = RealVariables3[50];
  condenser.tubes.fluidIn.VLE.T_l = RealVariables3[51];
  condenser.tubes.fluidIn.VLE.T_v = RealVariables3[52];
  condenser.tubes.fluidIn.VLEAdditional.cp_l = RealVariables3[53];
  condenser.tubes.fluidIn.VLEAdditional.cp_v = RealVariables3[54];
  condenser.tubes.fluidIn.VLEAdditional.beta_l = RealVariables3[55];
  condenser.tubes.fluidIn.VLEAdditional.beta_v = RealVariables3[56];
  condenser.tubes.fluidIn.VLEAdditional.kappa_l = RealVariables3[57];
  condenser.tubes.fluidIn.VLEAdditional.kappa_v = RealVariables3[58];
  condenser.tubes.fluidIn.VLETransp.Pr_l = RealVariables3[59];
  condenser.tubes.fluidIn.VLETransp.Pr_v = RealVariables3[60];
  condenser.tubes.fluidIn.VLETransp.lambda_l = RealVariables3[61];
  condenser.tubes.fluidIn.VLETransp.lambda_v = RealVariables3[62];
  condenser.tubes.fluidIn.VLETransp.eta_l = RealVariables3[63];
  condenser.tubes.fluidIn.VLETransp.eta_v = RealVariables3[64];
  condenser.tubes.fluidOut.cp = RealVariables3[65];
  condenser.tubes.fluidOut.cv = RealVariables3[66];
  condenser.tubes.fluidOut.beta = RealVariables3[67];
  condenser.tubes.fluidOut.kappa = RealVariables3[68];
  condenser.tubes.fluidOut.w = RealVariables3[69];
  condenser.tubes.fluidOut.drhodh_pxi = RealVariables3[70];
  condenser.tubes.fluidOut.drhodp_hxi = RealVariables3[71];
  condenser.tubes.fluidOut.gamma = RealVariables3[72];
  condenser.tubes.fluidOut.transp.Pr = RealVariables3[73];
  condenser.tubes.fluidOut.transp.lambda = RealVariables3[74];
  condenser.tubes.fluidOut.transp.eta = RealVariables3[75];
  condenser.tubes.fluidOut.transp.sigma = RealVariables3[76];
  condenser.tubes.fluidOut.VLE.d_l = RealVariables3[77];
  condenser.tubes.fluidOut.VLE.d_v = RealVariables3[78];
  condenser.tubes.fluidOut.VLE.h_l = RealVariables3[79];
  condenser.tubes.fluidOut.VLE.h_v = RealVariables3[80];
  condenser.tubes.fluidOut.VLE.p_l = RealVariables3[81];
  condenser.tubes.fluidOut.VLE.p_v = RealVariables3[82];
  condenser.tubes.fluidOut.VLE.s_l = RealVariables3[83];
  condenser.tubes.fluidOut.VLE.s_v = RealVariables3[84];
  condenser.tubes.fluidOut.VLE.T_l = RealVariables3[85];
  condenser.tubes.fluidOut.VLE.T_v = RealVariables3[86];
  condenser.tubes.fluidOut.VLEAdditional.cp_l = RealVariables3[87];
  condenser.tubes.fluidOut.VLEAdditional.cp_v = RealVariables3[88];
  condenser.tubes.fluidOut.VLEAdditional.beta_l = RealVariables3[89];
  condenser.tubes.fluidOut.VLEAdditional.beta_v = RealVariables3[90];
  condenser.tubes.fluidOut.VLEAdditional.kappa_l = RealVariables3[91];
  condenser.tubes.fluidOut.VLEAdditional.kappa_v = RealVariables3[92];
  condenser.tubes.fluidOut.VLETransp.Pr_l = RealVariables3[93];
  condenser.tubes.fluidOut.VLETransp.Pr_v = RealVariables3[94];
  condenser.tubes.fluidOut.VLETransp.lambda_l = RealVariables3[95];
  condenser.tubes.fluidOut.VLETransp.lambda_v = RealVariables3[96];
  condenser.tubes.fluidOut.VLETransp.eta_l = RealVariables3[97];
  condenser.tubes.fluidOut.VLETransp.eta_v = RealVariables3[98];
  condenser.tubes.heattransfer.Delta_T_wi = RealVariables3[99];
  condenser.tubes.heattransfer.Delta_T_wo = RealVariables3[100];
  condenser.tubes.heattransfer.Delta_T_mean = RealVariables4[1];
  condenser.tubes.heattransfer.Delta_T_U = RealVariables4[2];
  condenser.tubes.heattransfer.Delta_T_L = RealVariables4[3];
  condenser.tubes.heattransfer.alpha = RealVariables4[4];
  condenser.tubes.heattransfer.alpha_lam = RealVariables4[5];
  condenser.tubes.heattransfer.alpha_turb = RealVariables4[6];
  condenser.tubes.heattransfer.HR = RealVariables4[7];
  condenser.tubes.heattransfer.failureStatus = RealVariables4[8];
  condenser.tubes.heattransfer.velocity = RealVariables4[9];
  condenser.tubes.heattransfer.Re = RealVariables4[10];
  condenser.tubes.heattransfer.Pr = RealVariables4[11];
  condenser.shell.h_liq = RealVariables4[12];
  condenser.shell.h_vap = RealVariables4[13];
  condenser.shell.drho_liqdt = RealVariables4[14];
  condenser.shell.drho_vapdt = RealVariables4[15];
  condenser.shell.volume_liq = RealVariables4[16];
  condenser.shell._volume_liq_der = RealVariables4[17];
  condenser.shell.volume_vap = RealVariables4[18];
  condenser.shell.m_flow_cond = RealVariables4[19];
  condenser.shell.m_flow_evap = RealVariables4[20];
  condenser.shell.Q_flow_phases = RealVariables4[21];
  condenser.shell.'Q_flow[1]' = RealVariables4[22];
  condenser.shell.'Q_flow[2]' = RealVariables4[23];
  condenser.shell.mass_liq = RealVariables4[24];
  condenser.shell.mass_vap = RealVariables4[25];
  condenser.shell._p_liq_der = RealVariables4[26];
  condenser.shell.p_vap = RealVariables4[27];
  condenser.shell.'H_flow_inliq[1]' = RealVariables4[28];
  condenser.shell.'H_flow_inliq[2]' = RealVariables4[29];
  condenser.shell.'H_flow_invap[1]' = RealVariables4[30];
  condenser.shell.'H_flow_invap[2]' = RealVariables4[31];
  condenser.shell.'H_flow_outliq[1]' = RealVariables4[32];
  condenser.shell.'H_flow_outvap[1]' = RealVariables4[33];
  condenser.shell.'inlet[2]'.m_flow = RealVariables4[34];
  condenser.shell.'inlet[2]'.p = RealVariables4[35];
  condenser.shell.'inlet[2]'.h_outflow = RealVariables4[36];
  condenser.shell.'inlet[3]'.p = RealVariables4[37];
  condenser.shell.'inlet[3]'.h_outflow = RealVariables4[38];
  condenser.shell.'heat[1]'.T = RealVariables4[39];
  condenser.shell.'heat[1]'.Q_flow = RealVariables4[40];
  condenser.shell.'heat[2]'.Q_flow = RealVariables4[41];
  condenser.shell.'fluidIn[1]'.d = RealVariables4[42];
  condenser.shell.'fluidIn[1]'.h = RealVariables4[43];
  condenser.shell.'fluidIn[1]'.s = RealVariables4[44];
  condenser.shell.'fluidIn[1]'.T = RealVariables4[45];
  condenser.shell.'fluidIn[1]'.q = RealVariables4[46];
  condenser.shell.'fluidIn[1]'.cp = RealVariables4[47];
  condenser.shell.'fluidIn[1]'.cv = RealVariables4[48];
  condenser.shell.'fluidIn[1]'.beta = RealVariables4[49];
  condenser.shell.'fluidIn[1]'.kappa = RealVariables4[50];
  condenser.shell.'fluidIn[1]'.w = RealVariables4[51];
  condenser.shell.'fluidIn[1]'.drhodh_pxi = RealVariables4[52];
  condenser.shell.'fluidIn[1]'.drhodp_hxi = RealVariables4[53];
  condenser.shell.'fluidIn[1]'.gamma = RealVariables4[54];
  condenser.shell.'fluidIn[1]'.VLE.d_l = RealVariables4[55];
  condenser.shell.'fluidIn[1]'.VLE.d_v = RealVariables4[56];
  condenser.shell.'fluidIn[1]'.VLE.h_l = RealVariables4[57];
  condenser.shell.'fluidIn[1]'.VLE.h_v = RealVariables4[58];
  condenser.shell.'fluidIn[1]'.VLE.p_l = RealVariables4[59];
  condenser.shell.'fluidIn[1]'.VLE.p_v = RealVariables4[60];
  condenser.shell.'fluidIn[1]'.VLE.s_l = RealVariables4[61];
  condenser.shell.'fluidIn[1]'.VLE.s_v = RealVariables4[62];
  condenser.shell.'fluidIn[1]'.VLE.T_l = RealVariables4[63];
  condenser.shell.'fluidIn[1]'.VLE.T_v = RealVariables4[64];
  condenser.shell.'fluidIn[2]'.d = RealVariables4[65];
  condenser.shell.'fluidIn[2]'.h = RealVariables4[66];
  condenser.shell.'fluidIn[2]'.s = RealVariables4[67];
  condenser.shell.'fluidIn[2]'.T = RealVariables4[68];
  condenser.shell.'fluidIn[2]'.q = RealVariables4[69];
  condenser.shell.'fluidIn[2]'.cp = RealVariables4[70];
  condenser.shell.'fluidIn[2]'.cv = RealVariables4[71];
  condenser.shell.'fluidIn[2]'.beta = RealVariables4[72];
  condenser.shell.'fluidIn[2]'.kappa = RealVariables4[73];
  condenser.shell.'fluidIn[2]'.w = RealVariables4[74];
  condenser.shell.'fluidIn[2]'.drhodh_pxi = RealVariables4[75];
  condenser.shell.'fluidIn[2]'.drhodp_hxi = RealVariables4[76];
  condenser.shell.'fluidIn[2]'.gamma = RealVariables4[77];
  condenser.shell.'fluidIn[2]'.VLE.d_l = RealVariables4[78];
  condenser.shell.'fluidIn[2]'.VLE.d_v = RealVariables4[79];
  condenser.shell.'fluidIn[2]'.VLE.h_l = RealVariables4[80];
  condenser.shell.'fluidIn[2]'.VLE.h_v = RealVariables4[81];
  condenser.shell.'fluidIn[2]'.VLE.p_l = RealVariables4[82];
  condenser.shell.'fluidIn[2]'.VLE.p_v = RealVariables4[83];
  condenser.shell.'fluidIn[2]'.VLE.s_l = RealVariables4[84];
  condenser.shell.'fluidIn[2]'.VLE.s_v = RealVariables4[85];
  condenser.shell.'fluidIn[2]'.VLE.T_l = RealVariables4[86];
  condenser.shell.'fluidIn[2]'.VLE.T_v = RealVariables4[87];
  condenser.shell.'fluidIn[3]'.d = RealVariables4[88];
  condenser.shell.'fluidIn[3]'.s = RealVariables4[89];
  condenser.shell.'fluidIn[3]'.T = RealVariables4[90];
  condenser.shell.'fluidIn[3]'.q = RealVariables4[91];
  condenser.shell.'fluidIn[3]'.cp = RealVariables4[92];
  condenser.shell.'fluidIn[3]'.cv = RealVariables4[93];
  condenser.shell.'fluidIn[3]'.beta = RealVariables4[94];
  condenser.shell.'fluidIn[3]'.kappa = RealVariables4[95];
  condenser.shell.'fluidIn[3]'.w = RealVariables4[96];
  condenser.shell.'fluidIn[3]'.drhodh_pxi = RealVariables4[97];
  condenser.shell.'fluidIn[3]'.drhodp_hxi = RealVariables4[98];
  condenser.shell.'fluidIn[3]'.gamma = RealVariables4[99];
  condenser.shell.'fluidIn[3]'.VLE.d_l = RealVariables4[100];
  condenser.shell.'fluidIn[3]'.VLE.d_v = RealVariables5[1];
  condenser.shell.'fluidIn[3]'.VLE.h_l = RealVariables5[2];
  condenser.shell.'fluidIn[3]'.VLE.h_v = RealVariables5[3];
  condenser.shell.'fluidIn[3]'.VLE.p_l = RealVariables5[4];
  condenser.shell.'fluidIn[3]'.VLE.p_v = RealVariables5[5];
  condenser.shell.'fluidIn[3]'.VLE.s_l = RealVariables5[6];
  condenser.shell.'fluidIn[3]'.VLE.s_v = RealVariables5[7];
  condenser.shell.'fluidIn[3]'.VLE.T_l = RealVariables5[8];
  condenser.shell.'fluidIn[3]'.VLE.T_v = RealVariables5[9];
  condenser.shell.'fluidOut[1]'.d = RealVariables5[10];
  condenser.shell.'fluidOut[1]'.h = RealVariables5[11];
  condenser.shell.'fluidOut[1]'.s = RealVariables5[12];
  condenser.shell.'fluidOut[1]'.T = RealVariables5[13];
  condenser.shell.'fluidOut[1]'.q = RealVariables5[14];
  condenser.shell.'fluidOut[1]'.cp = RealVariables5[15];
  condenser.shell.'fluidOut[1]'.cv = RealVariables5[16];
  condenser.shell.'fluidOut[1]'.beta = RealVariables5[17];
  condenser.shell.'fluidOut[1]'.kappa = RealVariables5[18];
  condenser.shell.'fluidOut[1]'.w = RealVariables5[19];
  condenser.shell.'fluidOut[1]'.drhodh_pxi = RealVariables5[20];
  condenser.shell.'fluidOut[1]'.drhodp_hxi = RealVariables5[21];
  condenser.shell.'fluidOut[1]'.gamma = RealVariables5[22];
  condenser.shell.'fluidOut[1]'.VLE.d_l = RealVariables5[23];
  condenser.shell.'fluidOut[1]'.VLE.d_v = RealVariables5[24];
  condenser.shell.'fluidOut[1]'.VLE.h_l = RealVariables5[25];
  condenser.shell.'fluidOut[1]'.VLE.h_v = RealVariables5[26];
  condenser.shell.'fluidOut[1]'.VLE.p_l = RealVariables5[27];
  condenser.shell.'fluidOut[1]'.VLE.p_v = RealVariables5[28];
  condenser.shell.'fluidOut[1]'.VLE.s_l = RealVariables5[29];
  condenser.shell.'fluidOut[1]'.VLE.s_v = RealVariables5[30];
  condenser.shell.'fluidOut[1]'.VLE.T_l = RealVariables5[31];
  condenser.shell.'fluidOut[1]'.VLE.T_v = RealVariables5[32];
  condenser.shell.heattransfer.'Delta_T_mean[1]' = RealVariables5[33];
  condenser.shell.heattransfer.'Delta_T_mean[2]' = RealVariables5[34];
  condenser.shell.heattransfer.Q_flow_tot = RealVariables5[35];
  condenser.shell.phaseBorder.'Delta_p_geo_in[1]' = RealVariables5[36];
  condenser.shell.phaseBorder.'Delta_p_geo_in[2]' = RealVariables5[37];
  condenser.shell.phaseBorder.'Delta_p_geo_in[3]' = RealVariables5[38];
  condenser.shell.phaseBorder.'Delta_p_geo_out[1]' = RealVariables5[39];
  condenser.shell.phaseBorder.'zoneAlloc_in[1]' = RealVariables5[40];
  condenser.shell.phaseBorder.'zoneAlloc_in[2]' = RealVariables5[41];
  condenser.shell.phaseBorder.'zoneAlloc_in[3]' = RealVariables5[42];
  condenser.shell.phaseBorder.'zoneAlloc_out[1]' = RealVariables5[43];
  condenser.shell.phaseBorder.level_abs = RealVariables5[44];
  condenser.shell.phaseBorder.'m_flow_inliq[1]' = RealVariables5[45];
  condenser.shell.phaseBorder.'m_flow_inliq[2]' = RealVariables5[46];
  condenser.shell.phaseBorder.'m_flow_invap[1]' = RealVariables5[47];
  condenser.shell.phaseBorder.'m_flow_invap[2]' = RealVariables5[48];
  condenser.shell.phaseBorder.'m_flow_outliq[1]' = RealVariables5[49];
  condenser.shell.phaseBorder.'m_flow_outvap[1]' = RealVariables5[50];
  condenser.shell.phaseBorder.'H_flow_inliq[1]' = RealVariables5[51];
  condenser.shell.phaseBorder.'H_flow_inliq[2]' = RealVariables5[52];
  condenser.shell.phaseBorder.'H_flow_invap[1]' = RealVariables5[53];
  condenser.shell.phaseBorder.'H_flow_invap[2]' = RealVariables5[54];
  condenser.shell.phaseBorder.'H_flow_outliq[1]' = RealVariables5[55];
  condenser.shell.phaseBorder.'H_flow_outvap[1]' = RealVariables5[56];
  condenser.shell.phaseBorder.'rho[1]' = RealVariables5[57];
  condenser.shell.phaseBorder.'rho[2]' = RealVariables5[58];
  condenser.shell.phaseBorder.'steamQuality_in[1]' = RealVariables5[59];
  condenser.shell.phaseBorder.'steamQuality_in[2]' = RealVariables5[60];
  condenser.shell.phaseBorder.'steamQuality_in[3]' = RealVariables5[61];
  condenser.shell.phaseBorder.'steamQuality_out[1]' = RealVariables5[62];
  condenser.shell.phaseBorder.A_hor_act = RealVariables5[63];
  condenser.shell.pressureLoss.'Delta_p[1]' = RealVariables5[64];
  condenser.shell.pressureLoss.'Delta_p[2]' = RealVariables5[65];
  condenser.shell.summary.outline.'A_heat[1]' = RealVariables5[66];
  condenser.shell.summary.outline.'A_heat[2]' = RealVariables5[67];
  condenser.shell.summary.outline.'yps[2]' = RealVariables5[68];
  condenser.shell.summary.outline.fluidMass = RealVariables5[69];
  condenser.shell.summary.outline.H_tot = RealVariables5[70];
  condenser.shell.summary.outline.Q_flow_tot = RealVariables5[71];
  condenser.shell.summary.outline.Delta_p = RealVariables5[72];
  condenser.shell.summary.'inlet[1]'.H_flow = RealVariables5[73];
  condenser.shell.summary.'inlet[2]'.H_flow = RealVariables5[74];
  condenser.shell.summary.'outlet[1]'.m_flow = RealVariables5[75];
  condenser.shell.summary.'outlet[1]'.H_flow = RealVariables5[76];
  condenser.shell.summary.fluid.'T[1]' = RealVariables5[77];
  condenser.shell.summary.fluid.'T[2]' = RealVariables5[78];
  condenser.shell.summary.fluid.'T_sat[1]' = RealVariables5[79];
  condenser.shell.summary.fluid.'T_sat[2]' = RealVariables5[80];
  condenser.shell.summary.fluid.'h_bub[1]' = RealVariables5[81];
  condenser.shell.summary.fluid.'h_bub[2]' = RealVariables5[82];
  condenser.shell.summary.fluid.'h_dew[1]' = RealVariables5[83];
  condenser.shell.summary.fluid.'h_dew[2]' = RealVariables5[84];
  condenser.shell.summary.fluid.'s[1]' = RealVariables5[85];
  condenser.shell.summary.fluid.'s[2]' = RealVariables5[86];
  condenser.shell.summary.fluid.'steamQuality[1]' = RealVariables5[87];
  condenser.shell.summary.fluid.'steamQuality[2]' = RealVariables5[88];
  condenser.shell.summary.fluid.'H[1]' = RealVariables5[89];
  condenser.shell.summary.fluid.'H[2]' = RealVariables5[90];
  condenser.shell.summary.fluid.'rho[1]' = RealVariables5[91];
  condenser.shell.summary.fluid.'rho[2]' = RealVariables5[92];
  condenser.wall.'T[1]' = RealVariables5[93];
  condenser.wall.'T[2]' = RealVariables5[94];
  condenser.wall.'T[3]' = RealVariables5[95];
  condenser.wall.'U[1]' = RealVariables5[96];
  condenser.wall.'U[2]' = RealVariables5[97];
  condenser.wall.'U[3]' = RealVariables5[98];
  condenser.wall.'Q_flow[1]' = RealVariables5[99];
  condenser.wall.'Q_flow[2]' = RealVariables5[100];
  condenser.wall.'Q_flow[3]' = RealVariables6[1];
  condenser.wall.'Q_flow[4]' = RealVariables6[2];
  condenser.wall.'Tdr[1]' = RealVariables6[3];
  condenser.wall.'Tdr[2]' = RealVariables6[4];
  condenser.wall.'Tdr[3]' = RealVariables6[5];
  condenser.wall.'Tdr[4]' = RealVariables6[6];
  condenser.wall.T_mean = RealVariables6[7];
  condenser.wall.outerPhase.Q_flow = RealVariables6[8];
  condenser.summary.outline.Q_flow = RealVariables6[9];
  condenser.summary.outline.Delta_T_in = RealVariables6[10];
  condenser.summary.outline.Delta_T_out = RealVariables6[11];
  condenser.summary.outline.kA = RealVariables6[12];
  condenser.'eye_int2[1]'.p = RealVariables6[13];
  condenser.'eye_int2[1]'.h = RealVariables6[14];
  condenser.'eye_int2[1]'.T = RealVariables6[15];
  condenser.'eye_int2[1]'.s = RealVariables6[16];
  condenser.'eye_int1[1]'.p = RealVariables6[17];
  condenser.'eye_int1[1]'.h = RealVariables6[18];
  condenser.'eye_int1[1]'.T = RealVariables6[19];
  condenser.'eye_int1[1]'.s = RealVariables6[20];
  feedWaterTank.feedwater.m_flow = RealVariables6[21];
  feedWaterTank.feedwater.p = RealVariables6[22];
  feedWaterTank.feedwater.h_outflow = RealVariables6[23];
  feedWaterTank.heatingSteam.m_flow = RealVariables6[24];
  feedWaterTank.heatingSteam.p = RealVariables6[25];
  feedWaterTank.heatingSteam.h_outflow = RealVariables6[26];
  feedWaterTank.condensate.m_flow = RealVariables6[27];
  feedWaterTank.condensate.p = RealVariables6[28];
  feedWaterTank.condensate.h_outflow = RealVariables6[29];
  feedWaterTank.eye.p = RealVariables6[30];
  feedWaterTank.eye.h = RealVariables6[31];
  feedWaterTank.eye.m_flow = RealVariables6[32];
  feedWaterTank.eye.T = RealVariables6[33];
  feedWaterTank.eye.s = RealVariables6[34];
  feedWaterTank.summary.outline.level_abs = RealVariables6[35];
  feedWaterTank.summary.outline.level_rel = RealVariables6[36];
  feedWaterTank.summary.wall.'T_wall[1]' = RealVariables6[37];
  feedWaterTank.summary.wall.'T_wall[2]' = RealVariables6[38];
  feedWaterTank.summary.wall.'T_wall[3]' = RealVariables6[39];
  feedWaterTank.summary.condensate.T = RealVariables6[40];
  feedWaterTank.summary.condensate.h = RealVariables6[41];
  feedWaterTank.summary.condensate.s = RealVariables6[42];
  feedWaterTank.summary.condensate.steamQuality = RealVariables6[43];
  feedWaterTank.summary.condensate.H_flow = RealVariables6[44];
  feedWaterTank.summary.condensate.rho = RealVariables6[45];
  feedWaterTank.summary.tapping.T = RealVariables6[46];
  feedWaterTank.summary.tapping.h = RealVariables6[47];
  feedWaterTank.summary.tapping.s = RealVariables6[48];
  feedWaterTank.summary.tapping.steamQuality = RealVariables6[49];
  feedWaterTank.summary.tapping.H_flow = RealVariables6[50];
  feedWaterTank.summary.tapping.rho = RealVariables6[51];
  feedWaterTank.summary.feedwater.T = RealVariables6[52];
  feedWaterTank.summary.feedwater.h = RealVariables6[53];
  feedWaterTank.summary.feedwater.s = RealVariables6[54];
  feedWaterTank.summary.feedwater.steamQuality = RealVariables6[55];
  feedWaterTank.summary.feedwater.H_flow = RealVariables6[56];
  feedWaterTank.summary.feedwater.rho = RealVariables6[57];
  feedWaterTank.summary.aux.m_flow = RealVariables6[58];
  feedWaterTank.summary.aux.T = RealVariables6[59];
  feedWaterTank.summary.aux.p = RealVariables6[60];
  feedWaterTank.summary.aux.h = RealVariables6[61];
  feedWaterTank.summary.aux.s = RealVariables6[62];
  feedWaterTank.summary.aux.steamQuality = RealVariables6[63];
  feedWaterTank.summary.aux.H_flow = RealVariables6[64];
  feedWaterTank.summary.aux.rho = RealVariables6[65];
  feedWaterTank.summary.vent.T = RealVariables6[66];
  feedWaterTank.summary.vent.p = RealVariables6[67];
  feedWaterTank.summary.vent.h = RealVariables6[68];
  feedWaterTank.summary.vent.s = RealVariables6[69];
  feedWaterTank.summary.vent.steamQuality = RealVariables6[70];
  feedWaterTank.summary.vent.rho = RealVariables6[71];
  feedWaterTank.volume.h_liq = RealVariables6[72];
  feedWaterTank.volume.h_vap = RealVariables6[73];
  feedWaterTank.volume.drho_liqdt = RealVariables6[74];
  feedWaterTank.volume.drho_vapdt = RealVariables6[75];
  feedWaterTank.volume.volume_liq = RealVariables6[76];
  feedWaterTank.volume._volume_liq_der = RealVariables6[77];
  feedWaterTank.volume.volume_vap = RealVariables6[78];
  feedWaterTank.volume.m_flow_cond = RealVariables6[79];
  feedWaterTank.volume.m_flow_evap = RealVariables6[80];
  feedWaterTank.volume.Q_flow_phases = RealVariables6[81];
  feedWaterTank.volume.'Q_flow[1]' = RealVariables6[82];
  feedWaterTank.volume.'Q_flow[2]' = RealVariables6[83];
  feedWaterTank.volume.mass_liq = RealVariables6[84];
  feedWaterTank.volume.mass_vap = RealVariables6[85];
  feedWaterTank.volume._p_liq_der = RealVariables6[86];
  feedWaterTank.volume.p_vap = RealVariables6[87];
  feedWaterTank.volume.'H_flow_inliq[1]' = RealVariables6[88];
  feedWaterTank.volume.'H_flow_inliq[2]' = RealVariables6[89];
  feedWaterTank.volume.'H_flow_inliq[3]' = RealVariables6[90];
  feedWaterTank.volume.'H_flow_invap[1]' = RealVariables6[91];
  feedWaterTank.volume.'H_flow_invap[2]' = RealVariables6[92];
  feedWaterTank.volume.'H_flow_invap[3]' = RealVariables6[93];
  feedWaterTank.volume.'H_flow_outliq[1]' = RealVariables6[94];
  feedWaterTank.volume.'H_flow_outvap[1]' = RealVariables6[95];
  feedWaterTank.volume.'inlet[3]'.h_outflow = RealVariables6[96];
  feedWaterTank.volume.'heat[1]'.T = RealVariables6[97];
  feedWaterTank.volume.'heat[1]'.Q_flow = RealVariables6[98];
  feedWaterTank.volume.'heat[2]'.Q_flow = RealVariables6[99];
  feedWaterTank.volume.'fluidIn[1]'.d = RealVariables6[100];
  feedWaterTank.volume.'fluidIn[1]'.h = RealVariables7[1];
  feedWaterTank.volume.'fluidIn[1]'.s = RealVariables7[2];
  feedWaterTank.volume.'fluidIn[1]'.T = RealVariables7[3];
  feedWaterTank.volume.'fluidIn[1]'.q = RealVariables7[4];
  feedWaterTank.volume.'fluidIn[1]'.cp = RealVariables7[5];
  feedWaterTank.volume.'fluidIn[1]'.cv = RealVariables7[6];
  feedWaterTank.volume.'fluidIn[1]'.beta = RealVariables7[7];
  feedWaterTank.volume.'fluidIn[1]'.kappa = RealVariables7[8];
  feedWaterTank.volume.'fluidIn[1]'.w = RealVariables7[9];
  feedWaterTank.volume.'fluidIn[1]'.drhodh_pxi = RealVariables7[10];
  feedWaterTank.volume.'fluidIn[1]'.drhodp_hxi = RealVariables7[11];
  feedWaterTank.volume.'fluidIn[1]'.gamma = RealVariables7[12];
  feedWaterTank.volume.'fluidIn[1]'.VLE.d_l = RealVariables7[13];
  feedWaterTank.volume.'fluidIn[1]'.VLE.d_v = RealVariables7[14];
  feedWaterTank.volume.'fluidIn[1]'.VLE.h_l = RealVariables7[15];
  feedWaterTank.volume.'fluidIn[1]'.VLE.h_v = RealVariables7[16];
  feedWaterTank.volume.'fluidIn[1]'.VLE.p_l = RealVariables7[17];
  feedWaterTank.volume.'fluidIn[1]'.VLE.p_v = RealVariables7[18];
  feedWaterTank.volume.'fluidIn[1]'.VLE.s_l = RealVariables7[19];
  feedWaterTank.volume.'fluidIn[1]'.VLE.s_v = RealVariables7[20];
  feedWaterTank.volume.'fluidIn[1]'.VLE.T_l = RealVariables7[21];
  feedWaterTank.volume.'fluidIn[1]'.VLE.T_v = RealVariables7[22];
  feedWaterTank.volume.'fluidIn[2]'.d = RealVariables7[23];
  feedWaterTank.volume.'fluidIn[2]'.h = RealVariables7[24];
  feedWaterTank.volume.'fluidIn[2]'.s = RealVariables7[25];
  feedWaterTank.volume.'fluidIn[2]'.T = RealVariables7[26];
  feedWaterTank.volume.'fluidIn[2]'.q = RealVariables7[27];
  feedWaterTank.volume.'fluidIn[2]'.cp = RealVariables7[28];
  feedWaterTank.volume.'fluidIn[2]'.cv = RealVariables7[29];
  feedWaterTank.volume.'fluidIn[2]'.beta = RealVariables7[30];
  feedWaterTank.volume.'fluidIn[2]'.kappa = RealVariables7[31];
  feedWaterTank.volume.'fluidIn[2]'.w = RealVariables7[32];
  feedWaterTank.volume.'fluidIn[2]'.drhodh_pxi = RealVariables7[33];
  feedWaterTank.volume.'fluidIn[2]'.drhodp_hxi = RealVariables7[34];
  feedWaterTank.volume.'fluidIn[2]'.gamma = RealVariables7[35];
  feedWaterTank.volume.'fluidIn[2]'.VLE.d_l = RealVariables7[36];
  feedWaterTank.volume.'fluidIn[2]'.VLE.d_v = RealVariables7[37];
  feedWaterTank.volume.'fluidIn[2]'.VLE.h_l = RealVariables7[38];
  feedWaterTank.volume.'fluidIn[2]'.VLE.h_v = RealVariables7[39];
  feedWaterTank.volume.'fluidIn[2]'.VLE.p_l = RealVariables7[40];
  feedWaterTank.volume.'fluidIn[2]'.VLE.p_v = RealVariables7[41];
  feedWaterTank.volume.'fluidIn[2]'.VLE.s_l = RealVariables7[42];
  feedWaterTank.volume.'fluidIn[2]'.VLE.s_v = RealVariables7[43];
  feedWaterTank.volume.'fluidIn[2]'.VLE.T_l = RealVariables7[44];
  feedWaterTank.volume.'fluidIn[2]'.VLE.T_v = RealVariables7[45];
  feedWaterTank.volume.'fluidIn[3]'.d = RealVariables7[46];
  feedWaterTank.volume.'fluidIn[3]'.h = RealVariables7[47];
  feedWaterTank.volume.'fluidIn[3]'.s = RealVariables7[48];
  feedWaterTank.volume.'fluidIn[3]'.T = RealVariables7[49];
  feedWaterTank.volume.'fluidIn[3]'.q = RealVariables7[50];
  feedWaterTank.volume.'fluidIn[3]'.cp = RealVariables7[51];
  feedWaterTank.volume.'fluidIn[3]'.cv = RealVariables7[52];
  feedWaterTank.volume.'fluidIn[3]'.beta = RealVariables7[53];
  feedWaterTank.volume.'fluidIn[3]'.kappa = RealVariables7[54];
  feedWaterTank.volume.'fluidIn[3]'.w = RealVariables7[55];
  feedWaterTank.volume.'fluidIn[3]'.drhodh_pxi = RealVariables7[56];
  feedWaterTank.volume.'fluidIn[3]'.drhodp_hxi = RealVariables7[57];
  feedWaterTank.volume.'fluidIn[3]'.gamma = RealVariables7[58];
  feedWaterTank.volume.'fluidIn[3]'.VLE.d_l = RealVariables7[59];
  feedWaterTank.volume.'fluidIn[3]'.VLE.d_v = RealVariables7[60];
  feedWaterTank.volume.'fluidIn[3]'.VLE.h_l = RealVariables7[61];
  feedWaterTank.volume.'fluidIn[3]'.VLE.h_v = RealVariables7[62];
  feedWaterTank.volume.'fluidIn[3]'.VLE.p_l = RealVariables7[63];
  feedWaterTank.volume.'fluidIn[3]'.VLE.p_v = RealVariables7[64];
  feedWaterTank.volume.'fluidIn[3]'.VLE.s_l = RealVariables7[65];
  feedWaterTank.volume.'fluidIn[3]'.VLE.s_v = RealVariables7[66];
  feedWaterTank.volume.'fluidIn[3]'.VLE.T_l = RealVariables7[67];
  feedWaterTank.volume.'fluidIn[3]'.VLE.T_v = RealVariables7[68];
  feedWaterTank.volume.'fluidOut[1]'.d = RealVariables7[69];
  feedWaterTank.volume.'fluidOut[1]'.h = RealVariables7[70];
  feedWaterTank.volume.'fluidOut[1]'.s = RealVariables7[71];
  feedWaterTank.volume.'fluidOut[1]'.T = RealVariables7[72];
  feedWaterTank.volume.'fluidOut[1]'.q = RealVariables7[73];
  feedWaterTank.volume.'fluidOut[1]'.cp = RealVariables7[74];
  feedWaterTank.volume.'fluidOut[1]'.cv = RealVariables7[75];
  feedWaterTank.volume.'fluidOut[1]'.beta = RealVariables7[76];
  feedWaterTank.volume.'fluidOut[1]'.kappa = RealVariables7[77];
  feedWaterTank.volume.'fluidOut[1]'.w = RealVariables7[78];
  feedWaterTank.volume.'fluidOut[1]'.drhodh_pxi = RealVariables7[79];
  feedWaterTank.volume.'fluidOut[1]'.drhodp_hxi = RealVariables7[80];
  feedWaterTank.volume.'fluidOut[1]'.gamma = RealVariables7[81];
  feedWaterTank.volume.'fluidOut[1]'.VLE.d_l = RealVariables7[82];
  feedWaterTank.volume.'fluidOut[1]'.VLE.d_v = RealVariables7[83];
  feedWaterTank.volume.'fluidOut[1]'.VLE.h_l = RealVariables7[84];
  feedWaterTank.volume.'fluidOut[1]'.VLE.h_v = RealVariables7[85];
  feedWaterTank.volume.'fluidOut[1]'.VLE.p_l = RealVariables7[86];
  feedWaterTank.volume.'fluidOut[1]'.VLE.p_v = RealVariables7[87];
  feedWaterTank.volume.'fluidOut[1]'.VLE.s_l = RealVariables7[88];
  feedWaterTank.volume.'fluidOut[1]'.VLE.s_v = RealVariables7[89];
  feedWaterTank.volume.'fluidOut[1]'.VLE.T_l = RealVariables7[90];
  feedWaterTank.volume.'fluidOut[1]'.VLE.T_v = RealVariables7[91];
  feedWaterTank.volume.'fluidOut[2]'.cp = RealVariables7[92];
  feedWaterTank.volume.'fluidOut[2]'.cv = RealVariables7[93];
  feedWaterTank.volume.'fluidOut[2]'.beta = RealVariables7[94];
  feedWaterTank.volume.'fluidOut[2]'.kappa = RealVariables7[95];
  feedWaterTank.volume.'fluidOut[2]'.w = RealVariables7[96];
  feedWaterTank.volume.'fluidOut[2]'.drhodh_pxi = RealVariables7[97];
  feedWaterTank.volume.'fluidOut[2]'.drhodp_hxi = RealVariables7[98];
  feedWaterTank.volume.'fluidOut[2]'.gamma = RealVariables7[99];
  feedWaterTank.volume.'fluidOut[2]'.VLE.d_l = RealVariables7[100];
  feedWaterTank.volume.'fluidOut[2]'.VLE.d_v = RealVariables8[1];
  feedWaterTank.volume.'fluidOut[2]'.VLE.h_l = RealVariables8[2];
  feedWaterTank.volume.'fluidOut[2]'.VLE.h_v = RealVariables8[3];
  feedWaterTank.volume.'fluidOut[2]'.VLE.p_l = RealVariables8[4];
  feedWaterTank.volume.'fluidOut[2]'.VLE.p_v = RealVariables8[5];
  feedWaterTank.volume.'fluidOut[2]'.VLE.s_l = RealVariables8[6];
  feedWaterTank.volume.'fluidOut[2]'.VLE.s_v = RealVariables8[7];
  feedWaterTank.volume.'fluidOut[2]'.VLE.T_l = RealVariables8[8];
  feedWaterTank.volume.'fluidOut[2]'.VLE.T_v = RealVariables8[9];
  feedWaterTank.volume.heattransfer.'Delta_T_mean[1]' = RealVariables8[10];
  feedWaterTank.volume.heattransfer.'Delta_T_mean[2]' = RealVariables8[11];
  feedWaterTank.volume.heattransfer.Q_flow_tot = RealVariables8[12];
  feedWaterTank.volume.phaseBorder.'Delta_p_geo_in[1]' = RealVariables8[13];
  feedWaterTank.volume.phaseBorder.'Delta_p_geo_in[2]' = RealVariables8[14];
  feedWaterTank.volume.phaseBorder.'Delta_p_geo_in[3]' = RealVariables8[15];
  feedWaterTank.volume.phaseBorder.'Delta_p_geo_out[1]' = RealVariables8[16];
  feedWaterTank.volume.phaseBorder.'Delta_p_geo_out[2]' = RealVariables8[17];
  feedWaterTank.volume.phaseBorder.'zoneAlloc_in[1]' = RealVariables8[18];
  feedWaterTank.volume.phaseBorder.'zoneAlloc_in[2]' = RealVariables8[19];
  feedWaterTank.volume.phaseBorder.'zoneAlloc_in[3]' = RealVariables8[20];
  feedWaterTank.volume.phaseBorder.'zoneAlloc_out[1]' = RealVariables8[21];
  feedWaterTank.volume.phaseBorder.'zoneAlloc_out[2]' = RealVariables8[22];
  feedWaterTank.volume.phaseBorder.'m_flow_inliq[1]' = RealVariables8[23];
  feedWaterTank.volume.phaseBorder.'m_flow_inliq[2]' = RealVariables8[24];
  feedWaterTank.volume.phaseBorder.'m_flow_inliq[3]' = RealVariables8[25];
  feedWaterTank.volume.phaseBorder.'m_flow_invap[1]' = RealVariables8[26];
  feedWaterTank.volume.phaseBorder.'m_flow_invap[2]' = RealVariables8[27];
  feedWaterTank.volume.phaseBorder.'m_flow_invap[3]' = RealVariables8[28];
  feedWaterTank.volume.phaseBorder.'m_flow_outliq[1]' = RealVariables8[29];
  feedWaterTank.volume.phaseBorder.'m_flow_outvap[1]' = RealVariables8[30];
  feedWaterTank.volume.phaseBorder.'H_flow_inliq[1]' = RealVariables8[31];
  feedWaterTank.volume.phaseBorder.'H_flow_inliq[2]' = RealVariables8[32];
  feedWaterTank.volume.phaseBorder.'H_flow_inliq[3]' = RealVariables8[33];
  feedWaterTank.volume.phaseBorder.'H_flow_invap[1]' = RealVariables8[34];
  feedWaterTank.volume.phaseBorder.'H_flow_invap[2]' = RealVariables8[35];
  feedWaterTank.volume.phaseBorder.'H_flow_invap[3]' = RealVariables8[36];
  feedWaterTank.volume.phaseBorder.'H_flow_outliq[1]' = RealVariables8[37];
  feedWaterTank.volume.phaseBorder.'H_flow_outvap[1]' = RealVariables8[38];
  feedWaterTank.volume.phaseBorder.'rho[1]' = RealVariables8[39];
  feedWaterTank.volume.phaseBorder.'rho[2]' = RealVariables8[40];
  feedWaterTank.volume.phaseBorder.'steamQuality_in[1]' = RealVariables8[41];
  feedWaterTank.volume.phaseBorder.'steamQuality_in[2]' = RealVariables8[42];
  feedWaterTank.volume.phaseBorder.'steamQuality_in[3]' = RealVariables8[43];
  feedWaterTank.volume.phaseBorder.'steamQuality_out[1]' = RealVariables8[44];
  feedWaterTank.volume.phaseBorder.'steamQuality_out[2]' = RealVariables8[45];
  feedWaterTank.volume.phaseBorder.A_hor_act = RealVariables8[46];
  feedWaterTank.volume.pressureLoss.'Delta_p[1]' = RealVariables8[47];
  feedWaterTank.volume.pressureLoss.'Delta_p[2]' = RealVariables8[48];
  feedWaterTank.volume.pressureLoss.'Delta_p[3]' = RealVariables8[49];
  feedWaterTank.volume.summary.outline.'A_heat[1]' = RealVariables8[50];
  feedWaterTank.volume.summary.outline.'A_heat[2]' = RealVariables8[51];
  feedWaterTank.volume.summary.outline.'yps[2]' = RealVariables8[52];
  feedWaterTank.volume.summary.outline.fluidMass = RealVariables8[53];
  feedWaterTank.volume.summary.outline.H_tot = RealVariables8[54];
  feedWaterTank.volume.summary.outline.Q_flow_tot = RealVariables8[55];
  feedWaterTank.volume.summary.outline.Delta_p = RealVariables8[56];
  feedWaterTank.volume.summary.'inlet[1]'.H_flow = RealVariables8[57];
  feedWaterTank.volume.summary.'inlet[2]'.H_flow = RealVariables8[58];
  feedWaterTank.volume.summary.'inlet[3]'.H_flow = RealVariables8[59];
  feedWaterTank.volume.summary.'outlet[1]'.H_flow = RealVariables8[60];
  feedWaterTank.volume.summary.fluid.'T[1]' = RealVariables8[61];
  feedWaterTank.volume.summary.fluid.'T[2]' = RealVariables8[62];
  feedWaterTank.volume.summary.fluid.'T_sat[1]' = RealVariables8[63];
  feedWaterTank.volume.summary.fluid.'T_sat[2]' = RealVariables8[64];
  feedWaterTank.volume.summary.fluid.'h_bub[1]' = RealVariables8[65];
  feedWaterTank.volume.summary.fluid.'h_bub[2]' = RealVariables8[66];
  feedWaterTank.volume.summary.fluid.'h_dew[1]' = RealVariables8[67];
  feedWaterTank.volume.summary.fluid.'h_dew[2]' = RealVariables8[68];
  feedWaterTank.volume.summary.fluid.'s[1]' = RealVariables8[69];
  feedWaterTank.volume.summary.fluid.'s[2]' = RealVariables8[70];
  feedWaterTank.volume.summary.fluid.'steamQuality[1]' = RealVariables8[71];
  feedWaterTank.volume.summary.fluid.'steamQuality[2]' = RealVariables8[72];
  feedWaterTank.volume.summary.fluid.'H[1]' = RealVariables8[73];
  feedWaterTank.volume.summary.fluid.'H[2]' = RealVariables8[74];
  feedWaterTank.volume.summary.fluid.'rho[1]' = RealVariables8[75];
  feedWaterTank.volume.summary.fluid.'rho[2]' = RealVariables8[76];
  feedWaterTank.wall.'U[1]' = RealVariables8[77];
  feedWaterTank.wall.'U[2]' = RealVariables8[78];
  feedWaterTank.wall.'U[3]' = RealVariables8[79];
  feedWaterTank.wall.'Q_flow[1]' = RealVariables8[80];
  feedWaterTank.wall.'Q_flow[2]' = RealVariables8[81];
  feedWaterTank.wall.'Q_flow[3]' = RealVariables8[82];
  feedWaterTank.wall.'Tdr[1]' = RealVariables8[83];
  feedWaterTank.wall.'Tdr[2]' = RealVariables8[84];
  feedWaterTank.wall.'Tdr[3]' = RealVariables8[85];
  feedWaterTank.wall.'Tdr[4]' = RealVariables8[86];
  feedWaterTank.wall.T_mean = RealVariables8[87];
  feedWaterTank.wall.outerPhase.T = RealVariables8[88];
  feedWaterTank.eye_sat.p = RealVariables8[89];
  feedWaterTank.eye_sat.h = RealVariables8[90];
  feedWaterTank.eye_sat.T = RealVariables8[91];
  feedWaterTank.eye_sat.s = RealVariables8[92];
  feedWaterTank.scalar2VectorHeatPort.heatScalar.Q_flow = RealVariables8[93];
  feedWaterTank.scalar2VectorHeatPort.'heatVector[1]'.Q_flow = RealVariables8[94];
  feedWaterTank.scalar2VectorHeatPort.'heatVector[2]'.Q_flow = RealVariables8[95];
  Pump_cond.Delta_p = RealVariables8[96];
  Pump_cond.V_flow = RealVariables8[97];
  Pump_cond.P_fluid = RealVariables8[98];
  Pump_cond.P_drive = RealVariables8[99];
  Pump_cond.outlet.p = RealVariables8[100];
  Pump_cond.outlet.h_outflow = RealVariables9[1];
  Pump_cond.eye.p = RealVariables9[2];
  Pump_cond.eye.h = RealVariables9[3];
  Pump_cond.eye.T = RealVariables9[4];
  Pump_cond.eye.s = RealVariables9[5];
  Pump_cond.summary.outline.head = RealVariables9[6];
  Pump_cond.summary.outline.NPSHa = RealVariables9[7];
  Pump_cond.summary.inlet.T = RealVariables9[8];
  Pump_cond.summary.inlet.h = RealVariables9[9];
  Pump_cond.summary.inlet.s = RealVariables9[10];
  Pump_cond.summary.inlet.steamQuality = RealVariables9[11];
  Pump_cond.summary.inlet.H_flow = RealVariables9[12];
  Pump_cond.summary.inlet.rho = RealVariables9[13];
  Pump_cond.summary.outlet.T = RealVariables9[14];
  Pump_cond.summary.outlet.h = RealVariables9[15];
  Pump_cond.summary.outlet.s = RealVariables9[16];
  Pump_cond.summary.outlet.steamQuality = RealVariables9[17];
  Pump_cond.summary.outlet.H_flow = RealVariables9[18];
  Pump_cond.summary.outlet.rho = RealVariables9[19];
  PI_Pump_cond.controlError = RealVariables9[20];
  PI_Pump_cond.resetValueP = RealVariables9[21];
  PI_Pump_cond.resetValueID = RealVariables9[22];
  PI_Pump_cond.resetValueI = RealVariables9[23];
  PI_Pump_cond.P.u = RealVariables9[24];
  PI_Pump_cond.P.y = RealVariables9[25];
  PI_Pump_cond.I.u = RealVariables9[26];
  PI_Pump_cond.I.y = RealVariables9[27];
  PI_Pump_cond.addPID.y = RealVariables9[28];
  PI_Pump_cond.addI.u1 = RealVariables9[29];
  PI_Pump_cond.addI.u2 = RealVariables9[30];
  PI_Pump_cond.addI.y = RealVariables9[31];
  PI_Pump_cond.gainTrack.u = RealVariables9[32];
  PI_Pump_cond.limiter.u = RealVariables9[33];
  PI_Pump_cond.limiter.y = RealVariables9[34];
  PI_Pump_cond.toPU.u = RealVariables9[35];
  PI_Pump_cond.switch_OnOff.u1 = RealVariables9[36];
  PI_Pump_cond.smoothPIDInput.y_aux = RealVariables9[37];
  PI_Pump_cond.smoothPIDOutput.y_aux = RealVariables9[38];
  PI_Pump_cond.smoothPIDOutput1.y_aux = RealVariables9[39];
  PI_Pump_cond.time_lag_I_activation.y = RealVariables9[40];
  valve_IP1.outlet.m_flow = RealVariables9[41];
  valve_IP1.pressureLoss.Delta_p = RealVariables9[42];
  valve_IP1.summary.outline.V_flow = RealVariables9[43];
  valve_IP1.summary.outline.PR = RealVariables9[44];
  valve_IP1.summary.inlet.T = RealVariables9[45];
  valve_IP1.summary.inlet.s = RealVariables9[46];
  valve_IP1.summary.inlet.steamQuality = RealVariables9[47];
  valve_IP1.summary.inlet.H_flow = RealVariables9[48];
  valve_IP1.summary.inlet.rho = RealVariables9[49];
  valve_IP1.summary.outlet.T = RealVariables9[50];
  valve_IP1.summary.outlet.s = RealVariables9[51];
  valve_IP1.summary.outlet.steamQuality = RealVariables9[52];
  valve_IP1.summary.outlet.H_flow = RealVariables9[53];
  valve_IP1.summary.outlet.rho = RealVariables9[54];
  valve_IP1.eye.p = RealVariables9[55];
  valve_IP1.eye.h = RealVariables9[56];
  valve_IP1.eye.T = RealVariables9[57];
  valve_IP1.eye.s = RealVariables9[58];
  Turbine_LP1.h_is = RealVariables9[59];
  Turbine_LP1.P_t = RealVariables9[60];
  Turbine_LP1.eta_is = RealVariables9[61];
  Turbine_LP1.S_irr = RealVariables9[62];
  Turbine_LP1.p_l = RealVariables9[63];
  Turbine_LP1.rpm = RealVariables9[64];
  Turbine_LP1.inlet.m_flow = RealVariables9[65];
  Turbine_LP1.outlet.m_flow = RealVariables9[66];
  Turbine_LP1.outlet.h_outflow = RealVariables9[67];
  Turbine_LP1.iCom.rho_in = RealVariables9[68];
  Turbine_LP1.iCom.Delta_h_is = RealVariables9[69];
  Turbine_LP1.summary.outline.Delta_p = RealVariables9[70];
  Turbine_LP1.summary.outline.P_mech = RealVariables9[71];
  Turbine_LP1.summary.inlet.T = RealVariables9[72];
  Turbine_LP1.summary.inlet.s = RealVariables9[73];
  Turbine_LP1.summary.inlet.steamQuality = RealVariables9[74];
  Turbine_LP1.summary.inlet.H_flow = RealVariables9[75];
  Turbine_LP1.summary.outlet.T = RealVariables9[76];
  Turbine_LP1.summary.outlet.s = RealVariables9[77];
  Turbine_LP1.summary.outlet.steamQuality = RealVariables9[78];
  Turbine_LP1.summary.outlet.H_flow = RealVariables9[79];
  Turbine_LP1.summary.outlet.rho = RealVariables9[80];
  Turbine_LP1.shaft_a.tau = RealVariables9[81];
  Turbine_LP1.shaft_b.tau = RealVariables9[82];
  Turbine_LP1.eye.p = RealVariables9[83];
  Turbine_LP1.eye.h = RealVariables9[84];
  Turbine_LP1.eye.T = RealVariables9[85];
  Turbine_LP1.eye.s = RealVariables9[86];
  join_LP1.H_flow_in = RealVariables9[87];
  join_LP1.'H_flow_out[1]' = RealVariables9[88];
  join_LP1.'H_flow_out[2]' = RealVariables9[89];
  join_LP1.h = RealVariables9[90];
  join_LP1.mass = RealVariables9[91];
  join_LP1.drhodt = RealVariables9[92];
  join_LP1.p = RealVariables9[93];
  join_LP1.'eye[1]'.p = RealVariables9[94];
  join_LP1.'eye[1]'.h = RealVariables9[95];
  join_LP1.'eye[1]'.m_flow = RealVariables9[96];
  join_LP1.'eye[1]'.T = RealVariables9[97];
  join_LP1.'eye[1]'.s = RealVariables9[98];
  join_LP1.'eye[2]'.p = RealVariables9[99];
  join_LP1.'eye[2]'.h = RealVariables9[100];
  join_LP1.'eye[2]'.m_flow = RealVariables10[1];
  join_LP1.'eye[2]'.T = RealVariables10[2];
  join_LP1.'eye[2]'.s = RealVariables10[3];
  join_LP1.summary.inlet.T = RealVariables10[4];
  join_LP1.summary.inlet.h = RealVariables10[5];
  join_LP1.summary.inlet.s = RealVariables10[6];
  join_LP1.summary.inlet.steamQuality = RealVariables10[7];
  join_LP1.summary.inlet.H_flow = RealVariables10[8];
  join_LP1.summary.inlet.rho = RealVariables10[9];
  join_LP1.summary.outlet1.T = RealVariables10[10];
  join_LP1.summary.outlet1.h = RealVariables10[11];
  join_LP1.summary.outlet1.s = RealVariables10[12];
  join_LP1.summary.outlet1.steamQuality = RealVariables10[13];
  join_LP1.summary.outlet1.H_flow = RealVariables10[14];
  join_LP1.summary.outlet1.rho = RealVariables10[15];
  join_LP1.summary.outlet2.T = RealVariables10[16];
  join_LP1.summary.outlet2.h = RealVariables10[17];
  join_LP1.summary.outlet2.s = RealVariables10[18];
  join_LP1.summary.outlet2.steamQuality = RealVariables10[19];
  join_LP1.summary.outlet2.H_flow = RealVariables10[20];
  join_LP1.summary.outlet2.rho = RealVariables10[21];
  join_LP1.summary.fluid.T = RealVariables10[22];
  join_LP1.summary.fluid.T_sat = RealVariables10[23];
  join_LP1.summary.fluid.h_bub = RealVariables10[24];
  join_LP1.summary.fluid.h_dew = RealVariables10[25];
  join_LP1.summary.fluid.s = RealVariables10[26];
  join_LP1.summary.fluid.steamQuality = RealVariables10[27];
  join_LP1.summary.fluid.H = RealVariables10[28];
  join_LP1.summary.fluid.rho = RealVariables10[29];
  join_LP1.outlet1.m_flow = RealVariables10[30];
  join_LP1.outlet2.m_flow = RealVariables10[31];
  Pump_preheater_LP1.Delta_p = RealVariables10[32];
  Pump_preheater_LP1.V_flow = RealVariables10[33];
  Pump_preheater_LP1.P_fluid = RealVariables10[34];
  Pump_preheater_LP1.P_drive = RealVariables10[35];
  Pump_preheater_LP1.inlet.m_flow = RealVariables10[36];
  Pump_preheater_LP1.inlet.p = RealVariables10[37];
  Pump_preheater_LP1.outlet.m_flow = RealVariables10[38];
  Pump_preheater_LP1.outlet.h_outflow = RealVariables10[39];
  Pump_preheater_LP1.eye.p = RealVariables10[40];
  Pump_preheater_LP1.eye.h = RealVariables10[41];
  Pump_preheater_LP1.eye.T = RealVariables10[42];
  Pump_preheater_LP1.eye.s = RealVariables10[43];
  Pump_preheater_LP1.summary.outline.head = RealVariables10[44];
  Pump_preheater_LP1.summary.outline.NPSHa = RealVariables10[45];
  Pump_preheater_LP1.summary.inlet.T = RealVariables10[46];
  Pump_preheater_LP1.summary.inlet.h = RealVariables10[47];
  Pump_preheater_LP1.summary.inlet.s = RealVariables10[48];
  Pump_preheater_LP1.summary.inlet.steamQuality = RealVariables10[49];
  Pump_preheater_LP1.summary.inlet.H_flow = RealVariables10[50];
  Pump_preheater_LP1.summary.inlet.rho = RealVariables10[51];
  Pump_preheater_LP1.summary.outlet.T = RealVariables10[52];
  Pump_preheater_LP1.summary.outlet.h = RealVariables10[53];
  Pump_preheater_LP1.summary.outlet.s = RealVariables10[54];
  Pump_preheater_LP1.summary.outlet.steamQuality = RealVariables10[55];
  Pump_preheater_LP1.summary.outlet.H_flow = RealVariables10[56];
  Pump_preheater_LP1.summary.outlet.rho = RealVariables10[57];
  valve_IP2.inlet.m_flow = RealVariables10[58];
  valve_IP2.inlet.h_outflow = RealVariables10[59];
  valve_IP2.outlet.m_flow = RealVariables10[60];
  valve_IP2.outlet.p = RealVariables10[61];
  valve_IP2.pressureLoss.flowIsChoked = RealVariables10[62];
  valve_IP2.pressureLoss.PR_choked = RealVariables10[63];
  valve_IP2.pressureLoss.Delta_p = RealVariables10[64];
  valve_IP2.pressureLoss.Delta_p_choke = RealVariables10[65];
  valve_IP2.pressureLoss.Y = RealVariables10[66];
  valve_IP2.pressureLoss.gamma = RealVariables10[67];
  valve_IP2.summary.outline.V_flow = RealVariables10[68];
  valve_IP2.summary.outline.PR = RealVariables10[69];
  valve_IP2.summary.inlet.T = RealVariables10[70];
  valve_IP2.summary.inlet.s = RealVariables10[71];
  valve_IP2.summary.inlet.steamQuality = RealVariables10[72];
  valve_IP2.summary.inlet.H_flow = RealVariables10[73];
  valve_IP2.summary.inlet.rho = RealVariables10[74];
  valve_IP2.summary.outlet.T = RealVariables10[75];
  valve_IP2.summary.outlet.s = RealVariables10[76];
  valve_IP2.summary.outlet.steamQuality = RealVariables10[77];
  valve_IP2.summary.outlet.H_flow = RealVariables10[78];
  valve_IP2.summary.outlet.rho = RealVariables10[79];
  valve_IP2.eye.p = RealVariables10[80];
  valve_IP2.eye.h = RealVariables10[81];
  valve_IP2.eye.T = RealVariables10[82];
  valve_IP2.eye.s = RealVariables10[83];
  join_HP.H_flow_in = RealVariables10[84];
  join_HP.'H_flow_out[1]' = RealVariables10[85];
  join_HP.'H_flow_out[2]' = RealVariables10[86];
  join_HP.h = RealVariables10[87];
  join_HP.mass = RealVariables10[88];
  join_HP.drhodt = RealVariables10[89];
  join_HP.p = RealVariables10[90];
  join_HP.'eye[1]'.p = RealVariables10[91];
  join_HP.'eye[1]'.h = RealVariables10[92];
  join_HP.'eye[1]'.T = RealVariables10[93];
  join_HP.'eye[1]'.s = RealVariables10[94];
  join_HP.'eye[2]'.p = RealVariables10[95];
  join_HP.'eye[2]'.h = RealVariables10[96];
  join_HP.'eye[2]'.m_flow = RealVariables10[97];
  join_HP.'eye[2]'.T = RealVariables10[98];
  join_HP.'eye[2]'.s = RealVariables10[99];
  join_HP.summary.inlet.T = RealVariables10[100];
  join_HP.summary.inlet.h = RealVariables11[1];
  join_HP.summary.inlet.s = RealVariables11[2];
  join_HP.summary.inlet.steamQuality = RealVariables11[3];
  join_HP.summary.inlet.H_flow = RealVariables11[4];
  join_HP.summary.inlet.rho = RealVariables11[5];
  join_HP.summary.outlet1.T = RealVariables11[6];
  join_HP.summary.outlet1.h = RealVariables11[7];
  join_HP.summary.outlet1.s = RealVariables11[8];
  join_HP.summary.outlet1.steamQuality = RealVariables11[9];
  join_HP.summary.outlet1.H_flow = RealVariables11[10];
  join_HP.summary.outlet1.rho = RealVariables11[11];
  join_HP.summary.outlet2.T = RealVariables11[12];
  join_HP.summary.outlet2.h = RealVariables11[13];
  join_HP.summary.outlet2.s = RealVariables11[14];
  join_HP.summary.outlet2.steamQuality = RealVariables11[15];
  join_HP.summary.outlet2.H_flow = RealVariables11[16];
  join_HP.summary.outlet2.rho = RealVariables11[17];
  join_HP.summary.fluid.T = RealVariables11[18];
  join_HP.summary.fluid.T_sat = RealVariables11[19];
  join_HP.summary.fluid.h_bub = RealVariables11[20];
  join_HP.summary.fluid.h_dew = RealVariables11[21];
  join_HP.summary.fluid.s = RealVariables11[22];
  join_HP.summary.fluid.steamQuality = RealVariables11[23];
  join_HP.summary.fluid.H = RealVariables11[24];
  join_HP.summary.fluid.rho = RealVariables11[25];
  join_HP.outlet1.m_flow = RealVariables11[26];
  join_HP.outlet2.m_flow = RealVariables11[27];
  preheater_HP.level = RealVariables11[28];
  preheater_HP.Out2.m_flow = RealVariables11[29];
  preheater_HP.Out1.m_flow = RealVariables11[30];
  preheater_HP.Out1.p = RealVariables11[31];
  preheater_HP.Out1.h_outflow = RealVariables11[32];
  preheater_HP.In1.p = RealVariables11[33];
  preheater_HP.In1.h_outflow = RealVariables11[34];
  preheater_HP.tubes.p = RealVariables11[35];
  preheater_HP.tubes.h = RealVariables11[36];
  preheater_HP.tubes.mass = RealVariables11[37];
  preheater_HP.tubes.heat.T = RealVariables11[38];
  preheater_HP.tubes.heat.Q_flow = RealVariables11[39];
  preheater_HP.tubes.summary.outline.Delta_p = RealVariables11[40];
  preheater_HP.tubes.summary.inlet.T = RealVariables11[41];
  preheater_HP.tubes.summary.inlet.h = RealVariables11[42];
  preheater_HP.tubes.summary.inlet.s = RealVariables11[43];
  preheater_HP.tubes.summary.inlet.steamQuality = RealVariables11[44];
  preheater_HP.tubes.summary.inlet.H_flow = RealVariables11[45];
  preheater_HP.tubes.summary.inlet.rho = RealVariables11[46];
  preheater_HP.tubes.summary.outlet.T = RealVariables11[47];
  preheater_HP.tubes.summary.outlet.h = RealVariables11[48];
  preheater_HP.tubes.summary.outlet.s = RealVariables11[49];
  preheater_HP.tubes.summary.outlet.steamQuality = RealVariables11[50];
  preheater_HP.tubes.summary.outlet.H_flow = RealVariables11[51];
  preheater_HP.tubes.summary.outlet.rho = RealVariables11[52];
  preheater_HP.tubes.summary.fluid.T = RealVariables11[53];
  preheater_HP.tubes.summary.fluid.T_sat = RealVariables11[54];
  preheater_HP.tubes.summary.fluid.h_bub = RealVariables11[55];
  preheater_HP.tubes.summary.fluid.h_dew = RealVariables11[56];
  preheater_HP.tubes.summary.fluid.s = RealVariables11[57];
  preheater_HP.tubes.summary.fluid.steamQuality = RealVariables11[58];
  preheater_HP.tubes.summary.fluid.H = RealVariables11[59];
  preheater_HP.tubes.summary.fluid.rho = RealVariables11[60];
  preheater_HP.tubes.fluidIn.cp = RealVariables11[61];
  preheater_HP.tubes.fluidIn.cv = RealVariables11[62];
  preheater_HP.tubes.fluidIn.beta = RealVariables11[63];
  preheater_HP.tubes.fluidIn.kappa = RealVariables11[64];
  preheater_HP.tubes.fluidIn.w = RealVariables11[65];
  preheater_HP.tubes.fluidIn.drhodh_pxi = RealVariables11[66];
  preheater_HP.tubes.fluidIn.drhodp_hxi = RealVariables11[67];
  preheater_HP.tubes.fluidIn.gamma = RealVariables11[68];
  preheater_HP.tubes.fluidIn.transp.Pr = RealVariables11[69];
  preheater_HP.tubes.fluidIn.transp.lambda = RealVariables11[70];
  preheater_HP.tubes.fluidIn.transp.eta = RealVariables11[71];
  preheater_HP.tubes.fluidIn.transp.sigma = RealVariables11[72];
  preheater_HP.tubes.fluidIn.VLE.d_l = RealVariables11[73];
  preheater_HP.tubes.fluidIn.VLE.d_v = RealVariables11[74];
  preheater_HP.tubes.fluidIn.VLE.h_l = RealVariables11[75];
  preheater_HP.tubes.fluidIn.VLE.h_v = RealVariables11[76];
  preheater_HP.tubes.fluidIn.VLE.p_l = RealVariables11[77];
  preheater_HP.tubes.fluidIn.VLE.p_v = RealVariables11[78];
  preheater_HP.tubes.fluidIn.VLE.s_l = RealVariables11[79];
  preheater_HP.tubes.fluidIn.VLE.s_v = RealVariables11[80];
  preheater_HP.tubes.fluidIn.VLE.T_l = RealVariables11[81];
  preheater_HP.tubes.fluidIn.VLE.T_v = RealVariables11[82];
  preheater_HP.tubes.fluidIn.VLEAdditional.cp_l = RealVariables11[83];
  preheater_HP.tubes.fluidIn.VLEAdditional.cp_v = RealVariables11[84];
  preheater_HP.tubes.fluidIn.VLEAdditional.beta_l = RealVariables11[85];
  preheater_HP.tubes.fluidIn.VLEAdditional.beta_v = RealVariables11[86];
  preheater_HP.tubes.fluidIn.VLEAdditional.kappa_l = RealVariables11[87];
  preheater_HP.tubes.fluidIn.VLEAdditional.kappa_v = RealVariables11[88];
  preheater_HP.tubes.fluidIn.VLETransp.Pr_l = RealVariables11[89];
  preheater_HP.tubes.fluidIn.VLETransp.Pr_v = RealVariables11[90];
  preheater_HP.tubes.fluidIn.VLETransp.lambda_l = RealVariables11[91];
  preheater_HP.tubes.fluidIn.VLETransp.lambda_v = RealVariables11[92];
  preheater_HP.tubes.fluidIn.VLETransp.eta_l = RealVariables11[93];
  preheater_HP.tubes.fluidIn.VLETransp.eta_v = RealVariables11[94];
  preheater_HP.tubes.fluidOut.cp = RealVariables11[95];
  preheater_HP.tubes.fluidOut.cv = RealVariables11[96];
  preheater_HP.tubes.fluidOut.beta = RealVariables11[97];
  preheater_HP.tubes.fluidOut.kappa = RealVariables11[98];
  preheater_HP.tubes.fluidOut.w = RealVariables11[99];
  preheater_HP.tubes.fluidOut.drhodh_pxi = RealVariables11[100];
  preheater_HP.tubes.fluidOut.drhodp_hxi = RealVariables12[1];
  preheater_HP.tubes.fluidOut.gamma = RealVariables12[2];
  preheater_HP.tubes.fluidOut.transp.Pr = RealVariables12[3];
  preheater_HP.tubes.fluidOut.transp.lambda = RealVariables12[4];
  preheater_HP.tubes.fluidOut.transp.eta = RealVariables12[5];
  preheater_HP.tubes.fluidOut.transp.sigma = RealVariables12[6];
  preheater_HP.tubes.fluidOut.VLE.d_l = RealVariables12[7];
  preheater_HP.tubes.fluidOut.VLE.d_v = RealVariables12[8];
  preheater_HP.tubes.fluidOut.VLE.h_l = RealVariables12[9];
  preheater_HP.tubes.fluidOut.VLE.h_v = RealVariables12[10];
  preheater_HP.tubes.fluidOut.VLE.p_l = RealVariables12[11];
  preheater_HP.tubes.fluidOut.VLE.p_v = RealVariables12[12];
  preheater_HP.tubes.fluidOut.VLE.s_l = RealVariables12[13];
  preheater_HP.tubes.fluidOut.VLE.s_v = RealVariables12[14];
  preheater_HP.tubes.fluidOut.VLE.T_l = RealVariables12[15];
  preheater_HP.tubes.fluidOut.VLE.T_v = RealVariables12[16];
  preheater_HP.tubes.fluidOut.VLEAdditional.cp_l = RealVariables12[17];
  preheater_HP.tubes.fluidOut.VLEAdditional.cp_v = RealVariables12[18];
  preheater_HP.tubes.fluidOut.VLEAdditional.beta_l = RealVariables12[19];
  preheater_HP.tubes.fluidOut.VLEAdditional.beta_v = RealVariables12[20];
  preheater_HP.tubes.fluidOut.VLEAdditional.kappa_l = RealVariables12[21];
  preheater_HP.tubes.fluidOut.VLEAdditional.kappa_v = RealVariables12[22];
  preheater_HP.tubes.fluidOut.VLETransp.Pr_l = RealVariables12[23];
  preheater_HP.tubes.fluidOut.VLETransp.Pr_v = RealVariables12[24];
  preheater_HP.tubes.fluidOut.VLETransp.lambda_l = RealVariables12[25];
  preheater_HP.tubes.fluidOut.VLETransp.lambda_v = RealVariables12[26];
  preheater_HP.tubes.fluidOut.VLETransp.eta_l = RealVariables12[27];
  preheater_HP.tubes.fluidOut.VLETransp.eta_v = RealVariables12[28];
  preheater_HP.tubes.heattransfer.Delta_T_wi = RealVariables12[29];
  preheater_HP.tubes.heattransfer.Delta_T_wo = RealVariables12[30];
  preheater_HP.tubes.heattransfer.Delta_T_mean = RealVariables12[31];
  preheater_HP.tubes.heattransfer.Delta_T_U = RealVariables12[32];
  preheater_HP.tubes.heattransfer.Delta_T_L = RealVariables12[33];
  preheater_HP.tubes.heattransfer.alpha = RealVariables12[34];
  preheater_HP.tubes.heattransfer.HR = RealVariables12[35];
  preheater_HP.tubes.pressureLoss.Delta_p = RealVariables12[36];
  preheater_HP.shell.h_liq = RealVariables12[37];
  preheater_HP.shell.h_vap = RealVariables12[38];
  preheater_HP.shell.drho_liqdt = RealVariables12[39];
  preheater_HP.shell.drho_vapdt = RealVariables12[40];
  preheater_HP.shell.volume_liq = RealVariables12[41];
  preheater_HP.shell._volume_liq_der = RealVariables12[42];
  preheater_HP.shell.volume_vap = RealVariables12[43];
  preheater_HP.shell.m_flow_cond = RealVariables12[44];
  preheater_HP.shell.m_flow_evap = RealVariables12[45];
  preheater_HP.shell.Q_flow_phases = RealVariables12[46];
  preheater_HP.shell.'Q_flow[1]' = RealVariables12[47];
  preheater_HP.shell.'Q_flow[2]' = RealVariables12[48];
  preheater_HP.shell.mass_liq = RealVariables12[49];
  preheater_HP.shell.mass_vap = RealVariables12[50];
  preheater_HP.shell._p_liq_der = RealVariables12[51];
  preheater_HP.shell.p_vap = RealVariables12[52];
  preheater_HP.shell.'H_flow_inliq[1]' = RealVariables12[53];
  preheater_HP.shell.'H_flow_invap[1]' = RealVariables12[54];
  preheater_HP.shell.'H_flow_outliq[1]' = RealVariables12[55];
  preheater_HP.shell.'H_flow_outvap[1]' = RealVariables12[56];
  preheater_HP.shell.'inlet[2]'.p = RealVariables12[57];
  preheater_HP.shell.'inlet[2]'.h_outflow = RealVariables12[58];
  preheater_HP.shell.'inlet[3]'.p = RealVariables12[59];
  preheater_HP.shell.'inlet[3]'.h_outflow = RealVariables12[60];
  preheater_HP.shell.'heat[1]'.T = RealVariables12[61];
  preheater_HP.shell.'heat[1]'.Q_flow = RealVariables12[62];
  preheater_HP.shell.'heat[2]'.Q_flow = RealVariables12[63];
  preheater_HP.shell.'fluidIn[1]'.d = RealVariables12[64];
  preheater_HP.shell.'fluidIn[1]'.h = RealVariables12[65];
  preheater_HP.shell.'fluidIn[1]'.s = RealVariables12[66];
  preheater_HP.shell.'fluidIn[1]'.T = RealVariables12[67];
  preheater_HP.shell.'fluidIn[1]'.q = RealVariables12[68];
  preheater_HP.shell.'fluidIn[1]'.cp = RealVariables12[69];
  preheater_HP.shell.'fluidIn[1]'.cv = RealVariables12[70];
  preheater_HP.shell.'fluidIn[1]'.beta = RealVariables12[71];
  preheater_HP.shell.'fluidIn[1]'.kappa = RealVariables12[72];
  preheater_HP.shell.'fluidIn[1]'.w = RealVariables12[73];
  preheater_HP.shell.'fluidIn[1]'.drhodh_pxi = RealVariables12[74];
  preheater_HP.shell.'fluidIn[1]'.drhodp_hxi = RealVariables12[75];
  preheater_HP.shell.'fluidIn[1]'.gamma = RealVariables12[76];
  preheater_HP.shell.'fluidIn[1]'.VLE.d_l = RealVariables12[77];
  preheater_HP.shell.'fluidIn[1]'.VLE.d_v = RealVariables12[78];
  preheater_HP.shell.'fluidIn[1]'.VLE.h_l = RealVariables12[79];
  preheater_HP.shell.'fluidIn[1]'.VLE.h_v = RealVariables12[80];
  preheater_HP.shell.'fluidIn[1]'.VLE.p_l = RealVariables12[81];
  preheater_HP.shell.'fluidIn[1]'.VLE.p_v = RealVariables12[82];
  preheater_HP.shell.'fluidIn[1]'.VLE.s_l = RealVariables12[83];
  preheater_HP.shell.'fluidIn[1]'.VLE.s_v = RealVariables12[84];
  preheater_HP.shell.'fluidIn[1]'.VLE.T_l = RealVariables12[85];
  preheater_HP.shell.'fluidIn[1]'.VLE.T_v = RealVariables12[86];
  preheater_HP.shell.'fluidIn[2]'.d = RealVariables12[87];
  preheater_HP.shell.'fluidIn[2]'.s = RealVariables12[88];
  preheater_HP.shell.'fluidIn[2]'.T = RealVariables12[89];
  preheater_HP.shell.'fluidIn[2]'.q = RealVariables12[90];
  preheater_HP.shell.'fluidIn[2]'.cp = RealVariables12[91];
  preheater_HP.shell.'fluidIn[2]'.cv = RealVariables12[92];
  preheater_HP.shell.'fluidIn[2]'.beta = RealVariables12[93];
  preheater_HP.shell.'fluidIn[2]'.kappa = RealVariables12[94];
  preheater_HP.shell.'fluidIn[2]'.w = RealVariables12[95];
  preheater_HP.shell.'fluidIn[2]'.drhodh_pxi = RealVariables12[96];
  preheater_HP.shell.'fluidIn[2]'.drhodp_hxi = RealVariables12[97];
  preheater_HP.shell.'fluidIn[2]'.gamma = RealVariables12[98];
  preheater_HP.shell.'fluidIn[2]'.VLE.d_l = RealVariables12[99];
  preheater_HP.shell.'fluidIn[2]'.VLE.d_v = RealVariables12[100];
  preheater_HP.shell.'fluidIn[2]'.VLE.h_l = RealVariables13[1];
  preheater_HP.shell.'fluidIn[2]'.VLE.h_v = RealVariables13[2];
  preheater_HP.shell.'fluidIn[2]'.VLE.p_l = RealVariables13[3];
  preheater_HP.shell.'fluidIn[2]'.VLE.p_v = RealVariables13[4];
  preheater_HP.shell.'fluidIn[2]'.VLE.s_l = RealVariables13[5];
  preheater_HP.shell.'fluidIn[2]'.VLE.s_v = RealVariables13[6];
  preheater_HP.shell.'fluidIn[2]'.VLE.T_l = RealVariables13[7];
  preheater_HP.shell.'fluidIn[2]'.VLE.T_v = RealVariables13[8];
  preheater_HP.shell.'fluidIn[3]'.d = RealVariables13[9];
  preheater_HP.shell.'fluidIn[3]'.s = RealVariables13[10];
  preheater_HP.shell.'fluidIn[3]'.T = RealVariables13[11];
  preheater_HP.shell.'fluidIn[3]'.q = RealVariables13[12];
  preheater_HP.shell.'fluidIn[3]'.cp = RealVariables13[13];
  preheater_HP.shell.'fluidIn[3]'.cv = RealVariables13[14];
  preheater_HP.shell.'fluidIn[3]'.beta = RealVariables13[15];
  preheater_HP.shell.'fluidIn[3]'.kappa = RealVariables13[16];
  preheater_HP.shell.'fluidIn[3]'.w = RealVariables13[17];
  preheater_HP.shell.'fluidIn[3]'.drhodh_pxi = RealVariables13[18];
  preheater_HP.shell.'fluidIn[3]'.drhodp_hxi = RealVariables13[19];
  preheater_HP.shell.'fluidIn[3]'.gamma = RealVariables13[20];
  preheater_HP.shell.'fluidIn[3]'.VLE.d_l = RealVariables13[21];
  preheater_HP.shell.'fluidIn[3]'.VLE.d_v = RealVariables13[22];
  preheater_HP.shell.'fluidIn[3]'.VLE.h_l = RealVariables13[23];
  preheater_HP.shell.'fluidIn[3]'.VLE.h_v = RealVariables13[24];
  preheater_HP.shell.'fluidIn[3]'.VLE.p_l = RealVariables13[25];
  preheater_HP.shell.'fluidIn[3]'.VLE.p_v = RealVariables13[26];
  preheater_HP.shell.'fluidIn[3]'.VLE.s_l = RealVariables13[27];
  preheater_HP.shell.'fluidIn[3]'.VLE.s_v = RealVariables13[28];
  preheater_HP.shell.'fluidIn[3]'.VLE.T_l = RealVariables13[29];
  preheater_HP.shell.'fluidIn[3]'.VLE.T_v = RealVariables13[30];
  preheater_HP.shell.'fluidOut[1]'.d = RealVariables13[31];
  preheater_HP.shell.'fluidOut[1]'.h = RealVariables13[32];
  preheater_HP.shell.'fluidOut[1]'.s = RealVariables13[33];
  preheater_HP.shell.'fluidOut[1]'.T = RealVariables13[34];
  preheater_HP.shell.'fluidOut[1]'.q = RealVariables13[35];
  preheater_HP.shell.'fluidOut[1]'.cp = RealVariables13[36];
  preheater_HP.shell.'fluidOut[1]'.cv = RealVariables13[37];
  preheater_HP.shell.'fluidOut[1]'.beta = RealVariables13[38];
  preheater_HP.shell.'fluidOut[1]'.kappa = RealVariables13[39];
  preheater_HP.shell.'fluidOut[1]'.w = RealVariables13[40];
  preheater_HP.shell.'fluidOut[1]'.drhodh_pxi = RealVariables13[41];
  preheater_HP.shell.'fluidOut[1]'.drhodp_hxi = RealVariables13[42];
  preheater_HP.shell.'fluidOut[1]'.gamma = RealVariables13[43];
  preheater_HP.shell.'fluidOut[1]'.VLE.d_l = RealVariables13[44];
  preheater_HP.shell.'fluidOut[1]'.VLE.d_v = RealVariables13[45];
  preheater_HP.shell.'fluidOut[1]'.VLE.h_l = RealVariables13[46];
  preheater_HP.shell.'fluidOut[1]'.VLE.h_v = RealVariables13[47];
  preheater_HP.shell.'fluidOut[1]'.VLE.p_l = RealVariables13[48];
  preheater_HP.shell.'fluidOut[1]'.VLE.p_v = RealVariables13[49];
  preheater_HP.shell.'fluidOut[1]'.VLE.s_l = RealVariables13[50];
  preheater_HP.shell.'fluidOut[1]'.VLE.s_v = RealVariables13[51];
  preheater_HP.shell.'fluidOut[1]'.VLE.T_l = RealVariables13[52];
  preheater_HP.shell.'fluidOut[1]'.VLE.T_v = RealVariables13[53];
  preheater_HP.shell.heattransfer.'Delta_T_mean[1]' = RealVariables13[54];
  preheater_HP.shell.heattransfer.'Delta_T_mean[2]' = RealVariables13[55];
  preheater_HP.shell.heattransfer.Q_flow_tot = RealVariables13[56];
  preheater_HP.shell.phaseBorder.'Delta_p_geo_in[1]' = RealVariables13[57];
  preheater_HP.shell.phaseBorder.'Delta_p_geo_in[2]' = RealVariables13[58];
  preheater_HP.shell.phaseBorder.'Delta_p_geo_in[3]' = RealVariables13[59];
  preheater_HP.shell.phaseBorder.'Delta_p_geo_out[1]' = RealVariables13[60];
  preheater_HP.shell.phaseBorder.'zoneAlloc_in[1]' = RealVariables13[61];
  preheater_HP.shell.phaseBorder.'zoneAlloc_in[2]' = RealVariables13[62];
  preheater_HP.shell.phaseBorder.'zoneAlloc_in[3]' = RealVariables13[63];
  preheater_HP.shell.phaseBorder.'zoneAlloc_out[1]' = RealVariables13[64];
  preheater_HP.shell.phaseBorder.level_abs = RealVariables13[65];
  preheater_HP.shell.phaseBorder.'m_flow_inliq[1]' = RealVariables13[66];
  preheater_HP.shell.phaseBorder.'m_flow_invap[1]' = RealVariables13[67];
  preheater_HP.shell.phaseBorder.'m_flow_outliq[1]' = RealVariables13[68];
  preheater_HP.shell.phaseBorder.'m_flow_outvap[1]' = RealVariables13[69];
  preheater_HP.shell.phaseBorder.'H_flow_inliq[1]' = RealVariables13[70];
  preheater_HP.shell.phaseBorder.'H_flow_invap[1]' = RealVariables13[71];
  preheater_HP.shell.phaseBorder.'H_flow_outliq[1]' = RealVariables13[72];
  preheater_HP.shell.phaseBorder.'H_flow_outvap[1]' = RealVariables13[73];
  preheater_HP.shell.phaseBorder.'rho[1]' = RealVariables13[74];
  preheater_HP.shell.phaseBorder.'rho[2]' = RealVariables13[75];
  preheater_HP.shell.phaseBorder.'steamQuality_in[1]' = RealVariables13[76];
  preheater_HP.shell.phaseBorder.'steamQuality_in[2]' = RealVariables13[77];
  preheater_HP.shell.phaseBorder.'steamQuality_in[3]' = RealVariables13[78];
  preheater_HP.shell.phaseBorder.'steamQuality_out[1]' = RealVariables13[79];
  preheater_HP.shell.phaseBorder.A_hor_act = RealVariables13[80];
  preheater_HP.shell.pressureLoss.'Delta_p[1]' = RealVariables13[81];
  preheater_HP.shell.summary.outline.'A_heat[1]' = RealVariables13[82];
  preheater_HP.shell.summary.outline.'A_heat[2]' = RealVariables13[83];
  preheater_HP.shell.summary.outline.'yps[2]' = RealVariables13[84];
  preheater_HP.shell.summary.outline.fluidMass = RealVariables13[85];
  preheater_HP.shell.summary.outline.H_tot = RealVariables13[86];
  preheater_HP.shell.summary.outline.Q_flow_tot = RealVariables13[87];
  preheater_HP.shell.summary.outline.Delta_p = RealVariables13[88];
  preheater_HP.shell.summary.'inlet[1]'.H_flow = RealVariables13[89];
  preheater_HP.shell.summary.'outlet[1]'.H_flow = RealVariables13[90];
  preheater_HP.shell.summary.fluid.'T[1]' = RealVariables13[91];
  preheater_HP.shell.summary.fluid.'T[2]' = RealVariables13[92];
  preheater_HP.shell.summary.fluid.'T_sat[1]' = RealVariables13[93];
  preheater_HP.shell.summary.fluid.'T_sat[2]' = RealVariables13[94];
  preheater_HP.shell.summary.fluid.'h_bub[1]' = RealVariables13[95];
  preheater_HP.shell.summary.fluid.'h_bub[2]' = RealVariables13[96];
  preheater_HP.shell.summary.fluid.'h_dew[1]' = RealVariables13[97];
  preheater_HP.shell.summary.fluid.'h_dew[2]' = RealVariables13[98];
  preheater_HP.shell.summary.fluid.'s[1]' = RealVariables13[99];
  preheater_HP.shell.summary.fluid.'s[2]' = RealVariables13[100];
  preheater_HP.shell.summary.fluid.'steamQuality[1]' = RealVariables14[1];
  preheater_HP.shell.summary.fluid.'steamQuality[2]' = RealVariables14[2];
  preheater_HP.shell.summary.fluid.'H[1]' = RealVariables14[3];
  preheater_HP.shell.summary.fluid.'H[2]' = RealVariables14[4];
  preheater_HP.shell.summary.fluid.'rho[1]' = RealVariables14[5];
  preheater_HP.shell.summary.fluid.'rho[2]' = RealVariables14[6];
  preheater_HP.wall.'T[1]' = RealVariables14[7];
  preheater_HP.wall.'T[2]' = RealVariables14[8];
  preheater_HP.wall.'T[3]' = RealVariables14[9];
  preheater_HP.wall.'U[1]' = RealVariables14[10];
  preheater_HP.wall.'U[2]' = RealVariables14[11];
  preheater_HP.wall.'U[3]' = RealVariables14[12];
  preheater_HP.wall.'Q_flow[1]' = RealVariables14[13];
  preheater_HP.wall.'Q_flow[2]' = RealVariables14[14];
  preheater_HP.wall.'Q_flow[3]' = RealVariables14[15];
  preheater_HP.wall.'Q_flow[4]' = RealVariables14[16];
  preheater_HP.wall.'Tdr[1]' = RealVariables14[17];
  preheater_HP.wall.'Tdr[2]' = RealVariables14[18];
  preheater_HP.wall.'Tdr[3]' = RealVariables14[19];
  preheater_HP.wall.'Tdr[4]' = RealVariables14[20];
  preheater_HP.wall.T_mean = RealVariables14[21];
  preheater_HP.wall.outerPhase.Q_flow = RealVariables14[22];
  preheater_HP.summary.outline.Q_flow = RealVariables14[23];
  preheater_HP.summary.outline.Delta_T_in = RealVariables14[24];
  preheater_HP.summary.outline.Delta_T_out = RealVariables14[25];
  preheater_HP.summary.outline.kA = RealVariables14[26];
  preheater_HP.'eye_int2[1]'.p = RealVariables14[27];
  preheater_HP.'eye_int2[1]'.h = RealVariables14[28];
  preheater_HP.'eye_int2[1]'.T = RealVariables14[29];
  preheater_HP.'eye_int2[1]'.s = RealVariables14[30];
  preheater_HP.'eye_int1[1]'.p = RealVariables14[31];
  preheater_HP.'eye_int1[1]'.h = RealVariables14[32];
  preheater_HP.'eye_int1[1]'.T = RealVariables14[33];
  preheater_HP.'eye_int1[1]'.s = RealVariables14[34];
  valve_HP.pressureLoss.flowIsChoked = RealVariables14[35];
  valve_HP.pressureLoss.PR_choked = RealVariables14[36];
  valve_HP.pressureLoss.Delta_p = RealVariables14[37];
  valve_HP.pressureLoss.Delta_p_choke = RealVariables14[38];
  valve_HP.pressureLoss.Y = RealVariables14[39];
  valve_HP.pressureLoss.gamma = RealVariables14[40];
  valve_HP.summary.outline.V_flow = RealVariables14[41];
  valve_HP.summary.outline.PR = RealVariables14[42];
  valve_HP.summary.inlet.T = RealVariables14[43];
  valve_HP.summary.inlet.h = RealVariables14[44];
  valve_HP.summary.inlet.s = RealVariables14[45];
  valve_HP.summary.inlet.steamQuality = RealVariables14[46];
  valve_HP.summary.inlet.H_flow = RealVariables14[47];
  valve_HP.summary.inlet.rho = RealVariables14[48];
  valve_HP.summary.outlet.T = RealVariables14[49];
  valve_HP.summary.outlet.h = RealVariables14[50];
  valve_HP.summary.outlet.s = RealVariables14[51];
  valve_HP.summary.outlet.steamQuality = RealVariables14[52];
  valve_HP.summary.outlet.H_flow = RealVariables14[53];
  valve_HP.summary.outlet.rho = RealVariables14[54];
  valve_HP.eye.p = RealVariables14[55];
  valve_HP.eye.h = RealVariables14[56];
  valve_HP.eye.T = RealVariables14[57];
  valve_HP.eye.s = RealVariables14[58];
  valveControl_preheater_HP.opening_in = RealVariables14[59];
  valveControl_preheater_HP.pressureLoss.flowIsChoked = RealVariables14[60];
  valveControl_preheater_HP.pressureLoss.PR_choked = RealVariables14[61];
  valveControl_preheater_HP.pressureLoss.aperture_ = RealVariables14[62];
  valveControl_preheater_HP.pressureLoss.Delta_p = RealVariables14[63];
  valveControl_preheater_HP.pressureLoss.Kv = RealVariables14[64];
  valveControl_preheater_HP.pressureLoss.Delta_p_choke = RealVariables14[65];
  valveControl_preheater_HP.pressureLoss.ValveCharacteristics.'u[1]' = RealVariables14[66];
  valveControl_preheater_HP.pressureLoss.ValveCharacteristics.'y[1]' = RealVariables14[67];
  valveControl_preheater_HP.summary.outline.V_flow = RealVariables14[68];
  valveControl_preheater_HP.summary.outline.PR = RealVariables14[69];
  valveControl_preheater_HP.summary.inlet.T = RealVariables14[70];
  valveControl_preheater_HP.summary.inlet.h = RealVariables14[71];
  valveControl_preheater_HP.summary.inlet.s = RealVariables14[72];
  valveControl_preheater_HP.summary.inlet.steamQuality = RealVariables14[73];
  valveControl_preheater_HP.summary.inlet.H_flow = RealVariables14[74];
  valveControl_preheater_HP.summary.inlet.rho = RealVariables14[75];
  valveControl_preheater_HP.summary.outlet.T = RealVariables14[76];
  valveControl_preheater_HP.summary.outlet.h = RealVariables14[77];
  valveControl_preheater_HP.summary.outlet.s = RealVariables14[78];
  valveControl_preheater_HP.summary.outlet.steamQuality = RealVariables14[79];
  valveControl_preheater_HP.summary.outlet.H_flow = RealVariables14[80];
  valveControl_preheater_HP.summary.outlet.rho = RealVariables14[81];
  valveControl_preheater_HP.eye.p = RealVariables14[82];
  valveControl_preheater_HP.eye.h = RealVariables14[83];
  valveControl_preheater_HP.eye.T = RealVariables14[84];
  valveControl_preheater_HP.eye.s = RealVariables14[85];
  statePoint.h = RealVariables14[86];
  statePoint.s = RealVariables14[87];
  statePoint.T = RealVariables14[88];
  statePoint.v = RealVariables14[89];
  preheater_LP1.level = RealVariables14[90];
  preheater_LP1.In2.m_flow = RealVariables14[91];
  preheater_LP1.Out2.m_flow = RealVariables14[92];
  preheater_LP1.Out1.h_outflow = RealVariables14[93];
  preheater_LP1.tubes.p = RealVariables14[94];
  preheater_LP1.tubes.h = RealVariables14[95];
  preheater_LP1.tubes.mass = RealVariables14[96];
  preheater_LP1.tubes.heat.T = RealVariables14[97];
  preheater_LP1.tubes.heat.Q_flow = RealVariables14[98];
  preheater_LP1.tubes.summary.outline.Delta_p = RealVariables14[99];
  preheater_LP1.tubes.summary.inlet.T = RealVariables14[100];
  preheater_LP1.tubes.summary.inlet.h = RealVariables15[1];
  preheater_LP1.tubes.summary.inlet.s = RealVariables15[2];
  preheater_LP1.tubes.summary.inlet.steamQuality = RealVariables15[3];
  preheater_LP1.tubes.summary.inlet.H_flow = RealVariables15[4];
  preheater_LP1.tubes.summary.inlet.rho = RealVariables15[5];
  preheater_LP1.tubes.summary.outlet.m_flow = RealVariables15[6];
  preheater_LP1.tubes.summary.outlet.T = RealVariables15[7];
  preheater_LP1.tubes.summary.outlet.h = RealVariables15[8];
  preheater_LP1.tubes.summary.outlet.s = RealVariables15[9];
  preheater_LP1.tubes.summary.outlet.steamQuality = RealVariables15[10];
  preheater_LP1.tubes.summary.outlet.H_flow = RealVariables15[11];
  preheater_LP1.tubes.summary.outlet.rho = RealVariables15[12];
  preheater_LP1.tubes.summary.fluid.T = RealVariables15[13];
  preheater_LP1.tubes.summary.fluid.T_sat = RealVariables15[14];
  preheater_LP1.tubes.summary.fluid.h_bub = RealVariables15[15];
  preheater_LP1.tubes.summary.fluid.h_dew = RealVariables15[16];
  preheater_LP1.tubes.summary.fluid.s = RealVariables15[17];
  preheater_LP1.tubes.summary.fluid.steamQuality = RealVariables15[18];
  preheater_LP1.tubes.summary.fluid.H = RealVariables15[19];
  preheater_LP1.tubes.summary.fluid.rho = RealVariables15[20];
  preheater_LP1.tubes.fluidIn.cp = RealVariables15[21];
  preheater_LP1.tubes.fluidIn.cv = RealVariables15[22];
  preheater_LP1.tubes.fluidIn.beta = RealVariables15[23];
  preheater_LP1.tubes.fluidIn.kappa = RealVariables15[24];
  preheater_LP1.tubes.fluidIn.w = RealVariables15[25];
  preheater_LP1.tubes.fluidIn.drhodh_pxi = RealVariables15[26];
  preheater_LP1.tubes.fluidIn.drhodp_hxi = RealVariables15[27];
  preheater_LP1.tubes.fluidIn.gamma = RealVariables15[28];
  preheater_LP1.tubes.fluidIn.transp.Pr = RealVariables15[29];
  preheater_LP1.tubes.fluidIn.transp.lambda = RealVariables15[30];
  preheater_LP1.tubes.fluidIn.transp.eta = RealVariables15[31];
  preheater_LP1.tubes.fluidIn.transp.sigma = RealVariables15[32];
  preheater_LP1.tubes.fluidIn.VLE.d_l = RealVariables15[33];
  preheater_LP1.tubes.fluidIn.VLE.d_v = RealVariables15[34];
  preheater_LP1.tubes.fluidIn.VLE.h_l = RealVariables15[35];
  preheater_LP1.tubes.fluidIn.VLE.h_v = RealVariables15[36];
  preheater_LP1.tubes.fluidIn.VLE.p_l = RealVariables15[37];
  preheater_LP1.tubes.fluidIn.VLE.p_v = RealVariables15[38];
  preheater_LP1.tubes.fluidIn.VLE.s_l = RealVariables15[39];
  preheater_LP1.tubes.fluidIn.VLE.s_v = RealVariables15[40];
  preheater_LP1.tubes.fluidIn.VLE.T_l = RealVariables15[41];
  preheater_LP1.tubes.fluidIn.VLE.T_v = RealVariables15[42];
  preheater_LP1.tubes.fluidIn.VLEAdditional.cp_l = RealVariables15[43];
  preheater_LP1.tubes.fluidIn.VLEAdditional.cp_v = RealVariables15[44];
  preheater_LP1.tubes.fluidIn.VLEAdditional.beta_l = RealVariables15[45];
  preheater_LP1.tubes.fluidIn.VLEAdditional.beta_v = RealVariables15[46];
  preheater_LP1.tubes.fluidIn.VLEAdditional.kappa_l = RealVariables15[47];
  preheater_LP1.tubes.fluidIn.VLEAdditional.kappa_v = RealVariables15[48];
  preheater_LP1.tubes.fluidIn.VLETransp.Pr_l = RealVariables15[49];
  preheater_LP1.tubes.fluidIn.VLETransp.Pr_v = RealVariables15[50];
  preheater_LP1.tubes.fluidIn.VLETransp.lambda_l = RealVariables15[51];
  preheater_LP1.tubes.fluidIn.VLETransp.lambda_v = RealVariables15[52];
  preheater_LP1.tubes.fluidIn.VLETransp.eta_l = RealVariables15[53];
  preheater_LP1.tubes.fluidIn.VLETransp.eta_v = RealVariables15[54];
  preheater_LP1.tubes.fluidOut.cp = RealVariables15[55];
  preheater_LP1.tubes.fluidOut.cv = RealVariables15[56];
  preheater_LP1.tubes.fluidOut.beta = RealVariables15[57];
  preheater_LP1.tubes.fluidOut.kappa = RealVariables15[58];
  preheater_LP1.tubes.fluidOut.w = RealVariables15[59];
  preheater_LP1.tubes.fluidOut.drhodh_pxi = RealVariables15[60];
  preheater_LP1.tubes.fluidOut.drhodp_hxi = RealVariables15[61];
  preheater_LP1.tubes.fluidOut.gamma = RealVariables15[62];
  preheater_LP1.tubes.fluidOut.transp.Pr = RealVariables15[63];
  preheater_LP1.tubes.fluidOut.transp.lambda = RealVariables15[64];
  preheater_LP1.tubes.fluidOut.transp.eta = RealVariables15[65];
  preheater_LP1.tubes.fluidOut.transp.sigma = RealVariables15[66];
  preheater_LP1.tubes.fluidOut.VLE.d_l = RealVariables15[67];
  preheater_LP1.tubes.fluidOut.VLE.d_v = RealVariables15[68];
  preheater_LP1.tubes.fluidOut.VLE.h_l = RealVariables15[69];
  preheater_LP1.tubes.fluidOut.VLE.h_v = RealVariables15[70];
  preheater_LP1.tubes.fluidOut.VLE.p_l = RealVariables15[71];
  preheater_LP1.tubes.fluidOut.VLE.p_v = RealVariables15[72];
  preheater_LP1.tubes.fluidOut.VLE.s_l = RealVariables15[73];
  preheater_LP1.tubes.fluidOut.VLE.s_v = RealVariables15[74];
  preheater_LP1.tubes.fluidOut.VLE.T_l = RealVariables15[75];
  preheater_LP1.tubes.fluidOut.VLE.T_v = RealVariables15[76];
  preheater_LP1.tubes.fluidOut.VLEAdditional.cp_l = RealVariables15[77];
  preheater_LP1.tubes.fluidOut.VLEAdditional.cp_v = RealVariables15[78];
  preheater_LP1.tubes.fluidOut.VLEAdditional.beta_l = RealVariables15[79];
  preheater_LP1.tubes.fluidOut.VLEAdditional.beta_v = RealVariables15[80];
  preheater_LP1.tubes.fluidOut.VLEAdditional.kappa_l = RealVariables15[81];
  preheater_LP1.tubes.fluidOut.VLEAdditional.kappa_v = RealVariables15[82];
  preheater_LP1.tubes.fluidOut.VLETransp.Pr_l = RealVariables15[83];
  preheater_LP1.tubes.fluidOut.VLETransp.Pr_v = RealVariables15[84];
  preheater_LP1.tubes.fluidOut.VLETransp.lambda_l = RealVariables15[85];
  preheater_LP1.tubes.fluidOut.VLETransp.lambda_v = RealVariables15[86];
  preheater_LP1.tubes.fluidOut.VLETransp.eta_l = RealVariables15[87];
  preheater_LP1.tubes.fluidOut.VLETransp.eta_v = RealVariables15[88];
  preheater_LP1.tubes.heattransfer.Delta_T_wi = RealVariables15[89];
  preheater_LP1.tubes.heattransfer.Delta_T_wo = RealVariables15[90];
  preheater_LP1.tubes.heattransfer.Delta_T_mean = RealVariables15[91];
  preheater_LP1.tubes.heattransfer.Delta_T_U = RealVariables15[92];
  preheater_LP1.tubes.heattransfer.Delta_T_L = RealVariables15[93];
  preheater_LP1.tubes.heattransfer.alpha = RealVariables15[94];
  preheater_LP1.tubes.heattransfer.HR = RealVariables15[95];
  preheater_LP1.tubes.pressureLoss.Delta_p = RealVariables15[96];
  preheater_LP1.shell.h_liq = RealVariables15[97];
  preheater_LP1.shell.h_vap = RealVariables15[98];
  preheater_LP1.shell.drho_liqdt = RealVariables15[99];
  preheater_LP1.shell.drho_vapdt = RealVariables15[100];
  preheater_LP1.shell.volume_liq = RealVariables16[1];
  preheater_LP1.shell._volume_liq_der = RealVariables16[2];
  preheater_LP1.shell.volume_vap = RealVariables16[3];
  preheater_LP1.shell.m_flow_cond = RealVariables16[4];
  preheater_LP1.shell.m_flow_evap = RealVariables16[5];
  preheater_LP1.shell.Q_flow_phases = RealVariables16[6];
  preheater_LP1.shell.'Q_flow[1]' = RealVariables16[7];
  preheater_LP1.shell.'Q_flow[2]' = RealVariables16[8];
  preheater_LP1.shell.mass_liq = RealVariables16[9];
  preheater_LP1.shell.mass_vap = RealVariables16[10];
  preheater_LP1.shell._p_liq_der = RealVariables16[11];
  preheater_LP1.shell.p_vap = RealVariables16[12];
  preheater_LP1.shell.'H_flow_inliq[1]' = RealVariables16[13];
  preheater_LP1.shell.'H_flow_invap[1]' = RealVariables16[14];
  preheater_LP1.shell.'H_flow_outliq[1]' = RealVariables16[15];
  preheater_LP1.shell.'H_flow_outvap[1]' = RealVariables16[16];
  preheater_LP1.shell.'inlet[2]'.p = RealVariables16[17];
  preheater_LP1.shell.'inlet[2]'.h_outflow = RealVariables16[18];
  preheater_LP1.shell.'inlet[3]'.p = RealVariables16[19];
  preheater_LP1.shell.'inlet[3]'.h_outflow = RealVariables16[20];
  preheater_LP1.shell.'heat[1]'.T = RealVariables16[21];
  preheater_LP1.shell.'heat[1]'.Q_flow = RealVariables16[22];
  preheater_LP1.shell.'heat[2]'.Q_flow = RealVariables16[23];
  preheater_LP1.shell.'fluidIn[1]'.d = RealVariables16[24];
  preheater_LP1.shell.'fluidIn[1]'.h = RealVariables16[25];
  preheater_LP1.shell.'fluidIn[1]'.s = RealVariables16[26];
  preheater_LP1.shell.'fluidIn[1]'.T = RealVariables16[27];
  preheater_LP1.shell.'fluidIn[1]'.q = RealVariables16[28];
  preheater_LP1.shell.'fluidIn[1]'.cp = RealVariables16[29];
  preheater_LP1.shell.'fluidIn[1]'.cv = RealVariables16[30];
  preheater_LP1.shell.'fluidIn[1]'.beta = RealVariables16[31];
  preheater_LP1.shell.'fluidIn[1]'.kappa = RealVariables16[32];
  preheater_LP1.shell.'fluidIn[1]'.w = RealVariables16[33];
  preheater_LP1.shell.'fluidIn[1]'.drhodh_pxi = RealVariables16[34];
  preheater_LP1.shell.'fluidIn[1]'.drhodp_hxi = RealVariables16[35];
  preheater_LP1.shell.'fluidIn[1]'.gamma = RealVariables16[36];
  preheater_LP1.shell.'fluidIn[1]'.VLE.d_l = RealVariables16[37];
  preheater_LP1.shell.'fluidIn[1]'.VLE.d_v = RealVariables16[38];
  preheater_LP1.shell.'fluidIn[1]'.VLE.h_l = RealVariables16[39];
  preheater_LP1.shell.'fluidIn[1]'.VLE.h_v = RealVariables16[40];
  preheater_LP1.shell.'fluidIn[1]'.VLE.p_l = RealVariables16[41];
  preheater_LP1.shell.'fluidIn[1]'.VLE.p_v = RealVariables16[42];
  preheater_LP1.shell.'fluidIn[1]'.VLE.s_l = RealVariables16[43];
  preheater_LP1.shell.'fluidIn[1]'.VLE.s_v = RealVariables16[44];
  preheater_LP1.shell.'fluidIn[1]'.VLE.T_l = RealVariables16[45];
  preheater_LP1.shell.'fluidIn[1]'.VLE.T_v = RealVariables16[46];
  preheater_LP1.shell.'fluidIn[2]'.d = RealVariables16[47];
  preheater_LP1.shell.'fluidIn[2]'.s = RealVariables16[48];
  preheater_LP1.shell.'fluidIn[2]'.T = RealVariables16[49];
  preheater_LP1.shell.'fluidIn[2]'.q = RealVariables16[50];
  preheater_LP1.shell.'fluidIn[2]'.cp = RealVariables16[51];
  preheater_LP1.shell.'fluidIn[2]'.cv = RealVariables16[52];
  preheater_LP1.shell.'fluidIn[2]'.beta = RealVariables16[53];
  preheater_LP1.shell.'fluidIn[2]'.kappa = RealVariables16[54];
  preheater_LP1.shell.'fluidIn[2]'.w = RealVariables16[55];
  preheater_LP1.shell.'fluidIn[2]'.drhodh_pxi = RealVariables16[56];
  preheater_LP1.shell.'fluidIn[2]'.drhodp_hxi = RealVariables16[57];
  preheater_LP1.shell.'fluidIn[2]'.gamma = RealVariables16[58];
  preheater_LP1.shell.'fluidIn[2]'.VLE.d_l = RealVariables16[59];
  preheater_LP1.shell.'fluidIn[2]'.VLE.d_v = RealVariables16[60];
  preheater_LP1.shell.'fluidIn[2]'.VLE.h_l = RealVariables16[61];
  preheater_LP1.shell.'fluidIn[2]'.VLE.h_v = RealVariables16[62];
  preheater_LP1.shell.'fluidIn[2]'.VLE.p_l = RealVariables16[63];
  preheater_LP1.shell.'fluidIn[2]'.VLE.p_v = RealVariables16[64];
  preheater_LP1.shell.'fluidIn[2]'.VLE.s_l = RealVariables16[65];
  preheater_LP1.shell.'fluidIn[2]'.VLE.s_v = RealVariables16[66];
  preheater_LP1.shell.'fluidIn[2]'.VLE.T_l = RealVariables16[67];
  preheater_LP1.shell.'fluidIn[2]'.VLE.T_v = RealVariables16[68];
  preheater_LP1.shell.'fluidIn[3]'.d = RealVariables16[69];
  preheater_LP1.shell.'fluidIn[3]'.s = RealVariables16[70];
  preheater_LP1.shell.'fluidIn[3]'.T = RealVariables16[71];
  preheater_LP1.shell.'fluidIn[3]'.q = RealVariables16[72];
  preheater_LP1.shell.'fluidIn[3]'.cp = RealVariables16[73];
  preheater_LP1.shell.'fluidIn[3]'.cv = RealVariables16[74];
  preheater_LP1.shell.'fluidIn[3]'.beta = RealVariables16[75];
  preheater_LP1.shell.'fluidIn[3]'.kappa = RealVariables16[76];
  preheater_LP1.shell.'fluidIn[3]'.w = RealVariables16[77];
  preheater_LP1.shell.'fluidIn[3]'.drhodh_pxi = RealVariables16[78];
  preheater_LP1.shell.'fluidIn[3]'.drhodp_hxi = RealVariables16[79];
  preheater_LP1.shell.'fluidIn[3]'.gamma = RealVariables16[80];
  preheater_LP1.shell.'fluidIn[3]'.VLE.d_l = RealVariables16[81];
  preheater_LP1.shell.'fluidIn[3]'.VLE.d_v = RealVariables16[82];
  preheater_LP1.shell.'fluidIn[3]'.VLE.h_l = RealVariables16[83];
  preheater_LP1.shell.'fluidIn[3]'.VLE.h_v = RealVariables16[84];
  preheater_LP1.shell.'fluidIn[3]'.VLE.p_l = RealVariables16[85];
  preheater_LP1.shell.'fluidIn[3]'.VLE.p_v = RealVariables16[86];
  preheater_LP1.shell.'fluidIn[3]'.VLE.s_l = RealVariables16[87];
  preheater_LP1.shell.'fluidIn[3]'.VLE.s_v = RealVariables16[88];
  preheater_LP1.shell.'fluidIn[3]'.VLE.T_l = RealVariables16[89];
  preheater_LP1.shell.'fluidIn[3]'.VLE.T_v = RealVariables16[90];
  preheater_LP1.shell.'fluidOut[1]'.d = RealVariables16[91];
  preheater_LP1.shell.'fluidOut[1]'.h = RealVariables16[92];
  preheater_LP1.shell.'fluidOut[1]'.s = RealVariables16[93];
  preheater_LP1.shell.'fluidOut[1]'.T = RealVariables16[94];
  preheater_LP1.shell.'fluidOut[1]'.q = RealVariables16[95];
  preheater_LP1.shell.'fluidOut[1]'.cp = RealVariables16[96];
  preheater_LP1.shell.'fluidOut[1]'.cv = RealVariables16[97];
  preheater_LP1.shell.'fluidOut[1]'.beta = RealVariables16[98];
  preheater_LP1.shell.'fluidOut[1]'.kappa = RealVariables16[99];
  preheater_LP1.shell.'fluidOut[1]'.w = RealVariables16[100];
  preheater_LP1.shell.'fluidOut[1]'.drhodh_pxi = RealVariables17[1];
  preheater_LP1.shell.'fluidOut[1]'.drhodp_hxi = RealVariables17[2];
  preheater_LP1.shell.'fluidOut[1]'.gamma = RealVariables17[3];
  preheater_LP1.shell.'fluidOut[1]'.VLE.d_l = RealVariables17[4];
  preheater_LP1.shell.'fluidOut[1]'.VLE.d_v = RealVariables17[5];
  preheater_LP1.shell.'fluidOut[1]'.VLE.h_l = RealVariables17[6];
  preheater_LP1.shell.'fluidOut[1]'.VLE.h_v = RealVariables17[7];
  preheater_LP1.shell.'fluidOut[1]'.VLE.p_l = RealVariables17[8];
  preheater_LP1.shell.'fluidOut[1]'.VLE.p_v = RealVariables17[9];
  preheater_LP1.shell.'fluidOut[1]'.VLE.s_l = RealVariables17[10];
  preheater_LP1.shell.'fluidOut[1]'.VLE.s_v = RealVariables17[11];
  preheater_LP1.shell.'fluidOut[1]'.VLE.T_l = RealVariables17[12];
  preheater_LP1.shell.'fluidOut[1]'.VLE.T_v = RealVariables17[13];
  preheater_LP1.shell.heattransfer.'Delta_T_mean[1]' = RealVariables17[14];
  preheater_LP1.shell.heattransfer.'Delta_T_mean[2]' = RealVariables17[15];
  preheater_LP1.shell.heattransfer.Q_flow_tot = RealVariables17[16];
  preheater_LP1.shell.phaseBorder.'Delta_p_geo_in[1]' = RealVariables17[17];
  preheater_LP1.shell.phaseBorder.'Delta_p_geo_in[2]' = RealVariables17[18];
  preheater_LP1.shell.phaseBorder.'Delta_p_geo_in[3]' = RealVariables17[19];
  preheater_LP1.shell.phaseBorder.'Delta_p_geo_out[1]' = RealVariables17[20];
  preheater_LP1.shell.phaseBorder.'zoneAlloc_in[1]' = RealVariables17[21];
  preheater_LP1.shell.phaseBorder.'zoneAlloc_in[2]' = RealVariables17[22];
  preheater_LP1.shell.phaseBorder.'zoneAlloc_in[3]' = RealVariables17[23];
  preheater_LP1.shell.phaseBorder.'zoneAlloc_out[1]' = RealVariables17[24];
  preheater_LP1.shell.phaseBorder.level_abs = RealVariables17[25];
  preheater_LP1.shell.phaseBorder.'m_flow_inliq[1]' = RealVariables17[26];
  preheater_LP1.shell.phaseBorder.'m_flow_invap[1]' = RealVariables17[27];
  preheater_LP1.shell.phaseBorder.'m_flow_outliq[1]' = RealVariables17[28];
  preheater_LP1.shell.phaseBorder.'m_flow_outvap[1]' = RealVariables17[29];
  preheater_LP1.shell.phaseBorder.'H_flow_inliq[1]' = RealVariables17[30];
  preheater_LP1.shell.phaseBorder.'H_flow_invap[1]' = RealVariables17[31];
  preheater_LP1.shell.phaseBorder.'H_flow_outliq[1]' = RealVariables17[32];
  preheater_LP1.shell.phaseBorder.'H_flow_outvap[1]' = RealVariables17[33];
  preheater_LP1.shell.phaseBorder.'rho[1]' = RealVariables17[34];
  preheater_LP1.shell.phaseBorder.'rho[2]' = RealVariables17[35];
  preheater_LP1.shell.phaseBorder.'steamQuality_in[1]' = RealVariables17[36];
  preheater_LP1.shell.phaseBorder.'steamQuality_in[2]' = RealVariables17[37];
  preheater_LP1.shell.phaseBorder.'steamQuality_in[3]' = RealVariables17[38];
  preheater_LP1.shell.phaseBorder.'steamQuality_out[1]' = RealVariables17[39];
  preheater_LP1.shell.phaseBorder.A_hor_act = RealVariables17[40];
  preheater_LP1.shell.pressureLoss.'Delta_p[1]' = RealVariables17[41];
  preheater_LP1.shell.summary.outline.'A_heat[1]' = RealVariables17[42];
  preheater_LP1.shell.summary.outline.'A_heat[2]' = RealVariables17[43];
  preheater_LP1.shell.summary.outline.'yps[2]' = RealVariables17[44];
  preheater_LP1.shell.summary.outline.fluidMass = RealVariables17[45];
  preheater_LP1.shell.summary.outline.H_tot = RealVariables17[46];
  preheater_LP1.shell.summary.outline.Q_flow_tot = RealVariables17[47];
  preheater_LP1.shell.summary.outline.Delta_p = RealVariables17[48];
  preheater_LP1.shell.summary.'inlet[1]'.H_flow = RealVariables17[49];
  preheater_LP1.shell.summary.'outlet[1]'.H_flow = RealVariables17[50];
  preheater_LP1.shell.summary.fluid.'T[1]' = RealVariables17[51];
  preheater_LP1.shell.summary.fluid.'T[2]' = RealVariables17[52];
  preheater_LP1.shell.summary.fluid.'T_sat[1]' = RealVariables17[53];
  preheater_LP1.shell.summary.fluid.'T_sat[2]' = RealVariables17[54];
  preheater_LP1.shell.summary.fluid.'h_bub[1]' = RealVariables17[55];
  preheater_LP1.shell.summary.fluid.'h_bub[2]' = RealVariables17[56];
  preheater_LP1.shell.summary.fluid.'h_dew[1]' = RealVariables17[57];
  preheater_LP1.shell.summary.fluid.'h_dew[2]' = RealVariables17[58];
  preheater_LP1.shell.summary.fluid.'s[1]' = RealVariables17[59];
  preheater_LP1.shell.summary.fluid.'s[2]' = RealVariables17[60];
  preheater_LP1.shell.summary.fluid.'steamQuality[1]' = RealVariables17[61];
  preheater_LP1.shell.summary.fluid.'steamQuality[2]' = RealVariables17[62];
  preheater_LP1.shell.summary.fluid.'H[1]' = RealVariables17[63];
  preheater_LP1.shell.summary.fluid.'H[2]' = RealVariables17[64];
  preheater_LP1.shell.summary.fluid.'rho[1]' = RealVariables17[65];
  preheater_LP1.shell.summary.fluid.'rho[2]' = RealVariables17[66];
  preheater_LP1.wall.'T[1]' = RealVariables17[67];
  preheater_LP1.wall.'T[2]' = RealVariables17[68];
  preheater_LP1.wall.'T[3]' = RealVariables17[69];
  preheater_LP1.wall.'U[1]' = RealVariables17[70];
  preheater_LP1.wall.'U[2]' = RealVariables17[71];
  preheater_LP1.wall.'U[3]' = RealVariables17[72];
  preheater_LP1.wall.'Q_flow[1]' = RealVariables17[73];
  preheater_LP1.wall.'Q_flow[2]' = RealVariables17[74];
  preheater_LP1.wall.'Q_flow[3]' = RealVariables17[75];
  preheater_LP1.wall.'Q_flow[4]' = RealVariables17[76];
  preheater_LP1.wall.'Tdr[1]' = RealVariables17[77];
  preheater_LP1.wall.'Tdr[2]' = RealVariables17[78];
  preheater_LP1.wall.'Tdr[3]' = RealVariables17[79];
  preheater_LP1.wall.'Tdr[4]' = RealVariables17[80];
  preheater_LP1.wall.T_mean = RealVariables17[81];
  preheater_LP1.wall.outerPhase.Q_flow = RealVariables17[82];
  preheater_LP1.summary.outline.Q_flow = RealVariables17[83];
  preheater_LP1.summary.outline.Delta_T_in = RealVariables17[84];
  preheater_LP1.summary.outline.Delta_T_out = RealVariables17[85];
  preheater_LP1.summary.outline.kA = RealVariables17[86];
  preheater_LP1.'eye_int2[1]'.p = RealVariables17[87];
  preheater_LP1.'eye_int2[1]'.h = RealVariables17[88];
  preheater_LP1.'eye_int2[1]'.T = RealVariables17[89];
  preheater_LP1.'eye_int2[1]'.s = RealVariables17[90];
  preheater_LP1.'eye_int1[1]'.p = RealVariables17[91];
  preheater_LP1.'eye_int1[1]'.h = RealVariables17[92];
  preheater_LP1.'eye_int1[1]'.T = RealVariables17[93];
  preheater_LP1.'eye_int1[1]'.s = RealVariables17[94];
  PI_valveControl_preheater_HP.controlError = RealVariables17[95];
  PI_valveControl_preheater_HP.resetValueP = RealVariables17[96];
  PI_valveControl_preheater_HP.resetValueID = RealVariables17[97];
  PI_valveControl_preheater_HP.resetValueI = RealVariables17[98];
  PI_valveControl_preheater_HP.P.u = RealVariables17[99];
  PI_valveControl_preheater_HP.P.y = RealVariables17[100];
  PI_valveControl_preheater_HP.I.u = RealVariables18[1];
  PI_valveControl_preheater_HP.I.y = RealVariables18[2];
  PI_valveControl_preheater_HP.addPID.y = RealVariables18[3];
  PI_valveControl_preheater_HP.addI.u1 = RealVariables18[4];
  PI_valveControl_preheater_HP.addI.u2 = RealVariables18[5];
  PI_valveControl_preheater_HP.addI.y = RealVariables18[6];
  PI_valveControl_preheater_HP.gainTrack.u = RealVariables18[7];
  PI_valveControl_preheater_HP.limiter.u = RealVariables18[8];
  PI_valveControl_preheater_HP.switch_OnOff.u1 = RealVariables18[9];
  PI_valveControl_preheater_HP.smoothPIDInput.y_aux = RealVariables18[10];
  PI_valveControl_preheater_HP.smoothPIDOutput.y_aux = RealVariables18[11];
  PI_valveControl_preheater_HP.smoothPIDOutput1.y_aux = RealVariables18[12];
  PI_valveControl_preheater_HP.time_lag_I_activation.y = RealVariables18[13];
  measurement.y = RealVariables18[14];
  valvePreFeedWaterTank.pressureLoss.Delta_p = RealVariables18[15];
  valvePreFeedWaterTank.summary.outline.V_flow = RealVariables18[16];
  valvePreFeedWaterTank.summary.outline.PR = RealVariables18[17];
  valvePreFeedWaterTank.summary.inlet.T = RealVariables18[18];
  valvePreFeedWaterTank.summary.inlet.h = RealVariables18[19];
  valvePreFeedWaterTank.summary.inlet.s = RealVariables18[20];
  valvePreFeedWaterTank.summary.inlet.steamQuality = RealVariables18[21];
  valvePreFeedWaterTank.summary.inlet.H_flow = RealVariables18[22];
  valvePreFeedWaterTank.summary.inlet.rho = RealVariables18[23];
  valvePreFeedWaterTank.summary.outlet.T = RealVariables18[24];
  valvePreFeedWaterTank.summary.outlet.h = RealVariables18[25];
  valvePreFeedWaterTank.summary.outlet.s = RealVariables18[26];
  valvePreFeedWaterTank.summary.outlet.steamQuality = RealVariables18[27];
  valvePreFeedWaterTank.summary.outlet.H_flow = RealVariables18[28];
  valvePreFeedWaterTank.summary.outlet.rho = RealVariables18[29];
  valvePreFeedWaterTank.eye.p = RealVariables18[30];
  valvePreFeedWaterTank.eye.h = RealVariables18[31];
  valvePreFeedWaterTank.eye.T = RealVariables18[32];
  valvePreFeedWaterTank.eye.s = RealVariables18[33];
  join_LP_main.'H_flow_in[1]' = RealVariables18[34];
  join_LP_main.'H_flow_in[2]' = RealVariables18[35];
  join_LP_main.H_flow_out = RealVariables18[36];
  join_LP_main.h = RealVariables18[37];
  join_LP_main.mass = RealVariables18[38];
  join_LP_main.drhodt = RealVariables18[39];
  join_LP_main.p = RealVariables18[40];
  join_LP_main.summary.inlet1.T = RealVariables18[41];
  join_LP_main.summary.inlet1.h = RealVariables18[42];
  join_LP_main.summary.inlet1.s = RealVariables18[43];
  join_LP_main.summary.inlet1.steamQuality = RealVariables18[44];
  join_LP_main.summary.inlet1.H_flow = RealVariables18[45];
  join_LP_main.summary.inlet1.rho = RealVariables18[46];
  join_LP_main.summary.inlet2.T = RealVariables18[47];
  join_LP_main.summary.inlet2.h = RealVariables18[48];
  join_LP_main.summary.inlet2.s = RealVariables18[49];
  join_LP_main.summary.inlet2.steamQuality = RealVariables18[50];
  join_LP_main.summary.inlet2.H_flow = RealVariables18[51];
  join_LP_main.summary.inlet2.rho = RealVariables18[52];
  join_LP_main.summary.outlet.T = RealVariables18[53];
  join_LP_main.summary.outlet.h = RealVariables18[54];
  join_LP_main.summary.outlet.s = RealVariables18[55];
  join_LP_main.summary.outlet.steamQuality = RealVariables18[56];
  join_LP_main.summary.outlet.H_flow = RealVariables18[57];
  join_LP_main.summary.outlet.rho = RealVariables18[58];
  join_LP_main.summary.fluid.T = RealVariables18[59];
  join_LP_main.summary.fluid.T_sat = RealVariables18[60];
  join_LP_main.summary.fluid.h_bub = RealVariables18[61];
  join_LP_main.summary.fluid.h_dew = RealVariables18[62];
  join_LP_main.summary.fluid.s = RealVariables18[63];
  join_LP_main.summary.fluid.steamQuality = RealVariables18[64];
  join_LP_main.summary.fluid.H = RealVariables18[65];
  join_LP_main.summary.fluid.rho = RealVariables18[66];
  join_LP_main.pressureLossOut.dp = RealVariables18[67];
  join_LP_main.outlet.m_flow = RealVariables18[68];
  join_LP_main.eye.p = RealVariables18[69];
  join_LP_main.eye.h = RealVariables18[70];
  join_LP_main.eye.T = RealVariables18[71];
  join_LP_main.eye.s = RealVariables18[72];
  PI_preheater1.controlError = RealVariables18[73];
  PI_preheater1.resetValueP = RealVariables18[74];
  PI_preheater1.resetValueID = RealVariables18[75];
  PI_preheater1.resetValueI = RealVariables18[76];
  PI_preheater1.P.u = RealVariables18[77];
  PI_preheater1.P.y = RealVariables18[78];
  PI_preheater1.I.u = RealVariables18[79];
  PI_preheater1.I.y = RealVariables18[80];
  PI_preheater1.addPID.y = RealVariables18[81];
  PI_preheater1.addI.u1 = RealVariables18[82];
  PI_preheater1.addI.u2 = RealVariables18[83];
  PI_preheater1.addI.y = RealVariables18[84];
  PI_preheater1.gainTrack.u = RealVariables18[85];
  PI_preheater1.limiter.u = RealVariables18[86];
  PI_preheater1.limiter.y = RealVariables18[87];
  PI_preheater1.toPU.u = RealVariables18[88];
  PI_preheater1.switch_OnOff.u1 = RealVariables18[89];
  PI_preheater1.smoothPIDInput.y_aux = RealVariables18[90];
  PI_preheater1.smoothPIDOutput.y_aux = RealVariables18[91];
  PI_preheater1.smoothPIDOutput1.y_aux = RealVariables18[92];
  PI_preheater1.time_lag_I_activation.y = RealVariables18[93];
  electricalPower.x1 = RealVariables18[94];
  Turbine_IP3.h_is = RealVariables18[95];
  Turbine_IP3.P_t = RealVariables18[96];
  Turbine_IP3.eta_is = RealVariables18[97];
  Turbine_IP3.S_irr = RealVariables18[98];
  Turbine_IP3.p_l = RealVariables18[99];
  Turbine_IP3.rpm = RealVariables18[100];
  Turbine_IP3.inlet.m_flow = RealVariables19[1];
  Turbine_IP3.outlet.m_flow = RealVariables19[2];
  Turbine_IP3.outlet.h_outflow = RealVariables19[3];
  Turbine_IP3.iCom.rho_in = RealVariables19[4];
  Turbine_IP3.iCom.Delta_h_is = RealVariables19[5];
  Turbine_IP3.summary.outline.Delta_p = RealVariables19[6];
  Turbine_IP3.summary.outline.P_mech = RealVariables19[7];
  Turbine_IP3.summary.inlet.T = RealVariables19[8];
  Turbine_IP3.summary.inlet.s = RealVariables19[9];
  Turbine_IP3.summary.inlet.steamQuality = RealVariables19[10];
  Turbine_IP3.summary.inlet.H_flow = RealVariables19[11];
  Turbine_IP3.summary.outlet.T = RealVariables19[12];
  Turbine_IP3.summary.outlet.s = RealVariables19[13];
  Turbine_IP3.summary.outlet.steamQuality = RealVariables19[14];
  Turbine_IP3.summary.outlet.H_flow = RealVariables19[15];
  Turbine_IP3.summary.outlet.rho = RealVariables19[16];
  Turbine_IP3.shaft_a.tau = RealVariables19[17];
  Turbine_IP3.shaft_b.tau = RealVariables19[18];
  Turbine_IP3.eye.p = RealVariables19[19];
  Turbine_IP3.eye.h = RealVariables19[20];
  Turbine_IP3.eye.T = RealVariables19[21];
  Turbine_IP3.eye.s = RealVariables19[22];
  Turbine_IP2.h_is = RealVariables19[23];
  Turbine_IP2.P_t = RealVariables19[24];
  Turbine_IP2.eta_is = RealVariables19[25];
  Turbine_IP2.S_irr = RealVariables19[26];
  Turbine_IP2.p_l = RealVariables19[27];
  Turbine_IP2.rpm = RealVariables19[28];
  Turbine_IP2.outlet.h_outflow = RealVariables19[29];
  Turbine_IP2.iCom.rho_in = RealVariables19[30];
  Turbine_IP2.iCom.Delta_h_is = RealVariables19[31];
  Turbine_IP2.summary.outline.Delta_p = RealVariables19[32];
  Turbine_IP2.summary.outline.P_mech = RealVariables19[33];
  Turbine_IP2.summary.inlet.T = RealVariables19[34];
  Turbine_IP2.summary.inlet.s = RealVariables19[35];
  Turbine_IP2.summary.inlet.steamQuality = RealVariables19[36];
  Turbine_IP2.summary.inlet.H_flow = RealVariables19[37];
  Turbine_IP2.summary.outlet.T = RealVariables19[38];
  Turbine_IP2.summary.outlet.s = RealVariables19[39];
  Turbine_IP2.summary.outlet.steamQuality = RealVariables19[40];
  Turbine_IP2.summary.outlet.H_flow = RealVariables19[41];
  Turbine_IP2.summary.outlet.rho = RealVariables19[42];
  Turbine_IP2.shaft_a.tau = RealVariables19[43];
  Turbine_IP2.shaft_b.tau = RealVariables19[44];
  Turbine_IP2.eye.p = RealVariables19[45];
  Turbine_IP2.eye.h = RealVariables19[46];
  Turbine_IP2.eye.T = RealVariables19[47];
  Turbine_IP2.eye.s = RealVariables19[48];
  split_IP2.H_flow_in = RealVariables19[49];
  split_IP2.'H_flow_out[1]' = RealVariables19[50];
  split_IP2.'H_flow_out[2]' = RealVariables19[51];
  split_IP2.h = RealVariables19[52];
  split_IP2.mass = RealVariables19[53];
  split_IP2.drhodt = RealVariables19[54];
  split_IP2.p = RealVariables19[55];
  split_IP2.'eye[1]'.p = RealVariables19[56];
  split_IP2.'eye[1]'.h = RealVariables19[57];
  split_IP2.'eye[1]'.T = RealVariables19[58];
  split_IP2.'eye[1]'.s = RealVariables19[59];
  split_IP2.'eye[2]'.p = RealVariables19[60];
  split_IP2.'eye[2]'.h = RealVariables19[61];
  split_IP2.'eye[2]'.T = RealVariables19[62];
  split_IP2.'eye[2]'.s = RealVariables19[63];
  split_IP2.summary.inlet.T = RealVariables19[64];
  split_IP2.summary.inlet.h = RealVariables19[65];
  split_IP2.summary.inlet.s = RealVariables19[66];
  split_IP2.summary.inlet.steamQuality = RealVariables19[67];
  split_IP2.summary.inlet.H_flow = RealVariables19[68];
  split_IP2.summary.inlet.rho = RealVariables19[69];
  split_IP2.summary.outlet1.T = RealVariables19[70];
  split_IP2.summary.outlet1.h = RealVariables19[71];
  split_IP2.summary.outlet1.s = RealVariables19[72];
  split_IP2.summary.outlet1.steamQuality = RealVariables19[73];
  split_IP2.summary.outlet1.H_flow = RealVariables19[74];
  split_IP2.summary.outlet1.rho = RealVariables19[75];
  split_IP2.summary.outlet2.T = RealVariables19[76];
  split_IP2.summary.outlet2.h = RealVariables19[77];
  split_IP2.summary.outlet2.s = RealVariables19[78];
  split_IP2.summary.outlet2.steamQuality = RealVariables19[79];
  split_IP2.summary.outlet2.H_flow = RealVariables19[80];
  split_IP2.summary.outlet2.rho = RealVariables19[81];
  split_IP2.summary.fluid.T = RealVariables19[82];
  split_IP2.summary.fluid.T_sat = RealVariables19[83];
  split_IP2.summary.fluid.h_bub = RealVariables19[84];
  split_IP2.summary.fluid.h_dew = RealVariables19[85];
  split_IP2.summary.fluid.s = RealVariables19[86];
  split_IP2.summary.fluid.steamQuality = RealVariables19[87];
  split_IP2.summary.fluid.H = RealVariables19[88];
  split_IP2.summary.fluid.rho = RealVariables19[89];
  join_IP3.H_flow_in = RealVariables19[90];
  join_IP3.'H_flow_out[1]' = RealVariables19[91];
  join_IP3.'H_flow_out[2]' = RealVariables19[92];
  join_IP3.h = RealVariables19[93];
  join_IP3.mass = RealVariables19[94];
  join_IP3.drhodt = RealVariables19[95];
  join_IP3.p = RealVariables19[96];
  join_IP3.'eye[1]'.p = RealVariables19[97];
  join_IP3.'eye[1]'.h = RealVariables19[98];
  join_IP3.'eye[1]'.T = RealVariables19[99];
  join_IP3.'eye[1]'.s = RealVariables19[100];
  join_IP3.'eye[2]'.p = RealVariables20[1];
  join_IP3.'eye[2]'.h = RealVariables20[2];
  join_IP3.'eye[2]'.T = RealVariables20[3];
  join_IP3.'eye[2]'.s = RealVariables20[4];
  join_IP3.summary.inlet.T = RealVariables20[5];
  join_IP3.summary.inlet.h = RealVariables20[6];
  join_IP3.summary.inlet.s = RealVariables20[7];
  join_IP3.summary.inlet.steamQuality = RealVariables20[8];
  join_IP3.summary.inlet.H_flow = RealVariables20[9];
  join_IP3.summary.inlet.rho = RealVariables20[10];
  join_IP3.summary.outlet1.T = RealVariables20[11];
  join_IP3.summary.outlet1.h = RealVariables20[12];
  join_IP3.summary.outlet1.s = RealVariables20[13];
  join_IP3.summary.outlet1.steamQuality = RealVariables20[14];
  join_IP3.summary.outlet1.H_flow = RealVariables20[15];
  join_IP3.summary.outlet1.rho = RealVariables20[16];
  join_IP3.summary.outlet2.T = RealVariables20[17];
  join_IP3.summary.outlet2.h = RealVariables20[18];
  join_IP3.summary.outlet2.s = RealVariables20[19];
  join_IP3.summary.outlet2.steamQuality = RealVariables20[20];
  join_IP3.summary.outlet2.H_flow = RealVariables20[21];
  join_IP3.summary.outlet2.rho = RealVariables20[22];
  join_IP3.summary.fluid.T = RealVariables20[23];
  join_IP3.summary.fluid.T_sat = RealVariables20[24];
  join_IP3.summary.fluid.h_bub = RealVariables20[25];
  join_IP3.summary.fluid.h_dew = RealVariables20[26];
  join_IP3.summary.fluid.s = RealVariables20[27];
  join_IP3.summary.fluid.steamQuality = RealVariables20[28];
  join_IP3.summary.fluid.H = RealVariables20[29];
  join_IP3.summary.fluid.rho = RealVariables20[30];
  Turbine_LP3.h_is = RealVariables20[31];
  Turbine_LP3.P_t = RealVariables20[32];
  Turbine_LP3.eta_is = RealVariables20[33];
  Turbine_LP3.S_irr = RealVariables20[34];
  Turbine_LP3.p_l = RealVariables20[35];
  Turbine_LP3.rpm = RealVariables20[36];
  Turbine_LP3.inlet.m_flow = RealVariables20[37];
  Turbine_LP3.outlet.m_flow = RealVariables20[38];
  Turbine_LP3.outlet.h_outflow = RealVariables20[39];
  Turbine_LP3.iCom.rho_in = RealVariables20[40];
  Turbine_LP3.iCom.Delta_h_is = RealVariables20[41];
  Turbine_LP3.summary.outline.Delta_p = RealVariables20[42];
  Turbine_LP3.summary.outline.P_mech = RealVariables20[43];
  Turbine_LP3.summary.inlet.T = RealVariables20[44];
  Turbine_LP3.summary.inlet.s = RealVariables20[45];
  Turbine_LP3.summary.inlet.steamQuality = RealVariables20[46];
  Turbine_LP3.summary.inlet.H_flow = RealVariables20[47];
  Turbine_LP3.summary.outlet.T = RealVariables20[48];
  Turbine_LP3.summary.outlet.s = RealVariables20[49];
  Turbine_LP3.summary.outlet.steamQuality = RealVariables20[50];
  Turbine_LP3.summary.outlet.H_flow = RealVariables20[51];
  Turbine_LP3.summary.outlet.rho = RealVariables20[52];
  Turbine_LP3.shaft_a.tau = RealVariables20[53];
  Turbine_LP3.shaft_b.tau = RealVariables20[54];
  Turbine_LP3.eye.p = RealVariables20[55];
  Turbine_LP3.eye.h = RealVariables20[56];
  Turbine_LP3.eye.T = RealVariables20[57];
  Turbine_LP3.eye.s = RealVariables20[58];
  Turbine_LP2.h_is = RealVariables20[59];
  Turbine_LP2.P_t = RealVariables20[60];
  Turbine_LP2.eta_is = RealVariables20[61];
  Turbine_LP2.S_irr = RealVariables20[62];
  Turbine_LP2.p_l = RealVariables20[63];
  Turbine_LP2.rpm = RealVariables20[64];
  Turbine_LP2.outlet.h_outflow = RealVariables20[65];
  Turbine_LP2.iCom.rho_in = RealVariables20[66];
  Turbine_LP2.iCom.Delta_h_is = RealVariables20[67];
  Turbine_LP2.summary.outline.Delta_p = RealVariables20[68];
  Turbine_LP2.summary.outline.P_mech = RealVariables20[69];
  Turbine_LP2.summary.inlet.T = RealVariables20[70];
  Turbine_LP2.summary.inlet.s = RealVariables20[71];
  Turbine_LP2.summary.inlet.steamQuality = RealVariables20[72];
  Turbine_LP2.summary.inlet.H_flow = RealVariables20[73];
  Turbine_LP2.summary.outlet.T = RealVariables20[74];
  Turbine_LP2.summary.outlet.s = RealVariables20[75];
  Turbine_LP2.summary.outlet.steamQuality = RealVariables20[76];
  Turbine_LP2.summary.outlet.H_flow = RealVariables20[77];
  Turbine_LP2.summary.outlet.rho = RealVariables20[78];
  Turbine_LP2.shaft_a.tau = RealVariables20[79];
  Turbine_LP2.shaft_b.tau = RealVariables20[80];
  Turbine_LP2.eye.p = RealVariables20[81];
  Turbine_LP2.eye.h = RealVariables20[82];
  Turbine_LP2.eye.T = RealVariables20[83];
  Turbine_LP2.eye.s = RealVariables20[84];
  join_LP2.H_flow_in = RealVariables20[85];
  join_LP2.'H_flow_out[1]' = RealVariables20[86];
  join_LP2.'H_flow_out[2]' = RealVariables20[87];
  join_LP2.h = RealVariables20[88];
  join_LP2.mass = RealVariables20[89];
  join_LP2.drhodt = RealVariables20[90];
  join_LP2.p = RealVariables20[91];
  join_LP2.'eye[1]'.p = RealVariables20[92];
  join_LP2.'eye[1]'.h = RealVariables20[93];
  join_LP2.'eye[1]'.T = RealVariables20[94];
  join_LP2.'eye[1]'.s = RealVariables20[95];
  join_LP2.'eye[2]'.p = RealVariables20[96];
  join_LP2.'eye[2]'.h = RealVariables20[97];
  join_LP2.'eye[2]'.m_flow = RealVariables20[98];
  join_LP2.'eye[2]'.T = RealVariables20[99];
  join_LP2.'eye[2]'.s = RealVariables20[100];
  join_LP2.summary.inlet.T = RealVariables21[1];
  join_LP2.summary.inlet.h = RealVariables21[2];
  join_LP2.summary.inlet.s = RealVariables21[3];
  join_LP2.summary.inlet.steamQuality = RealVariables21[4];
  join_LP2.summary.inlet.H_flow = RealVariables21[5];
  join_LP2.summary.inlet.rho = RealVariables21[6];
  join_LP2.summary.outlet1.T = RealVariables21[7];
  join_LP2.summary.outlet1.h = RealVariables21[8];
  join_LP2.summary.outlet1.s = RealVariables21[9];
  join_LP2.summary.outlet1.steamQuality = RealVariables21[10];
  join_LP2.summary.outlet1.H_flow = RealVariables21[11];
  join_LP2.summary.outlet1.rho = RealVariables21[12];
  join_LP2.summary.outlet2.T = RealVariables21[13];
  join_LP2.summary.outlet2.h = RealVariables21[14];
  join_LP2.summary.outlet2.s = RealVariables21[15];
  join_LP2.summary.outlet2.steamQuality = RealVariables21[16];
  join_LP2.summary.outlet2.H_flow = RealVariables21[17];
  join_LP2.summary.outlet2.rho = RealVariables21[18];
  join_LP2.summary.fluid.T = RealVariables21[19];
  join_LP2.summary.fluid.T_sat = RealVariables21[20];
  join_LP2.summary.fluid.h_bub = RealVariables21[21];
  join_LP2.summary.fluid.h_dew = RealVariables21[22];
  join_LP2.summary.fluid.s = RealVariables21[23];
  join_LP2.summary.fluid.steamQuality = RealVariables21[24];
  join_LP2.summary.fluid.H = RealVariables21[25];
  join_LP2.summary.fluid.rho = RealVariables21[26];
  join_LP2.outlet2.m_flow = RealVariables21[27];
  split_LP3.H_flow_in = RealVariables21[28];
  split_LP3.'H_flow_out[1]' = RealVariables21[29];
  split_LP3.'H_flow_out[2]' = RealVariables21[30];
  split_LP3.h = RealVariables21[31];
  split_LP3.mass = RealVariables21[32];
  split_LP3.drhodt = RealVariables21[33];
  split_LP3.p = RealVariables21[34];
  split_LP3.'eye[1]'.p = RealVariables21[35];
  split_LP3.'eye[1]'.h = RealVariables21[36];
  split_LP3.'eye[1]'.T = RealVariables21[37];
  split_LP3.'eye[1]'.s = RealVariables21[38];
  split_LP3.'eye[2]'.p = RealVariables21[39];
  split_LP3.'eye[2]'.h = RealVariables21[40];
  split_LP3.'eye[2]'.m_flow = RealVariables21[41];
  split_LP3.'eye[2]'.T = RealVariables21[42];
  split_LP3.'eye[2]'.s = RealVariables21[43];
  split_LP3.summary.inlet.T = RealVariables21[44];
  split_LP3.summary.inlet.h = RealVariables21[45];
  split_LP3.summary.inlet.s = RealVariables21[46];
  split_LP3.summary.inlet.steamQuality = RealVariables21[47];
  split_LP3.summary.inlet.H_flow = RealVariables21[48];
  split_LP3.summary.inlet.rho = RealVariables21[49];
  split_LP3.summary.outlet1.T = RealVariables21[50];
  split_LP3.summary.outlet1.h = RealVariables21[51];
  split_LP3.summary.outlet1.s = RealVariables21[52];
  split_LP3.summary.outlet1.steamQuality = RealVariables21[53];
  split_LP3.summary.outlet1.H_flow = RealVariables21[54];
  split_LP3.summary.outlet1.rho = RealVariables21[55];
  split_LP3.summary.outlet2.T = RealVariables21[56];
  split_LP3.summary.outlet2.h = RealVariables21[57];
  split_LP3.summary.outlet2.s = RealVariables21[58];
  split_LP3.summary.outlet2.steamQuality = RealVariables21[59];
  split_LP3.summary.outlet2.H_flow = RealVariables21[60];
  split_LP3.summary.outlet2.rho = RealVariables21[61];
  split_LP3.summary.fluid.T = RealVariables21[62];
  split_LP3.summary.fluid.T_sat = RealVariables21[63];
  split_LP3.summary.fluid.h_bub = RealVariables21[64];
  split_LP3.summary.fluid.h_dew = RealVariables21[65];
  split_LP3.summary.fluid.s = RealVariables21[66];
  split_LP3.summary.fluid.steamQuality = RealVariables21[67];
  split_LP3.summary.fluid.H = RealVariables21[68];
  split_LP3.summary.fluid.rho = RealVariables21[69];
  split_LP3.outlet2.m_flow = RealVariables21[70];
  valve_LP1.inlet.h_outflow = RealVariables21[71];
  valve_LP1.outlet.p = RealVariables21[72];
  valve_LP1.pressureLoss.Delta_p = RealVariables21[73];
  valve_LP1.summary.outline.V_flow = RealVariables21[74];
  valve_LP1.summary.outline.PR = RealVariables21[75];
  valve_LP1.summary.inlet.T = RealVariables21[76];
  valve_LP1.summary.inlet.s = RealVariables21[77];
  valve_LP1.summary.inlet.steamQuality = RealVariables21[78];
  valve_LP1.summary.inlet.H_flow = RealVariables21[79];
  valve_LP1.summary.inlet.rho = RealVariables21[80];
  valve_LP1.summary.outlet.T = RealVariables21[81];
  valve_LP1.summary.outlet.s = RealVariables21[82];
  valve_LP1.summary.outlet.steamQuality = RealVariables21[83];
  valve_LP1.summary.outlet.H_flow = RealVariables21[84];
  valve_LP1.summary.outlet.rho = RealVariables21[85];
  valve_LP1.eye.p = RealVariables21[86];
  valve_LP1.eye.h = RealVariables21[87];
  valve_LP1.eye.T = RealVariables21[88];
  valve_LP1.eye.s = RealVariables21[89];
  preheater_LP2.level = RealVariables21[90];
  preheater_LP2.In2.m_flow = RealVariables21[91];
  preheater_LP2.Out2.m_flow = RealVariables21[92];
  preheater_LP2.Out1.m_flow = RealVariables21[93];
  preheater_LP2.Out1.p = RealVariables21[94];
  preheater_LP2.Out1.h_outflow = RealVariables21[95];
  preheater_LP2.tubes.p = RealVariables21[96];
  preheater_LP2.tubes.h = RealVariables21[97];
  preheater_LP2.tubes.mass = RealVariables21[98];
  preheater_LP2.tubes.heat.T = RealVariables21[99];
  preheater_LP2.tubes.heat.Q_flow = RealVariables21[100];
  preheater_LP2.tubes.summary.outline.Delta_p = RealVariables22[1];
  preheater_LP2.tubes.summary.inlet.T = RealVariables22[2];
  preheater_LP2.tubes.summary.inlet.h = RealVariables22[3];
  preheater_LP2.tubes.summary.inlet.s = RealVariables22[4];
  preheater_LP2.tubes.summary.inlet.steamQuality = RealVariables22[5];
  preheater_LP2.tubes.summary.inlet.H_flow = RealVariables22[6];
  preheater_LP2.tubes.summary.inlet.rho = RealVariables22[7];
  preheater_LP2.tubes.summary.outlet.T = RealVariables22[8];
  preheater_LP2.tubes.summary.outlet.h = RealVariables22[9];
  preheater_LP2.tubes.summary.outlet.s = RealVariables22[10];
  preheater_LP2.tubes.summary.outlet.steamQuality = RealVariables22[11];
  preheater_LP2.tubes.summary.outlet.H_flow = RealVariables22[12];
  preheater_LP2.tubes.summary.outlet.rho = RealVariables22[13];
  preheater_LP2.tubes.summary.fluid.T = RealVariables22[14];
  preheater_LP2.tubes.summary.fluid.T_sat = RealVariables22[15];
  preheater_LP2.tubes.summary.fluid.h_bub = RealVariables22[16];
  preheater_LP2.tubes.summary.fluid.h_dew = RealVariables22[17];
  preheater_LP2.tubes.summary.fluid.s = RealVariables22[18];
  preheater_LP2.tubes.summary.fluid.steamQuality = RealVariables22[19];
  preheater_LP2.tubes.summary.fluid.H = RealVariables22[20];
  preheater_LP2.tubes.summary.fluid.rho = RealVariables22[21];
  preheater_LP2.tubes.fluidIn.cp = RealVariables22[22];
  preheater_LP2.tubes.fluidIn.cv = RealVariables22[23];
  preheater_LP2.tubes.fluidIn.beta = RealVariables22[24];
  preheater_LP2.tubes.fluidIn.kappa = RealVariables22[25];
  preheater_LP2.tubes.fluidIn.w = RealVariables22[26];
  preheater_LP2.tubes.fluidIn.drhodh_pxi = RealVariables22[27];
  preheater_LP2.tubes.fluidIn.drhodp_hxi = RealVariables22[28];
  preheater_LP2.tubes.fluidIn.gamma = RealVariables22[29];
  preheater_LP2.tubes.fluidIn.transp.Pr = RealVariables22[30];
  preheater_LP2.tubes.fluidIn.transp.lambda = RealVariables22[31];
  preheater_LP2.tubes.fluidIn.transp.eta = RealVariables22[32];
  preheater_LP2.tubes.fluidIn.transp.sigma = RealVariables22[33];
  preheater_LP2.tubes.fluidIn.VLE.d_l = RealVariables22[34];
  preheater_LP2.tubes.fluidIn.VLE.d_v = RealVariables22[35];
  preheater_LP2.tubes.fluidIn.VLE.h_l = RealVariables22[36];
  preheater_LP2.tubes.fluidIn.VLE.h_v = RealVariables22[37];
  preheater_LP2.tubes.fluidIn.VLE.p_l = RealVariables22[38];
  preheater_LP2.tubes.fluidIn.VLE.p_v = RealVariables22[39];
  preheater_LP2.tubes.fluidIn.VLE.s_l = RealVariables22[40];
  preheater_LP2.tubes.fluidIn.VLE.s_v = RealVariables22[41];
  preheater_LP2.tubes.fluidIn.VLE.T_l = RealVariables22[42];
  preheater_LP2.tubes.fluidIn.VLE.T_v = RealVariables22[43];
  preheater_LP2.tubes.fluidIn.VLEAdditional.cp_l = RealVariables22[44];
  preheater_LP2.tubes.fluidIn.VLEAdditional.cp_v = RealVariables22[45];
  preheater_LP2.tubes.fluidIn.VLEAdditional.beta_l = RealVariables22[46];
  preheater_LP2.tubes.fluidIn.VLEAdditional.beta_v = RealVariables22[47];
  preheater_LP2.tubes.fluidIn.VLEAdditional.kappa_l = RealVariables22[48];
  preheater_LP2.tubes.fluidIn.VLEAdditional.kappa_v = RealVariables22[49];
  preheater_LP2.tubes.fluidIn.VLETransp.Pr_l = RealVariables22[50];
  preheater_LP2.tubes.fluidIn.VLETransp.Pr_v = RealVariables22[51];
  preheater_LP2.tubes.fluidIn.VLETransp.lambda_l = RealVariables22[52];
  preheater_LP2.tubes.fluidIn.VLETransp.lambda_v = RealVariables22[53];
  preheater_LP2.tubes.fluidIn.VLETransp.eta_l = RealVariables22[54];
  preheater_LP2.tubes.fluidIn.VLETransp.eta_v = RealVariables22[55];
  preheater_LP2.tubes.fluidOut.cp = RealVariables22[56];
  preheater_LP2.tubes.fluidOut.cv = RealVariables22[57];
  preheater_LP2.tubes.fluidOut.beta = RealVariables22[58];
  preheater_LP2.tubes.fluidOut.kappa = RealVariables22[59];
  preheater_LP2.tubes.fluidOut.w = RealVariables22[60];
  preheater_LP2.tubes.fluidOut.drhodh_pxi = RealVariables22[61];
  preheater_LP2.tubes.fluidOut.drhodp_hxi = RealVariables22[62];
  preheater_LP2.tubes.fluidOut.gamma = RealVariables22[63];
  preheater_LP2.tubes.fluidOut.transp.Pr = RealVariables22[64];
  preheater_LP2.tubes.fluidOut.transp.lambda = RealVariables22[65];
  preheater_LP2.tubes.fluidOut.transp.eta = RealVariables22[66];
  preheater_LP2.tubes.fluidOut.transp.sigma = RealVariables22[67];
  preheater_LP2.tubes.fluidOut.VLE.d_l = RealVariables22[68];
  preheater_LP2.tubes.fluidOut.VLE.d_v = RealVariables22[69];
  preheater_LP2.tubes.fluidOut.VLE.h_l = RealVariables22[70];
  preheater_LP2.tubes.fluidOut.VLE.h_v = RealVariables22[71];
  preheater_LP2.tubes.fluidOut.VLE.p_l = RealVariables22[72];
  preheater_LP2.tubes.fluidOut.VLE.p_v = RealVariables22[73];
  preheater_LP2.tubes.fluidOut.VLE.s_l = RealVariables22[74];
  preheater_LP2.tubes.fluidOut.VLE.s_v = RealVariables22[75];
  preheater_LP2.tubes.fluidOut.VLE.T_l = RealVariables22[76];
  preheater_LP2.tubes.fluidOut.VLE.T_v = RealVariables22[77];
  preheater_LP2.tubes.fluidOut.VLEAdditional.cp_l = RealVariables22[78];
  preheater_LP2.tubes.fluidOut.VLEAdditional.cp_v = RealVariables22[79];
  preheater_LP2.tubes.fluidOut.VLEAdditional.beta_l = RealVariables22[80];
  preheater_LP2.tubes.fluidOut.VLEAdditional.beta_v = RealVariables22[81];
  preheater_LP2.tubes.fluidOut.VLEAdditional.kappa_l = RealVariables22[82];
  preheater_LP2.tubes.fluidOut.VLEAdditional.kappa_v = RealVariables22[83];
  preheater_LP2.tubes.fluidOut.VLETransp.Pr_l = RealVariables22[84];
  preheater_LP2.tubes.fluidOut.VLETransp.Pr_v = RealVariables22[85];
  preheater_LP2.tubes.fluidOut.VLETransp.lambda_l = RealVariables22[86];
  preheater_LP2.tubes.fluidOut.VLETransp.lambda_v = RealVariables22[87];
  preheater_LP2.tubes.fluidOut.VLETransp.eta_l = RealVariables22[88];
  preheater_LP2.tubes.fluidOut.VLETransp.eta_v = RealVariables22[89];
  preheater_LP2.tubes.heattransfer.Delta_T_wi = RealVariables22[90];
  preheater_LP2.tubes.heattransfer.Delta_T_wo = RealVariables22[91];
  preheater_LP2.tubes.heattransfer.Delta_T_mean = RealVariables22[92];
  preheater_LP2.tubes.heattransfer.Delta_T_U = RealVariables22[93];
  preheater_LP2.tubes.heattransfer.Delta_T_L = RealVariables22[94];
  preheater_LP2.tubes.heattransfer.alpha = RealVariables22[95];
  preheater_LP2.tubes.heattransfer.HR = RealVariables22[96];
  preheater_LP2.tubes.pressureLoss.Delta_p = RealVariables22[97];
  preheater_LP2.shell.h_liq = RealVariables22[98];
  preheater_LP2.shell.h_vap = RealVariables22[99];
  preheater_LP2.shell.drho_liqdt = RealVariables22[100];
  preheater_LP2.shell.drho_vapdt = RealVariables23[1];
  preheater_LP2.shell.volume_liq = RealVariables23[2];
  preheater_LP2.shell._volume_liq_der = RealVariables23[3];
  preheater_LP2.shell.volume_vap = RealVariables23[4];
  preheater_LP2.shell.m_flow_cond = RealVariables23[5];
  preheater_LP2.shell.m_flow_evap = RealVariables23[6];
  preheater_LP2.shell.Q_flow_phases = RealVariables23[7];
  preheater_LP2.shell.'Q_flow[1]' = RealVariables23[8];
  preheater_LP2.shell.'Q_flow[2]' = RealVariables23[9];
  preheater_LP2.shell.mass_liq = RealVariables23[10];
  preheater_LP2.shell.mass_vap = RealVariables23[11];
  preheater_LP2.shell._p_liq_der = RealVariables23[12];
  preheater_LP2.shell.p_vap = RealVariables23[13];
  preheater_LP2.shell.'H_flow_inliq[1]' = RealVariables23[14];
  preheater_LP2.shell.'H_flow_invap[1]' = RealVariables23[15];
  preheater_LP2.shell.'H_flow_outliq[1]' = RealVariables23[16];
  preheater_LP2.shell.'H_flow_outvap[1]' = RealVariables23[17];
  preheater_LP2.shell.'inlet[2]'.p = RealVariables23[18];
  preheater_LP2.shell.'inlet[2]'.h_outflow = RealVariables23[19];
  preheater_LP2.shell.'inlet[3]'.p = RealVariables23[20];
  preheater_LP2.shell.'inlet[3]'.h_outflow = RealVariables23[21];
  preheater_LP2.shell.'heat[1]'.T = RealVariables23[22];
  preheater_LP2.shell.'heat[1]'.Q_flow = RealVariables23[23];
  preheater_LP2.shell.'heat[2]'.Q_flow = RealVariables23[24];
  preheater_LP2.shell.'fluidIn[1]'.d = RealVariables23[25];
  preheater_LP2.shell.'fluidIn[1]'.h = RealVariables23[26];
  preheater_LP2.shell.'fluidIn[1]'.s = RealVariables23[27];
  preheater_LP2.shell.'fluidIn[1]'.T = RealVariables23[28];
  preheater_LP2.shell.'fluidIn[1]'.q = RealVariables23[29];
  preheater_LP2.shell.'fluidIn[1]'.cp = RealVariables23[30];
  preheater_LP2.shell.'fluidIn[1]'.cv = RealVariables23[31];
  preheater_LP2.shell.'fluidIn[1]'.beta = RealVariables23[32];
  preheater_LP2.shell.'fluidIn[1]'.kappa = RealVariables23[33];
  preheater_LP2.shell.'fluidIn[1]'.w = RealVariables23[34];
  preheater_LP2.shell.'fluidIn[1]'.drhodh_pxi = RealVariables23[35];
  preheater_LP2.shell.'fluidIn[1]'.drhodp_hxi = RealVariables23[36];
  preheater_LP2.shell.'fluidIn[1]'.gamma = RealVariables23[37];
  preheater_LP2.shell.'fluidIn[1]'.VLE.d_l = RealVariables23[38];
  preheater_LP2.shell.'fluidIn[1]'.VLE.d_v = RealVariables23[39];
  preheater_LP2.shell.'fluidIn[1]'.VLE.h_l = RealVariables23[40];
  preheater_LP2.shell.'fluidIn[1]'.VLE.h_v = RealVariables23[41];
  preheater_LP2.shell.'fluidIn[1]'.VLE.p_l = RealVariables23[42];
  preheater_LP2.shell.'fluidIn[1]'.VLE.p_v = RealVariables23[43];
  preheater_LP2.shell.'fluidIn[1]'.VLE.s_l = RealVariables23[44];
  preheater_LP2.shell.'fluidIn[1]'.VLE.s_v = RealVariables23[45];
  preheater_LP2.shell.'fluidIn[1]'.VLE.T_l = RealVariables23[46];
  preheater_LP2.shell.'fluidIn[1]'.VLE.T_v = RealVariables23[47];
  preheater_LP2.shell.'fluidIn[2]'.d = RealVariables23[48];
  preheater_LP2.shell.'fluidIn[2]'.s = RealVariables23[49];
  preheater_LP2.shell.'fluidIn[2]'.T = RealVariables23[50];
  preheater_LP2.shell.'fluidIn[2]'.q = RealVariables23[51];
  preheater_LP2.shell.'fluidIn[2]'.cp = RealVariables23[52];
  preheater_LP2.shell.'fluidIn[2]'.cv = RealVariables23[53];
  preheater_LP2.shell.'fluidIn[2]'.beta = RealVariables23[54];
  preheater_LP2.shell.'fluidIn[2]'.kappa = RealVariables23[55];
  preheater_LP2.shell.'fluidIn[2]'.w = RealVariables23[56];
  preheater_LP2.shell.'fluidIn[2]'.drhodh_pxi = RealVariables23[57];
  preheater_LP2.shell.'fluidIn[2]'.drhodp_hxi = RealVariables23[58];
  preheater_LP2.shell.'fluidIn[2]'.gamma = RealVariables23[59];
  preheater_LP2.shell.'fluidIn[2]'.VLE.d_l = RealVariables23[60];
  preheater_LP2.shell.'fluidIn[2]'.VLE.d_v = RealVariables23[61];
  preheater_LP2.shell.'fluidIn[2]'.VLE.h_l = RealVariables23[62];
  preheater_LP2.shell.'fluidIn[2]'.VLE.h_v = RealVariables23[63];
  preheater_LP2.shell.'fluidIn[2]'.VLE.p_l = RealVariables23[64];
  preheater_LP2.shell.'fluidIn[2]'.VLE.p_v = RealVariables23[65];
  preheater_LP2.shell.'fluidIn[2]'.VLE.s_l = RealVariables23[66];
  preheater_LP2.shell.'fluidIn[2]'.VLE.s_v = RealVariables23[67];
  preheater_LP2.shell.'fluidIn[2]'.VLE.T_l = RealVariables23[68];
  preheater_LP2.shell.'fluidIn[2]'.VLE.T_v = RealVariables23[69];
  preheater_LP2.shell.'fluidIn[3]'.d = RealVariables23[70];
  preheater_LP2.shell.'fluidIn[3]'.s = RealVariables23[71];
  preheater_LP2.shell.'fluidIn[3]'.T = RealVariables23[72];
  preheater_LP2.shell.'fluidIn[3]'.q = RealVariables23[73];
  preheater_LP2.shell.'fluidIn[3]'.cp = RealVariables23[74];
  preheater_LP2.shell.'fluidIn[3]'.cv = RealVariables23[75];
  preheater_LP2.shell.'fluidIn[3]'.beta = RealVariables23[76];
  preheater_LP2.shell.'fluidIn[3]'.kappa = RealVariables23[77];
  preheater_LP2.shell.'fluidIn[3]'.w = RealVariables23[78];
  preheater_LP2.shell.'fluidIn[3]'.drhodh_pxi = RealVariables23[79];
  preheater_LP2.shell.'fluidIn[3]'.drhodp_hxi = RealVariables23[80];
  preheater_LP2.shell.'fluidIn[3]'.gamma = RealVariables23[81];
  preheater_LP2.shell.'fluidIn[3]'.VLE.d_l = RealVariables23[82];
  preheater_LP2.shell.'fluidIn[3]'.VLE.d_v = RealVariables23[83];
  preheater_LP2.shell.'fluidIn[3]'.VLE.h_l = RealVariables23[84];
  preheater_LP2.shell.'fluidIn[3]'.VLE.h_v = RealVariables23[85];
  preheater_LP2.shell.'fluidIn[3]'.VLE.p_l = RealVariables23[86];
  preheater_LP2.shell.'fluidIn[3]'.VLE.p_v = RealVariables23[87];
  preheater_LP2.shell.'fluidIn[3]'.VLE.s_l = RealVariables23[88];
  preheater_LP2.shell.'fluidIn[3]'.VLE.s_v = RealVariables23[89];
  preheater_LP2.shell.'fluidIn[3]'.VLE.T_l = RealVariables23[90];
  preheater_LP2.shell.'fluidIn[3]'.VLE.T_v = RealVariables23[91];
  preheater_LP2.shell.'fluidOut[1]'.d = RealVariables23[92];
  preheater_LP2.shell.'fluidOut[1]'.h = RealVariables23[93];
  preheater_LP2.shell.'fluidOut[1]'.s = RealVariables23[94];
  preheater_LP2.shell.'fluidOut[1]'.T = RealVariables23[95];
  preheater_LP2.shell.'fluidOut[1]'.q = RealVariables23[96];
  preheater_LP2.shell.'fluidOut[1]'.cp = RealVariables23[97];
  preheater_LP2.shell.'fluidOut[1]'.cv = RealVariables23[98];
  preheater_LP2.shell.'fluidOut[1]'.beta = RealVariables23[99];
  preheater_LP2.shell.'fluidOut[1]'.kappa = RealVariables23[100];
  preheater_LP2.shell.'fluidOut[1]'.w = RealVariables24[1];
  preheater_LP2.shell.'fluidOut[1]'.drhodh_pxi = RealVariables24[2];
  preheater_LP2.shell.'fluidOut[1]'.drhodp_hxi = RealVariables24[3];
  preheater_LP2.shell.'fluidOut[1]'.gamma = RealVariables24[4];
  preheater_LP2.shell.'fluidOut[1]'.VLE.d_l = RealVariables24[5];
  preheater_LP2.shell.'fluidOut[1]'.VLE.d_v = RealVariables24[6];
  preheater_LP2.shell.'fluidOut[1]'.VLE.h_l = RealVariables24[7];
  preheater_LP2.shell.'fluidOut[1]'.VLE.h_v = RealVariables24[8];
  preheater_LP2.shell.'fluidOut[1]'.VLE.p_l = RealVariables24[9];
  preheater_LP2.shell.'fluidOut[1]'.VLE.p_v = RealVariables24[10];
  preheater_LP2.shell.'fluidOut[1]'.VLE.s_l = RealVariables24[11];
  preheater_LP2.shell.'fluidOut[1]'.VLE.s_v = RealVariables24[12];
  preheater_LP2.shell.'fluidOut[1]'.VLE.T_l = RealVariables24[13];
  preheater_LP2.shell.'fluidOut[1]'.VLE.T_v = RealVariables24[14];
  preheater_LP2.shell.heattransfer.'Delta_T_mean[1]' = RealVariables24[15];
  preheater_LP2.shell.heattransfer.'Delta_T_mean[2]' = RealVariables24[16];
  preheater_LP2.shell.heattransfer.Q_flow_tot = RealVariables24[17];
  preheater_LP2.shell.phaseBorder.'Delta_p_geo_in[1]' = RealVariables24[18];
  preheater_LP2.shell.phaseBorder.'Delta_p_geo_in[2]' = RealVariables24[19];
  preheater_LP2.shell.phaseBorder.'Delta_p_geo_in[3]' = RealVariables24[20];
  preheater_LP2.shell.phaseBorder.'Delta_p_geo_out[1]' = RealVariables24[21];
  preheater_LP2.shell.phaseBorder.'zoneAlloc_in[1]' = RealVariables24[22];
  preheater_LP2.shell.phaseBorder.'zoneAlloc_in[2]' = RealVariables24[23];
  preheater_LP2.shell.phaseBorder.'zoneAlloc_in[3]' = RealVariables24[24];
  preheater_LP2.shell.phaseBorder.'zoneAlloc_out[1]' = RealVariables24[25];
  preheater_LP2.shell.phaseBorder.level_abs = RealVariables24[26];
  preheater_LP2.shell.phaseBorder.'m_flow_inliq[1]' = RealVariables24[27];
  preheater_LP2.shell.phaseBorder.'m_flow_invap[1]' = RealVariables24[28];
  preheater_LP2.shell.phaseBorder.'m_flow_outliq[1]' = RealVariables24[29];
  preheater_LP2.shell.phaseBorder.'m_flow_outvap[1]' = RealVariables24[30];
  preheater_LP2.shell.phaseBorder.'H_flow_inliq[1]' = RealVariables24[31];
  preheater_LP2.shell.phaseBorder.'H_flow_invap[1]' = RealVariables24[32];
  preheater_LP2.shell.phaseBorder.'H_flow_outliq[1]' = RealVariables24[33];
  preheater_LP2.shell.phaseBorder.'H_flow_outvap[1]' = RealVariables24[34];
  preheater_LP2.shell.phaseBorder.'rho[1]' = RealVariables24[35];
  preheater_LP2.shell.phaseBorder.'rho[2]' = RealVariables24[36];
  preheater_LP2.shell.phaseBorder.'steamQuality_in[1]' = RealVariables24[37];
  preheater_LP2.shell.phaseBorder.'steamQuality_in[2]' = RealVariables24[38];
  preheater_LP2.shell.phaseBorder.'steamQuality_in[3]' = RealVariables24[39];
  preheater_LP2.shell.phaseBorder.'steamQuality_out[1]' = RealVariables24[40];
  preheater_LP2.shell.phaseBorder.A_hor_act = RealVariables24[41];
  preheater_LP2.shell.pressureLoss.'Delta_p[1]' = RealVariables24[42];
  preheater_LP2.shell.summary.outline.'A_heat[1]' = RealVariables24[43];
  preheater_LP2.shell.summary.outline.'A_heat[2]' = RealVariables24[44];
  preheater_LP2.shell.summary.outline.'yps[2]' = RealVariables24[45];
  preheater_LP2.shell.summary.outline.fluidMass = RealVariables24[46];
  preheater_LP2.shell.summary.outline.H_tot = RealVariables24[47];
  preheater_LP2.shell.summary.outline.Q_flow_tot = RealVariables24[48];
  preheater_LP2.shell.summary.outline.Delta_p = RealVariables24[49];
  preheater_LP2.shell.summary.'inlet[1]'.H_flow = RealVariables24[50];
  preheater_LP2.shell.summary.'outlet[1]'.m_flow = RealVariables24[51];
  preheater_LP2.shell.summary.'outlet[1]'.H_flow = RealVariables24[52];
  preheater_LP2.shell.summary.fluid.'T[1]' = RealVariables24[53];
  preheater_LP2.shell.summary.fluid.'T[2]' = RealVariables24[54];
  preheater_LP2.shell.summary.fluid.'T_sat[1]' = RealVariables24[55];
  preheater_LP2.shell.summary.fluid.'T_sat[2]' = RealVariables24[56];
  preheater_LP2.shell.summary.fluid.'h_bub[1]' = RealVariables24[57];
  preheater_LP2.shell.summary.fluid.'h_bub[2]' = RealVariables24[58];
  preheater_LP2.shell.summary.fluid.'h_dew[1]' = RealVariables24[59];
  preheater_LP2.shell.summary.fluid.'h_dew[2]' = RealVariables24[60];
  preheater_LP2.shell.summary.fluid.'s[1]' = RealVariables24[61];
  preheater_LP2.shell.summary.fluid.'s[2]' = RealVariables24[62];
  preheater_LP2.shell.summary.fluid.'steamQuality[1]' = RealVariables24[63];
  preheater_LP2.shell.summary.fluid.'steamQuality[2]' = RealVariables24[64];
  preheater_LP2.shell.summary.fluid.'H[1]' = RealVariables24[65];
  preheater_LP2.shell.summary.fluid.'H[2]' = RealVariables24[66];
  preheater_LP2.shell.summary.fluid.'rho[1]' = RealVariables24[67];
  preheater_LP2.shell.summary.fluid.'rho[2]' = RealVariables24[68];
  preheater_LP2.wall.'T[1]' = RealVariables24[69];
  preheater_LP2.wall.'T[2]' = RealVariables24[70];
  preheater_LP2.wall.'T[3]' = RealVariables24[71];
  preheater_LP2.wall.'U[1]' = RealVariables24[72];
  preheater_LP2.wall.'U[2]' = RealVariables24[73];
  preheater_LP2.wall.'U[3]' = RealVariables24[74];
  preheater_LP2.wall.'Q_flow[1]' = RealVariables24[75];
  preheater_LP2.wall.'Q_flow[2]' = RealVariables24[76];
  preheater_LP2.wall.'Q_flow[3]' = RealVariables24[77];
  preheater_LP2.wall.'Q_flow[4]' = RealVariables24[78];
  preheater_LP2.wall.'Tdr[1]' = RealVariables24[79];
  preheater_LP2.wall.'Tdr[2]' = RealVariables24[80];
  preheater_LP2.wall.'Tdr[3]' = RealVariables24[81];
  preheater_LP2.wall.'Tdr[4]' = RealVariables24[82];
  preheater_LP2.wall.T_mean = RealVariables24[83];
  preheater_LP2.wall.outerPhase.Q_flow = RealVariables24[84];
  preheater_LP2.summary.outline.Q_flow = RealVariables24[85];
  preheater_LP2.summary.outline.Delta_T_in = RealVariables24[86];
  preheater_LP2.summary.outline.Delta_T_out = RealVariables24[87];
  preheater_LP2.summary.outline.kA = RealVariables24[88];
  preheater_LP2.'eye_int2[1]'.p = RealVariables24[89];
  preheater_LP2.'eye_int2[1]'.h = RealVariables24[90];
  preheater_LP2.'eye_int2[1]'.T = RealVariables24[91];
  preheater_LP2.'eye_int2[1]'.s = RealVariables24[92];
  preheater_LP2.'eye_int1[1]'.p = RealVariables24[93];
  preheater_LP2.'eye_int1[1]'.h = RealVariables24[94];
  preheater_LP2.'eye_int1[1]'.T = RealVariables24[95];
  preheater_LP2.'eye_int1[1]'.s = RealVariables24[96];
  preheater_LP3.level = RealVariables24[97];
  preheater_LP3.In2.m_flow = RealVariables24[98];
  preheater_LP3.Out2.m_flow = RealVariables24[99];
  preheater_LP3.Out1.m_flow = RealVariables24[100];
  preheater_LP3.Out1.p = RealVariables25[1];
  preheater_LP3.Out1.h_outflow = RealVariables25[2];
  preheater_LP3.In1.p = RealVariables25[3];
  preheater_LP3.In1.h_outflow = RealVariables25[4];
  preheater_LP3.aux1.p = RealVariables25[5];
  preheater_LP3.aux1.h_outflow = RealVariables25[6];
  preheater_LP3.aux2.p = RealVariables25[7];
  preheater_LP3.aux2.h_outflow = RealVariables25[8];
  preheater_LP3.reallocateHeatFlows.heatScalar.T = RealVariables25[9];
  preheater_LP3.reallocateHeatFlows.heatScalar.Q_flow = RealVariables25[10];
  preheater_LP3.reallocateHeatFlows.'heatVector[1]'.Q_flow = RealVariables25[11];
  preheater_LP3.reallocateHeatFlows.'heatVector[2]'.Q_flow = RealVariables25[12];
  preheater_LP3.tubes.p = RealVariables25[13];
  preheater_LP3.tubes.h = RealVariables25[14];
  preheater_LP3.tubes.mass = RealVariables25[15];
  preheater_LP3.tubes.heat.T = RealVariables25[16];
  preheater_LP3.tubes.heat.Q_flow = RealVariables25[17];
  preheater_LP3.tubes.summary.outline.Delta_p = RealVariables25[18];
  preheater_LP3.tubes.summary.inlet.T = RealVariables25[19];
  preheater_LP3.tubes.summary.inlet.h = RealVariables25[20];
  preheater_LP3.tubes.summary.inlet.s = RealVariables25[21];
  preheater_LP3.tubes.summary.inlet.steamQuality = RealVariables25[22];
  preheater_LP3.tubes.summary.inlet.H_flow = RealVariables25[23];
  preheater_LP3.tubes.summary.inlet.rho = RealVariables25[24];
  preheater_LP3.tubes.summary.outlet.m_flow = RealVariables25[25];
  preheater_LP3.tubes.summary.outlet.T = RealVariables25[26];
  preheater_LP3.tubes.summary.outlet.h = RealVariables25[27];
  preheater_LP3.tubes.summary.outlet.s = RealVariables25[28];
  preheater_LP3.tubes.summary.outlet.steamQuality = RealVariables25[29];
  preheater_LP3.tubes.summary.outlet.H_flow = RealVariables25[30];
  preheater_LP3.tubes.summary.outlet.rho = RealVariables25[31];
  preheater_LP3.tubes.summary.fluid.T = RealVariables25[32];
  preheater_LP3.tubes.summary.fluid.T_sat = RealVariables25[33];
  preheater_LP3.tubes.summary.fluid.h_bub = RealVariables25[34];
  preheater_LP3.tubes.summary.fluid.h_dew = RealVariables25[35];
  preheater_LP3.tubes.summary.fluid.s = RealVariables25[36];
  preheater_LP3.tubes.summary.fluid.steamQuality = RealVariables25[37];
  preheater_LP3.tubes.summary.fluid.H = RealVariables25[38];
  preheater_LP3.tubes.summary.fluid.rho = RealVariables25[39];
  preheater_LP3.tubes.fluidIn.cp = RealVariables25[40];
  preheater_LP3.tubes.fluidIn.cv = RealVariables25[41];
  preheater_LP3.tubes.fluidIn.beta = RealVariables25[42];
  preheater_LP3.tubes.fluidIn.kappa = RealVariables25[43];
  preheater_LP3.tubes.fluidIn.w = RealVariables25[44];
  preheater_LP3.tubes.fluidIn.drhodh_pxi = RealVariables25[45];
  preheater_LP3.tubes.fluidIn.drhodp_hxi = RealVariables25[46];
  preheater_LP3.tubes.fluidIn.gamma = RealVariables25[47];
  preheater_LP3.tubes.fluidIn.transp.Pr = RealVariables25[48];
  preheater_LP3.tubes.fluidIn.transp.lambda = RealVariables25[49];
  preheater_LP3.tubes.fluidIn.transp.eta = RealVariables25[50];
  preheater_LP3.tubes.fluidIn.transp.sigma = RealVariables25[51];
  preheater_LP3.tubes.fluidIn.VLE.d_l = RealVariables25[52];
  preheater_LP3.tubes.fluidIn.VLE.d_v = RealVariables25[53];
  preheater_LP3.tubes.fluidIn.VLE.h_l = RealVariables25[54];
  preheater_LP3.tubes.fluidIn.VLE.h_v = RealVariables25[55];
  preheater_LP3.tubes.fluidIn.VLE.p_l = RealVariables25[56];
  preheater_LP3.tubes.fluidIn.VLE.p_v = RealVariables25[57];
  preheater_LP3.tubes.fluidIn.VLE.s_l = RealVariables25[58];
  preheater_LP3.tubes.fluidIn.VLE.s_v = RealVariables25[59];
  preheater_LP3.tubes.fluidIn.VLE.T_l = RealVariables25[60];
  preheater_LP3.tubes.fluidIn.VLE.T_v = RealVariables25[61];
  preheater_LP3.tubes.fluidIn.VLEAdditional.cp_l = RealVariables25[62];
  preheater_LP3.tubes.fluidIn.VLEAdditional.cp_v = RealVariables25[63];
  preheater_LP3.tubes.fluidIn.VLEAdditional.beta_l = RealVariables25[64];
  preheater_LP3.tubes.fluidIn.VLEAdditional.beta_v = RealVariables25[65];
  preheater_LP3.tubes.fluidIn.VLEAdditional.kappa_l = RealVariables25[66];
  preheater_LP3.tubes.fluidIn.VLEAdditional.kappa_v = RealVariables25[67];
  preheater_LP3.tubes.fluidIn.VLETransp.Pr_l = RealVariables25[68];
  preheater_LP3.tubes.fluidIn.VLETransp.Pr_v = RealVariables25[69];
  preheater_LP3.tubes.fluidIn.VLETransp.lambda_l = RealVariables25[70];
  preheater_LP3.tubes.fluidIn.VLETransp.lambda_v = RealVariables25[71];
  preheater_LP3.tubes.fluidIn.VLETransp.eta_l = RealVariables25[72];
  preheater_LP3.tubes.fluidIn.VLETransp.eta_v = RealVariables25[73];
  preheater_LP3.tubes.fluidOut.cp = RealVariables25[74];
  preheater_LP3.tubes.fluidOut.cv = RealVariables25[75];
  preheater_LP3.tubes.fluidOut.beta = RealVariables25[76];
  preheater_LP3.tubes.fluidOut.kappa = RealVariables25[77];
  preheater_LP3.tubes.fluidOut.w = RealVariables25[78];
  preheater_LP3.tubes.fluidOut.drhodh_pxi = RealVariables25[79];
  preheater_LP3.tubes.fluidOut.drhodp_hxi = RealVariables25[80];
  preheater_LP3.tubes.fluidOut.gamma = RealVariables25[81];
  preheater_LP3.tubes.fluidOut.transp.Pr = RealVariables25[82];
  preheater_LP3.tubes.fluidOut.transp.lambda = RealVariables25[83];
  preheater_LP3.tubes.fluidOut.transp.eta = RealVariables25[84];
  preheater_LP3.tubes.fluidOut.transp.sigma = RealVariables25[85];
  preheater_LP3.tubes.fluidOut.VLE.d_l = RealVariables25[86];
  preheater_LP3.tubes.fluidOut.VLE.d_v = RealVariables25[87];
  preheater_LP3.tubes.fluidOut.VLE.h_l = RealVariables25[88];
  preheater_LP3.tubes.fluidOut.VLE.h_v = RealVariables25[89];
  preheater_LP3.tubes.fluidOut.VLE.p_l = RealVariables25[90];
  preheater_LP3.tubes.fluidOut.VLE.p_v = RealVariables25[91];
  preheater_LP3.tubes.fluidOut.VLE.s_l = RealVariables25[92];
  preheater_LP3.tubes.fluidOut.VLE.s_v = RealVariables25[93];
  preheater_LP3.tubes.fluidOut.VLE.T_l = RealVariables25[94];
  preheater_LP3.tubes.fluidOut.VLE.T_v = RealVariables25[95];
  preheater_LP3.tubes.fluidOut.VLEAdditional.cp_l = RealVariables25[96];
  preheater_LP3.tubes.fluidOut.VLEAdditional.cp_v = RealVariables25[97];
  preheater_LP3.tubes.fluidOut.VLEAdditional.beta_l = RealVariables25[98];
  preheater_LP3.tubes.fluidOut.VLEAdditional.beta_v = RealVariables25[99];
  preheater_LP3.tubes.fluidOut.VLEAdditional.kappa_l = RealVariables25[100];
  preheater_LP3.tubes.fluidOut.VLEAdditional.kappa_v = RealVariables26[1];
  preheater_LP3.tubes.fluidOut.VLETransp.Pr_l = RealVariables26[2];
  preheater_LP3.tubes.fluidOut.VLETransp.Pr_v = RealVariables26[3];
  preheater_LP3.tubes.fluidOut.VLETransp.lambda_l = RealVariables26[4];
  preheater_LP3.tubes.fluidOut.VLETransp.lambda_v = RealVariables26[5];
  preheater_LP3.tubes.fluidOut.VLETransp.eta_l = RealVariables26[6];
  preheater_LP3.tubes.fluidOut.VLETransp.eta_v = RealVariables26[7];
  preheater_LP3.tubes.heattransfer.Delta_T_wi = RealVariables26[8];
  preheater_LP3.tubes.heattransfer.Delta_T_wo = RealVariables26[9];
  preheater_LP3.tubes.heattransfer.Delta_T_mean = RealVariables26[10];
  preheater_LP3.tubes.heattransfer.Delta_T_U = RealVariables26[11];
  preheater_LP3.tubes.heattransfer.Delta_T_L = RealVariables26[12];
  preheater_LP3.tubes.heattransfer.alpha = RealVariables26[13];
  preheater_LP3.tubes.heattransfer.HR = RealVariables26[14];
  preheater_LP3.tubes.pressureLoss.Delta_p = RealVariables26[15];
  preheater_LP3.shell.h_liq = RealVariables26[16];
  preheater_LP3.shell.h_vap = RealVariables26[17];
  preheater_LP3.shell.drho_liqdt = RealVariables26[18];
  preheater_LP3.shell.drho_vapdt = RealVariables26[19];
  preheater_LP3.shell.volume_liq = RealVariables26[20];
  preheater_LP3.shell._volume_liq_der = RealVariables26[21];
  preheater_LP3.shell.volume_vap = RealVariables26[22];
  preheater_LP3.shell.m_flow_cond = RealVariables26[23];
  preheater_LP3.shell.m_flow_evap = RealVariables26[24];
  preheater_LP3.shell.Q_flow_phases = RealVariables26[25];
  preheater_LP3.shell.'Q_flow[1]' = RealVariables26[26];
  preheater_LP3.shell.'Q_flow[2]' = RealVariables26[27];
  preheater_LP3.shell.mass_liq = RealVariables26[28];
  preheater_LP3.shell.mass_vap = RealVariables26[29];
  preheater_LP3.shell._p_liq_der = RealVariables26[30];
  preheater_LP3.shell.p_vap = RealVariables26[31];
  preheater_LP3.shell.'H_flow_inliq[1]' = RealVariables26[32];
  preheater_LP3.shell.'H_flow_inliq[2]' = RealVariables26[33];
  preheater_LP3.shell.'H_flow_invap[1]' = RealVariables26[34];
  preheater_LP3.shell.'H_flow_invap[2]' = RealVariables26[35];
  preheater_LP3.shell.'H_flow_outliq[1]' = RealVariables26[36];
  preheater_LP3.shell.'H_flow_outvap[1]' = RealVariables26[37];
  preheater_LP3.shell.'heat[1]'.Q_flow = RealVariables26[38];
  preheater_LP3.shell.'heat[2]'.Q_flow = RealVariables26[39];
  preheater_LP3.shell.'fluidIn[1]'.d = RealVariables26[40];
  preheater_LP3.shell.'fluidIn[1]'.h = RealVariables26[41];
  preheater_LP3.shell.'fluidIn[1]'.s = RealVariables26[42];
  preheater_LP3.shell.'fluidIn[1]'.T = RealVariables26[43];
  preheater_LP3.shell.'fluidIn[1]'.q = RealVariables26[44];
  preheater_LP3.shell.'fluidIn[1]'.cp = RealVariables26[45];
  preheater_LP3.shell.'fluidIn[1]'.cv = RealVariables26[46];
  preheater_LP3.shell.'fluidIn[1]'.beta = RealVariables26[47];
  preheater_LP3.shell.'fluidIn[1]'.kappa = RealVariables26[48];
  preheater_LP3.shell.'fluidIn[1]'.w = RealVariables26[49];
  preheater_LP3.shell.'fluidIn[1]'.drhodh_pxi = RealVariables26[50];
  preheater_LP3.shell.'fluidIn[1]'.drhodp_hxi = RealVariables26[51];
  preheater_LP3.shell.'fluidIn[1]'.gamma = RealVariables26[52];
  preheater_LP3.shell.'fluidIn[1]'.VLE.d_l = RealVariables26[53];
  preheater_LP3.shell.'fluidIn[1]'.VLE.d_v = RealVariables26[54];
  preheater_LP3.shell.'fluidIn[1]'.VLE.h_l = RealVariables26[55];
  preheater_LP3.shell.'fluidIn[1]'.VLE.h_v = RealVariables26[56];
  preheater_LP3.shell.'fluidIn[1]'.VLE.p_l = RealVariables26[57];
  preheater_LP3.shell.'fluidIn[1]'.VLE.p_v = RealVariables26[58];
  preheater_LP3.shell.'fluidIn[1]'.VLE.s_l = RealVariables26[59];
  preheater_LP3.shell.'fluidIn[1]'.VLE.s_v = RealVariables26[60];
  preheater_LP3.shell.'fluidIn[1]'.VLE.T_l = RealVariables26[61];
  preheater_LP3.shell.'fluidIn[1]'.VLE.T_v = RealVariables26[62];
  preheater_LP3.shell.'fluidIn[2]'.d = RealVariables26[63];
  preheater_LP3.shell.'fluidIn[2]'.h = RealVariables26[64];
  preheater_LP3.shell.'fluidIn[2]'.s = RealVariables26[65];
  preheater_LP3.shell.'fluidIn[2]'.T = RealVariables26[66];
  preheater_LP3.shell.'fluidIn[2]'.q = RealVariables26[67];
  preheater_LP3.shell.'fluidIn[2]'.cp = RealVariables26[68];
  preheater_LP3.shell.'fluidIn[2]'.cv = RealVariables26[69];
  preheater_LP3.shell.'fluidIn[2]'.beta = RealVariables26[70];
  preheater_LP3.shell.'fluidIn[2]'.kappa = RealVariables26[71];
  preheater_LP3.shell.'fluidIn[2]'.w = RealVariables26[72];
  preheater_LP3.shell.'fluidIn[2]'.drhodh_pxi = RealVariables26[73];
  preheater_LP3.shell.'fluidIn[2]'.drhodp_hxi = RealVariables26[74];
  preheater_LP3.shell.'fluidIn[2]'.gamma = RealVariables26[75];
  preheater_LP3.shell.'fluidIn[2]'.VLE.d_l = RealVariables26[76];
  preheater_LP3.shell.'fluidIn[2]'.VLE.d_v = RealVariables26[77];
  preheater_LP3.shell.'fluidIn[2]'.VLE.h_l = RealVariables26[78];
  preheater_LP3.shell.'fluidIn[2]'.VLE.h_v = RealVariables26[79];
  preheater_LP3.shell.'fluidIn[2]'.VLE.p_l = RealVariables26[80];
  preheater_LP3.shell.'fluidIn[2]'.VLE.p_v = RealVariables26[81];
  preheater_LP3.shell.'fluidIn[2]'.VLE.s_l = RealVariables26[82];
  preheater_LP3.shell.'fluidIn[2]'.VLE.s_v = RealVariables26[83];
  preheater_LP3.shell.'fluidIn[2]'.VLE.T_l = RealVariables26[84];
  preheater_LP3.shell.'fluidIn[2]'.VLE.T_v = RealVariables26[85];
  preheater_LP3.shell.'fluidIn[3]'.d = RealVariables26[86];
  preheater_LP3.shell.'fluidIn[3]'.s = RealVariables26[87];
  preheater_LP3.shell.'fluidIn[3]'.T = RealVariables26[88];
  preheater_LP3.shell.'fluidIn[3]'.q = RealVariables26[89];
  preheater_LP3.shell.'fluidIn[3]'.cp = RealVariables26[90];
  preheater_LP3.shell.'fluidIn[3]'.cv = RealVariables26[91];
  preheater_LP3.shell.'fluidIn[3]'.beta = RealVariables26[92];
  preheater_LP3.shell.'fluidIn[3]'.kappa = RealVariables26[93];
  preheater_LP3.shell.'fluidIn[3]'.w = RealVariables26[94];
  preheater_LP3.shell.'fluidIn[3]'.drhodh_pxi = RealVariables26[95];
  preheater_LP3.shell.'fluidIn[3]'.drhodp_hxi = RealVariables26[96];
  preheater_LP3.shell.'fluidIn[3]'.gamma = RealVariables26[97];
  preheater_LP3.shell.'fluidIn[3]'.VLE.d_l = RealVariables26[98];
  preheater_LP3.shell.'fluidIn[3]'.VLE.d_v = RealVariables26[99];
  preheater_LP3.shell.'fluidIn[3]'.VLE.h_l = RealVariables26[100];
  preheater_LP3.shell.'fluidIn[3]'.VLE.h_v = RealVariables27[1];
  preheater_LP3.shell.'fluidIn[3]'.VLE.p_l = RealVariables27[2];
  preheater_LP3.shell.'fluidIn[3]'.VLE.p_v = RealVariables27[3];
  preheater_LP3.shell.'fluidIn[3]'.VLE.s_l = RealVariables27[4];
  preheater_LP3.shell.'fluidIn[3]'.VLE.s_v = RealVariables27[5];
  preheater_LP3.shell.'fluidIn[3]'.VLE.T_l = RealVariables27[6];
  preheater_LP3.shell.'fluidIn[3]'.VLE.T_v = RealVariables27[7];
  preheater_LP3.shell.'fluidOut[1]'.d = RealVariables27[8];
  preheater_LP3.shell.'fluidOut[1]'.h = RealVariables27[9];
  preheater_LP3.shell.'fluidOut[1]'.s = RealVariables27[10];
  preheater_LP3.shell.'fluidOut[1]'.T = RealVariables27[11];
  preheater_LP3.shell.'fluidOut[1]'.q = RealVariables27[12];
  preheater_LP3.shell.'fluidOut[1]'.cp = RealVariables27[13];
  preheater_LP3.shell.'fluidOut[1]'.cv = RealVariables27[14];
  preheater_LP3.shell.'fluidOut[1]'.beta = RealVariables27[15];
  preheater_LP3.shell.'fluidOut[1]'.kappa = RealVariables27[16];
  preheater_LP3.shell.'fluidOut[1]'.w = RealVariables27[17];
  preheater_LP3.shell.'fluidOut[1]'.drhodh_pxi = RealVariables27[18];
  preheater_LP3.shell.'fluidOut[1]'.drhodp_hxi = RealVariables27[19];
  preheater_LP3.shell.'fluidOut[1]'.gamma = RealVariables27[20];
  preheater_LP3.shell.'fluidOut[1]'.VLE.d_l = RealVariables27[21];
  preheater_LP3.shell.'fluidOut[1]'.VLE.d_v = RealVariables27[22];
  preheater_LP3.shell.'fluidOut[1]'.VLE.h_l = RealVariables27[23];
  preheater_LP3.shell.'fluidOut[1]'.VLE.h_v = RealVariables27[24];
  preheater_LP3.shell.'fluidOut[1]'.VLE.p_l = RealVariables27[25];
  preheater_LP3.shell.'fluidOut[1]'.VLE.p_v = RealVariables27[26];
  preheater_LP3.shell.'fluidOut[1]'.VLE.s_l = RealVariables27[27];
  preheater_LP3.shell.'fluidOut[1]'.VLE.s_v = RealVariables27[28];
  preheater_LP3.shell.'fluidOut[1]'.VLE.T_l = RealVariables27[29];
  preheater_LP3.shell.'fluidOut[1]'.VLE.T_v = RealVariables27[30];
  preheater_LP3.shell.heattransfer.'Delta_T_mean[1]' = RealVariables27[31];
  preheater_LP3.shell.heattransfer.'Delta_T_mean[2]' = RealVariables27[32];
  preheater_LP3.shell.heattransfer.Q_flow_tot = RealVariables27[33];
  preheater_LP3.shell.phaseBorder.'Delta_p_geo_in[1]' = RealVariables27[34];
  preheater_LP3.shell.phaseBorder.'Delta_p_geo_in[2]' = RealVariables27[35];
  preheater_LP3.shell.phaseBorder.'Delta_p_geo_in[3]' = RealVariables27[36];
  preheater_LP3.shell.phaseBorder.'Delta_p_geo_out[1]' = RealVariables27[37];
  preheater_LP3.shell.phaseBorder.'zoneAlloc_in[1]' = RealVariables27[38];
  preheater_LP3.shell.phaseBorder.'zoneAlloc_in[2]' = RealVariables27[39];
  preheater_LP3.shell.phaseBorder.'zoneAlloc_in[3]' = RealVariables27[40];
  preheater_LP3.shell.phaseBorder.'zoneAlloc_out[1]' = RealVariables27[41];
  preheater_LP3.shell.phaseBorder.level_abs = RealVariables27[42];
  preheater_LP3.shell.phaseBorder.'m_flow_inliq[1]' = RealVariables27[43];
  preheater_LP3.shell.phaseBorder.'m_flow_inliq[2]' = RealVariables27[44];
  preheater_LP3.shell.phaseBorder.'m_flow_invap[1]' = RealVariables27[45];
  preheater_LP3.shell.phaseBorder.'m_flow_invap[2]' = RealVariables27[46];
  preheater_LP3.shell.phaseBorder.'m_flow_outliq[1]' = RealVariables27[47];
  preheater_LP3.shell.phaseBorder.'m_flow_outvap[1]' = RealVariables27[48];
  preheater_LP3.shell.phaseBorder.'H_flow_inliq[1]' = RealVariables27[49];
  preheater_LP3.shell.phaseBorder.'H_flow_inliq[2]' = RealVariables27[50];
  preheater_LP3.shell.phaseBorder.'H_flow_invap[1]' = RealVariables27[51];
  preheater_LP3.shell.phaseBorder.'H_flow_invap[2]' = RealVariables27[52];
  preheater_LP3.shell.phaseBorder.'H_flow_outliq[1]' = RealVariables27[53];
  preheater_LP3.shell.phaseBorder.'H_flow_outvap[1]' = RealVariables27[54];
  preheater_LP3.shell.phaseBorder.'rho[1]' = RealVariables27[55];
  preheater_LP3.shell.phaseBorder.'rho[2]' = RealVariables27[56];
  preheater_LP3.shell.phaseBorder.'steamQuality_in[1]' = RealVariables27[57];
  preheater_LP3.shell.phaseBorder.'steamQuality_in[2]' = RealVariables27[58];
  preheater_LP3.shell.phaseBorder.'steamQuality_in[3]' = RealVariables27[59];
  preheater_LP3.shell.phaseBorder.'steamQuality_out[1]' = RealVariables27[60];
  preheater_LP3.shell.phaseBorder.A_hor_act = RealVariables27[61];
  preheater_LP3.shell.pressureLoss.'Delta_p[1]' = RealVariables27[62];
  preheater_LP3.shell.pressureLoss.'Delta_p[2]' = RealVariables27[63];
  preheater_LP3.shell.summary.outline.'A_heat[1]' = RealVariables27[64];
  preheater_LP3.shell.summary.outline.'A_heat[2]' = RealVariables27[65];
  preheater_LP3.shell.summary.outline.'yps[2]' = RealVariables27[66];
  preheater_LP3.shell.summary.outline.fluidMass = RealVariables27[67];
  preheater_LP3.shell.summary.outline.H_tot = RealVariables27[68];
  preheater_LP3.shell.summary.outline.Q_flow_tot = RealVariables27[69];
  preheater_LP3.shell.summary.outline.Delta_p = RealVariables27[70];
  preheater_LP3.shell.summary.'inlet[1]'.H_flow = RealVariables27[71];
  preheater_LP3.shell.summary.'inlet[2]'.H_flow = RealVariables27[72];
  preheater_LP3.shell.summary.'outlet[1]'.m_flow = RealVariables27[73];
  preheater_LP3.shell.summary.'outlet[1]'.H_flow = RealVariables27[74];
  preheater_LP3.shell.summary.fluid.'T[1]' = RealVariables27[75];
  preheater_LP3.shell.summary.fluid.'T[2]' = RealVariables27[76];
  preheater_LP3.shell.summary.fluid.'T_sat[1]' = RealVariables27[77];
  preheater_LP3.shell.summary.fluid.'T_sat[2]' = RealVariables27[78];
  preheater_LP3.shell.summary.fluid.'h_bub[1]' = RealVariables27[79];
  preheater_LP3.shell.summary.fluid.'h_bub[2]' = RealVariables27[80];
  preheater_LP3.shell.summary.fluid.'h_dew[1]' = RealVariables27[81];
  preheater_LP3.shell.summary.fluid.'h_dew[2]' = RealVariables27[82];
  preheater_LP3.shell.summary.fluid.'s[1]' = RealVariables27[83];
  preheater_LP3.shell.summary.fluid.'s[2]' = RealVariables27[84];
  preheater_LP3.shell.summary.fluid.'steamQuality[1]' = RealVariables27[85];
  preheater_LP3.shell.summary.fluid.'steamQuality[2]' = RealVariables27[86];
  preheater_LP3.shell.summary.fluid.'H[1]' = RealVariables27[87];
  preheater_LP3.shell.summary.fluid.'H[2]' = RealVariables27[88];
  preheater_LP3.shell.summary.fluid.'rho[1]' = RealVariables27[89];
  preheater_LP3.shell.summary.fluid.'rho[2]' = RealVariables27[90];
  preheater_LP3.wall.'T[1]' = RealVariables27[91];
  preheater_LP3.wall.'T[2]' = RealVariables27[92];
  preheater_LP3.wall.'T[3]' = RealVariables27[93];
  preheater_LP3.wall.'U[1]' = RealVariables27[94];
  preheater_LP3.wall.'U[2]' = RealVariables27[95];
  preheater_LP3.wall.'U[3]' = RealVariables27[96];
  preheater_LP3.wall.'Q_flow[1]' = RealVariables27[97];
  preheater_LP3.wall.'Q_flow[2]' = RealVariables27[98];
  preheater_LP3.wall.'Q_flow[3]' = RealVariables27[99];
  preheater_LP3.wall.'Tdr[1]' = RealVariables27[100];
  preheater_LP3.wall.'Tdr[2]' = RealVariables28[1];
  preheater_LP3.wall.'Tdr[3]' = RealVariables28[2];
  preheater_LP3.wall.'Tdr[4]' = RealVariables28[3];
  preheater_LP3.wall.T_mean = RealVariables28[4];
  preheater_LP3.wall.outerPhase.Q_flow = RealVariables28[5];
  preheater_LP3.summary.outline.Q_flow = RealVariables28[6];
  preheater_LP3.summary.outline.Delta_T_in = RealVariables28[7];
  preheater_LP3.summary.outline.Delta_T_out = RealVariables28[8];
  preheater_LP3.summary.outline.kA = RealVariables28[9];
  preheater_LP3.eye2.p = RealVariables28[10];
  preheater_LP3.eye2.h = RealVariables28[11];
  preheater_LP3.eye2.T = RealVariables28[12];
  preheater_LP3.eye2.s = RealVariables28[13];
  preheater_LP3.eye1.p = RealVariables28[14];
  preheater_LP3.eye1.h = RealVariables28[15];
  preheater_LP3.eye1.T = RealVariables28[16];
  preheater_LP3.eye1.s = RealVariables28[17];
  preheater_LP4.level = RealVariables28[18];
  preheater_LP4.Out2.m_flow = RealVariables28[19];
  preheater_LP4.Out1.m_flow = RealVariables28[20];
  preheater_LP4.Out1.p = RealVariables28[21];
  preheater_LP4.Out1.h_outflow = RealVariables28[22];
  preheater_LP4.In1.p = RealVariables28[23];
  preheater_LP4.In1.h_outflow = RealVariables28[24];
  preheater_LP4.aux1.p = RealVariables28[25];
  preheater_LP4.aux1.h_outflow = RealVariables28[26];
  preheater_LP4.aux2.p = RealVariables28[27];
  preheater_LP4.aux2.h_outflow = RealVariables28[28];
  preheater_LP4.reallocateHeatFlows.heatScalar.T = RealVariables28[29];
  preheater_LP4.reallocateHeatFlows.heatScalar.Q_flow = RealVariables28[30];
  preheater_LP4.reallocateHeatFlows.'heatVector[1]'.Q_flow = RealVariables28[31];
  preheater_LP4.reallocateHeatFlows.'heatVector[2]'.Q_flow = RealVariables28[32];
  preheater_LP4.tubes.p = RealVariables28[33];
  preheater_LP4.tubes.h = RealVariables28[34];
  preheater_LP4.tubes.mass = RealVariables28[35];
  preheater_LP4.tubes.heat.T = RealVariables28[36];
  preheater_LP4.tubes.heat.Q_flow = RealVariables28[37];
  preheater_LP4.tubes.summary.outline.Delta_p = RealVariables28[38];
  preheater_LP4.tubes.summary.inlet.T = RealVariables28[39];
  preheater_LP4.tubes.summary.inlet.h = RealVariables28[40];
  preheater_LP4.tubes.summary.inlet.s = RealVariables28[41];
  preheater_LP4.tubes.summary.inlet.steamQuality = RealVariables28[42];
  preheater_LP4.tubes.summary.inlet.H_flow = RealVariables28[43];
  preheater_LP4.tubes.summary.inlet.rho = RealVariables28[44];
  preheater_LP4.tubes.summary.outlet.T = RealVariables28[45];
  preheater_LP4.tubes.summary.outlet.h = RealVariables28[46];
  preheater_LP4.tubes.summary.outlet.s = RealVariables28[47];
  preheater_LP4.tubes.summary.outlet.steamQuality = RealVariables28[48];
  preheater_LP4.tubes.summary.outlet.H_flow = RealVariables28[49];
  preheater_LP4.tubes.summary.outlet.rho = RealVariables28[50];
  preheater_LP4.tubes.summary.fluid.T = RealVariables28[51];
  preheater_LP4.tubes.summary.fluid.T_sat = RealVariables28[52];
  preheater_LP4.tubes.summary.fluid.h_bub = RealVariables28[53];
  preheater_LP4.tubes.summary.fluid.h_dew = RealVariables28[54];
  preheater_LP4.tubes.summary.fluid.s = RealVariables28[55];
  preheater_LP4.tubes.summary.fluid.steamQuality = RealVariables28[56];
  preheater_LP4.tubes.summary.fluid.H = RealVariables28[57];
  preheater_LP4.tubes.summary.fluid.rho = RealVariables28[58];
  preheater_LP4.tubes.fluidIn.cp = RealVariables28[59];
  preheater_LP4.tubes.fluidIn.cv = RealVariables28[60];
  preheater_LP4.tubes.fluidIn.beta = RealVariables28[61];
  preheater_LP4.tubes.fluidIn.kappa = RealVariables28[62];
  preheater_LP4.tubes.fluidIn.w = RealVariables28[63];
  preheater_LP4.tubes.fluidIn.drhodh_pxi = RealVariables28[64];
  preheater_LP4.tubes.fluidIn.drhodp_hxi = RealVariables28[65];
  preheater_LP4.tubes.fluidIn.gamma = RealVariables28[66];
  preheater_LP4.tubes.fluidIn.transp.Pr = RealVariables28[67];
  preheater_LP4.tubes.fluidIn.transp.lambda = RealVariables28[68];
  preheater_LP4.tubes.fluidIn.transp.eta = RealVariables28[69];
  preheater_LP4.tubes.fluidIn.transp.sigma = RealVariables28[70];
  preheater_LP4.tubes.fluidIn.VLE.d_l = RealVariables28[71];
  preheater_LP4.tubes.fluidIn.VLE.d_v = RealVariables28[72];
  preheater_LP4.tubes.fluidIn.VLE.h_l = RealVariables28[73];
  preheater_LP4.tubes.fluidIn.VLE.h_v = RealVariables28[74];
  preheater_LP4.tubes.fluidIn.VLE.p_l = RealVariables28[75];
  preheater_LP4.tubes.fluidIn.VLE.p_v = RealVariables28[76];
  preheater_LP4.tubes.fluidIn.VLE.s_l = RealVariables28[77];
  preheater_LP4.tubes.fluidIn.VLE.s_v = RealVariables28[78];
  preheater_LP4.tubes.fluidIn.VLE.T_l = RealVariables28[79];
  preheater_LP4.tubes.fluidIn.VLE.T_v = RealVariables28[80];
  preheater_LP4.tubes.fluidIn.VLEAdditional.cp_l = RealVariables28[81];
  preheater_LP4.tubes.fluidIn.VLEAdditional.cp_v = RealVariables28[82];
  preheater_LP4.tubes.fluidIn.VLEAdditional.beta_l = RealVariables28[83];
  preheater_LP4.tubes.fluidIn.VLEAdditional.beta_v = RealVariables28[84];
  preheater_LP4.tubes.fluidIn.VLEAdditional.kappa_l = RealVariables28[85];
  preheater_LP4.tubes.fluidIn.VLEAdditional.kappa_v = RealVariables28[86];
  preheater_LP4.tubes.fluidIn.VLETransp.Pr_l = RealVariables28[87];
  preheater_LP4.tubes.fluidIn.VLETransp.Pr_v = RealVariables28[88];
  preheater_LP4.tubes.fluidIn.VLETransp.lambda_l = RealVariables28[89];
  preheater_LP4.tubes.fluidIn.VLETransp.lambda_v = RealVariables28[90];
  preheater_LP4.tubes.fluidIn.VLETransp.eta_l = RealVariables28[91];
  preheater_LP4.tubes.fluidIn.VLETransp.eta_v = RealVariables28[92];
  preheater_LP4.tubes.fluidOut.cp = RealVariables28[93];
  preheater_LP4.tubes.fluidOut.cv = RealVariables28[94];
  preheater_LP4.tubes.fluidOut.beta = RealVariables28[95];
  preheater_LP4.tubes.fluidOut.kappa = RealVariables28[96];
  preheater_LP4.tubes.fluidOut.w = RealVariables28[97];
  preheater_LP4.tubes.fluidOut.drhodh_pxi = RealVariables28[98];
  preheater_LP4.tubes.fluidOut.drhodp_hxi = RealVariables28[99];
  preheater_LP4.tubes.fluidOut.gamma = RealVariables28[100];
  preheater_LP4.tubes.fluidOut.transp.Pr = RealVariables29[1];
  preheater_LP4.tubes.fluidOut.transp.lambda = RealVariables29[2];
  preheater_LP4.tubes.fluidOut.transp.eta = RealVariables29[3];
  preheater_LP4.tubes.fluidOut.transp.sigma = RealVariables29[4];
  preheater_LP4.tubes.fluidOut.VLE.d_l = RealVariables29[5];
  preheater_LP4.tubes.fluidOut.VLE.d_v = RealVariables29[6];
  preheater_LP4.tubes.fluidOut.VLE.h_l = RealVariables29[7];
  preheater_LP4.tubes.fluidOut.VLE.h_v = RealVariables29[8];
  preheater_LP4.tubes.fluidOut.VLE.p_l = RealVariables29[9];
  preheater_LP4.tubes.fluidOut.VLE.p_v = RealVariables29[10];
  preheater_LP4.tubes.fluidOut.VLE.s_l = RealVariables29[11];
  preheater_LP4.tubes.fluidOut.VLE.s_v = RealVariables29[12];
  preheater_LP4.tubes.fluidOut.VLE.T_l = RealVariables29[13];
  preheater_LP4.tubes.fluidOut.VLE.T_v = RealVariables29[14];
  preheater_LP4.tubes.fluidOut.VLEAdditional.cp_l = RealVariables29[15];
  preheater_LP4.tubes.fluidOut.VLEAdditional.cp_v = RealVariables29[16];
  preheater_LP4.tubes.fluidOut.VLEAdditional.beta_l = RealVariables29[17];
  preheater_LP4.tubes.fluidOut.VLEAdditional.beta_v = RealVariables29[18];
  preheater_LP4.tubes.fluidOut.VLEAdditional.kappa_l = RealVariables29[19];
  preheater_LP4.tubes.fluidOut.VLEAdditional.kappa_v = RealVariables29[20];
  preheater_LP4.tubes.fluidOut.VLETransp.Pr_l = RealVariables29[21];
  preheater_LP4.tubes.fluidOut.VLETransp.Pr_v = RealVariables29[22];
  preheater_LP4.tubes.fluidOut.VLETransp.lambda_l = RealVariables29[23];
  preheater_LP4.tubes.fluidOut.VLETransp.lambda_v = RealVariables29[24];
  preheater_LP4.tubes.fluidOut.VLETransp.eta_l = RealVariables29[25];
  preheater_LP4.tubes.fluidOut.VLETransp.eta_v = RealVariables29[26];
  preheater_LP4.tubes.heattransfer.Delta_T_wi = RealVariables29[27];
  preheater_LP4.tubes.heattransfer.Delta_T_wo = RealVariables29[28];
  preheater_LP4.tubes.heattransfer.Delta_T_mean = RealVariables29[29];
  preheater_LP4.tubes.heattransfer.Delta_T_U = RealVariables29[30];
  preheater_LP4.tubes.heattransfer.Delta_T_L = RealVariables29[31];
  preheater_LP4.tubes.heattransfer.alpha = RealVariables29[32];
  preheater_LP4.tubes.heattransfer.HR = RealVariables29[33];
  preheater_LP4.tubes.pressureLoss.Delta_p = RealVariables29[34];
  preheater_LP4.shell.h_liq = RealVariables29[35];
  preheater_LP4.shell.h_vap = RealVariables29[36];
  preheater_LP4.shell.drho_liqdt = RealVariables29[37];
  preheater_LP4.shell.drho_vapdt = RealVariables29[38];
  preheater_LP4.shell.volume_liq = RealVariables29[39];
  preheater_LP4.shell._volume_liq_der = RealVariables29[40];
  preheater_LP4.shell.volume_vap = RealVariables29[41];
  preheater_LP4.shell.m_flow_cond = RealVariables29[42];
  preheater_LP4.shell.m_flow_evap = RealVariables29[43];
  preheater_LP4.shell.Q_flow_phases = RealVariables29[44];
  preheater_LP4.shell.'Q_flow[1]' = RealVariables29[45];
  preheater_LP4.shell.'Q_flow[2]' = RealVariables29[46];
  preheater_LP4.shell.mass_liq = RealVariables29[47];
  preheater_LP4.shell.mass_vap = RealVariables29[48];
  preheater_LP4.shell._p_liq_der = RealVariables29[49];
  preheater_LP4.shell.p_vap = RealVariables29[50];
  preheater_LP4.shell.'H_flow_inliq[1]' = RealVariables29[51];
  preheater_LP4.shell.'H_flow_invap[1]' = RealVariables29[52];
  preheater_LP4.shell.'H_flow_outliq[1]' = RealVariables29[53];
  preheater_LP4.shell.'H_flow_outvap[1]' = RealVariables29[54];
  preheater_LP4.shell.'heat[1]'.Q_flow = RealVariables29[55];
  preheater_LP4.shell.'heat[2]'.Q_flow = RealVariables29[56];
  preheater_LP4.shell.'fluidIn[1]'.d = RealVariables29[57];
  preheater_LP4.shell.'fluidIn[1]'.h = RealVariables29[58];
  preheater_LP4.shell.'fluidIn[1]'.s = RealVariables29[59];
  preheater_LP4.shell.'fluidIn[1]'.T = RealVariables29[60];
  preheater_LP4.shell.'fluidIn[1]'.q = RealVariables29[61];
  preheater_LP4.shell.'fluidIn[1]'.cp = RealVariables29[62];
  preheater_LP4.shell.'fluidIn[1]'.cv = RealVariables29[63];
  preheater_LP4.shell.'fluidIn[1]'.beta = RealVariables29[64];
  preheater_LP4.shell.'fluidIn[1]'.kappa = RealVariables29[65];
  preheater_LP4.shell.'fluidIn[1]'.w = RealVariables29[66];
  preheater_LP4.shell.'fluidIn[1]'.drhodh_pxi = RealVariables29[67];
  preheater_LP4.shell.'fluidIn[1]'.drhodp_hxi = RealVariables29[68];
  preheater_LP4.shell.'fluidIn[1]'.gamma = RealVariables29[69];
  preheater_LP4.shell.'fluidIn[1]'.VLE.d_l = RealVariables29[70];
  preheater_LP4.shell.'fluidIn[1]'.VLE.d_v = RealVariables29[71];
  preheater_LP4.shell.'fluidIn[1]'.VLE.h_l = RealVariables29[72];
  preheater_LP4.shell.'fluidIn[1]'.VLE.h_v = RealVariables29[73];
  preheater_LP4.shell.'fluidIn[1]'.VLE.p_l = RealVariables29[74];
  preheater_LP4.shell.'fluidIn[1]'.VLE.p_v = RealVariables29[75];
  preheater_LP4.shell.'fluidIn[1]'.VLE.s_l = RealVariables29[76];
  preheater_LP4.shell.'fluidIn[1]'.VLE.s_v = RealVariables29[77];
  preheater_LP4.shell.'fluidIn[1]'.VLE.T_l = RealVariables29[78];
  preheater_LP4.shell.'fluidIn[1]'.VLE.T_v = RealVariables29[79];
  preheater_LP4.shell.'fluidIn[2]'.d = RealVariables29[80];
  preheater_LP4.shell.'fluidIn[2]'.s = RealVariables29[81];
  preheater_LP4.shell.'fluidIn[2]'.T = RealVariables29[82];
  preheater_LP4.shell.'fluidIn[2]'.q = RealVariables29[83];
  preheater_LP4.shell.'fluidIn[2]'.cp = RealVariables29[84];
  preheater_LP4.shell.'fluidIn[2]'.cv = RealVariables29[85];
  preheater_LP4.shell.'fluidIn[2]'.beta = RealVariables29[86];
  preheater_LP4.shell.'fluidIn[2]'.kappa = RealVariables29[87];
  preheater_LP4.shell.'fluidIn[2]'.w = RealVariables29[88];
  preheater_LP4.shell.'fluidIn[2]'.drhodh_pxi = RealVariables29[89];
  preheater_LP4.shell.'fluidIn[2]'.drhodp_hxi = RealVariables29[90];
  preheater_LP4.shell.'fluidIn[2]'.gamma = RealVariables29[91];
  preheater_LP4.shell.'fluidIn[2]'.VLE.d_l = RealVariables29[92];
  preheater_LP4.shell.'fluidIn[2]'.VLE.d_v = RealVariables29[93];
  preheater_LP4.shell.'fluidIn[2]'.VLE.h_l = RealVariables29[94];
  preheater_LP4.shell.'fluidIn[2]'.VLE.h_v = RealVariables29[95];
  preheater_LP4.shell.'fluidIn[2]'.VLE.p_l = RealVariables29[96];
  preheater_LP4.shell.'fluidIn[2]'.VLE.p_v = RealVariables29[97];
  preheater_LP4.shell.'fluidIn[2]'.VLE.s_l = RealVariables29[98];
  preheater_LP4.shell.'fluidIn[2]'.VLE.s_v = RealVariables29[99];
  preheater_LP4.shell.'fluidIn[2]'.VLE.T_l = RealVariables29[100];
  preheater_LP4.shell.'fluidIn[2]'.VLE.T_v = RealVariables30[1];
  preheater_LP4.shell.'fluidIn[3]'.d = RealVariables30[2];
  preheater_LP4.shell.'fluidIn[3]'.s = RealVariables30[3];
  preheater_LP4.shell.'fluidIn[3]'.T = RealVariables30[4];
  preheater_LP4.shell.'fluidIn[3]'.q = RealVariables30[5];
  preheater_LP4.shell.'fluidIn[3]'.cp = RealVariables30[6];
  preheater_LP4.shell.'fluidIn[3]'.cv = RealVariables30[7];
  preheater_LP4.shell.'fluidIn[3]'.beta = RealVariables30[8];
  preheater_LP4.shell.'fluidIn[3]'.kappa = RealVariables30[9];
  preheater_LP4.shell.'fluidIn[3]'.w = RealVariables30[10];
  preheater_LP4.shell.'fluidIn[3]'.drhodh_pxi = RealVariables30[11];
  preheater_LP4.shell.'fluidIn[3]'.drhodp_hxi = RealVariables30[12];
  preheater_LP4.shell.'fluidIn[3]'.gamma = RealVariables30[13];
  preheater_LP4.shell.'fluidIn[3]'.VLE.d_l = RealVariables30[14];
  preheater_LP4.shell.'fluidIn[3]'.VLE.d_v = RealVariables30[15];
  preheater_LP4.shell.'fluidIn[3]'.VLE.h_l = RealVariables30[16];
  preheater_LP4.shell.'fluidIn[3]'.VLE.h_v = RealVariables30[17];
  preheater_LP4.shell.'fluidIn[3]'.VLE.p_l = RealVariables30[18];
  preheater_LP4.shell.'fluidIn[3]'.VLE.p_v = RealVariables30[19];
  preheater_LP4.shell.'fluidIn[3]'.VLE.s_l = RealVariables30[20];
  preheater_LP4.shell.'fluidIn[3]'.VLE.s_v = RealVariables30[21];
  preheater_LP4.shell.'fluidIn[3]'.VLE.T_l = RealVariables30[22];
  preheater_LP4.shell.'fluidIn[3]'.VLE.T_v = RealVariables30[23];
  preheater_LP4.shell.'fluidOut[1]'.d = RealVariables30[24];
  preheater_LP4.shell.'fluidOut[1]'.h = RealVariables30[25];
  preheater_LP4.shell.'fluidOut[1]'.s = RealVariables30[26];
  preheater_LP4.shell.'fluidOut[1]'.T = RealVariables30[27];
  preheater_LP4.shell.'fluidOut[1]'.q = RealVariables30[28];
  preheater_LP4.shell.'fluidOut[1]'.cp = RealVariables30[29];
  preheater_LP4.shell.'fluidOut[1]'.cv = RealVariables30[30];
  preheater_LP4.shell.'fluidOut[1]'.beta = RealVariables30[31];
  preheater_LP4.shell.'fluidOut[1]'.kappa = RealVariables30[32];
  preheater_LP4.shell.'fluidOut[1]'.w = RealVariables30[33];
  preheater_LP4.shell.'fluidOut[1]'.drhodh_pxi = RealVariables30[34];
  preheater_LP4.shell.'fluidOut[1]'.drhodp_hxi = RealVariables30[35];
  preheater_LP4.shell.'fluidOut[1]'.gamma = RealVariables30[36];
  preheater_LP4.shell.'fluidOut[1]'.VLE.d_l = RealVariables30[37];
  preheater_LP4.shell.'fluidOut[1]'.VLE.d_v = RealVariables30[38];
  preheater_LP4.shell.'fluidOut[1]'.VLE.h_l = RealVariables30[39];
  preheater_LP4.shell.'fluidOut[1]'.VLE.h_v = RealVariables30[40];
  preheater_LP4.shell.'fluidOut[1]'.VLE.p_l = RealVariables30[41];
  preheater_LP4.shell.'fluidOut[1]'.VLE.p_v = RealVariables30[42];
  preheater_LP4.shell.'fluidOut[1]'.VLE.s_l = RealVariables30[43];
  preheater_LP4.shell.'fluidOut[1]'.VLE.s_v = RealVariables30[44];
  preheater_LP4.shell.'fluidOut[1]'.VLE.T_l = RealVariables30[45];
  preheater_LP4.shell.'fluidOut[1]'.VLE.T_v = RealVariables30[46];
  preheater_LP4.shell.heattransfer.'Delta_T_mean[1]' = RealVariables30[47];
  preheater_LP4.shell.heattransfer.'Delta_T_mean[2]' = RealVariables30[48];
  preheater_LP4.shell.heattransfer.Q_flow_tot = RealVariables30[49];
  preheater_LP4.shell.phaseBorder.'Delta_p_geo_in[1]' = RealVariables30[50];
  preheater_LP4.shell.phaseBorder.'Delta_p_geo_in[2]' = RealVariables30[51];
  preheater_LP4.shell.phaseBorder.'Delta_p_geo_in[3]' = RealVariables30[52];
  preheater_LP4.shell.phaseBorder.'Delta_p_geo_out[1]' = RealVariables30[53];
  preheater_LP4.shell.phaseBorder.'zoneAlloc_in[1]' = RealVariables30[54];
  preheater_LP4.shell.phaseBorder.'zoneAlloc_in[2]' = RealVariables30[55];
  preheater_LP4.shell.phaseBorder.'zoneAlloc_in[3]' = RealVariables30[56];
  preheater_LP4.shell.phaseBorder.'zoneAlloc_out[1]' = RealVariables30[57];
  preheater_LP4.shell.phaseBorder.level_abs = RealVariables30[58];
  preheater_LP4.shell.phaseBorder.'m_flow_inliq[1]' = RealVariables30[59];
  preheater_LP4.shell.phaseBorder.'m_flow_invap[1]' = RealVariables30[60];
  preheater_LP4.shell.phaseBorder.'m_flow_outliq[1]' = RealVariables30[61];
  preheater_LP4.shell.phaseBorder.'m_flow_outvap[1]' = RealVariables30[62];
  preheater_LP4.shell.phaseBorder.'H_flow_inliq[1]' = RealVariables30[63];
  preheater_LP4.shell.phaseBorder.'H_flow_invap[1]' = RealVariables30[64];
  preheater_LP4.shell.phaseBorder.'H_flow_outliq[1]' = RealVariables30[65];
  preheater_LP4.shell.phaseBorder.'H_flow_outvap[1]' = RealVariables30[66];
  preheater_LP4.shell.phaseBorder.'rho[1]' = RealVariables30[67];
  preheater_LP4.shell.phaseBorder.'rho[2]' = RealVariables30[68];
  preheater_LP4.shell.phaseBorder.'steamQuality_in[1]' = RealVariables30[69];
  preheater_LP4.shell.phaseBorder.'steamQuality_in[2]' = RealVariables30[70];
  preheater_LP4.shell.phaseBorder.'steamQuality_in[3]' = RealVariables30[71];
  preheater_LP4.shell.phaseBorder.'steamQuality_out[1]' = RealVariables30[72];
  preheater_LP4.shell.phaseBorder.A_hor_act = RealVariables30[73];
  preheater_LP4.shell.pressureLoss.'Delta_p[1]' = RealVariables30[74];
  preheater_LP4.shell.summary.outline.'A_heat[1]' = RealVariables30[75];
  preheater_LP4.shell.summary.outline.'A_heat[2]' = RealVariables30[76];
  preheater_LP4.shell.summary.outline.'yps[2]' = RealVariables30[77];
  preheater_LP4.shell.summary.outline.fluidMass = RealVariables30[78];
  preheater_LP4.shell.summary.outline.H_tot = RealVariables30[79];
  preheater_LP4.shell.summary.outline.Q_flow_tot = RealVariables30[80];
  preheater_LP4.shell.summary.outline.Delta_p = RealVariables30[81];
  preheater_LP4.shell.summary.'inlet[1]'.H_flow = RealVariables30[82];
  preheater_LP4.shell.summary.'outlet[1]'.H_flow = RealVariables30[83];
  preheater_LP4.shell.summary.fluid.'T[1]' = RealVariables30[84];
  preheater_LP4.shell.summary.fluid.'T[2]' = RealVariables30[85];
  preheater_LP4.shell.summary.fluid.'T_sat[1]' = RealVariables30[86];
  preheater_LP4.shell.summary.fluid.'T_sat[2]' = RealVariables30[87];
  preheater_LP4.shell.summary.fluid.'h_bub[1]' = RealVariables30[88];
  preheater_LP4.shell.summary.fluid.'h_bub[2]' = RealVariables30[89];
  preheater_LP4.shell.summary.fluid.'h_dew[1]' = RealVariables30[90];
  preheater_LP4.shell.summary.fluid.'h_dew[2]' = RealVariables30[91];
  preheater_LP4.shell.summary.fluid.'s[1]' = RealVariables30[92];
  preheater_LP4.shell.summary.fluid.'s[2]' = RealVariables30[93];
  preheater_LP4.shell.summary.fluid.'steamQuality[1]' = RealVariables30[94];
  preheater_LP4.shell.summary.fluid.'steamQuality[2]' = RealVariables30[95];
  preheater_LP4.shell.summary.fluid.'H[1]' = RealVariables30[96];
  preheater_LP4.shell.summary.fluid.'H[2]' = RealVariables30[97];
  preheater_LP4.shell.summary.fluid.'rho[1]' = RealVariables30[98];
  preheater_LP4.shell.summary.fluid.'rho[2]' = RealVariables30[99];
  preheater_LP4.wall.'T[1]' = RealVariables30[100];
  preheater_LP4.wall.'T[2]' = RealVariables31[1];
  preheater_LP4.wall.'T[3]' = RealVariables31[2];
  preheater_LP4.wall.'U[1]' = RealVariables31[3];
  preheater_LP4.wall.'U[2]' = RealVariables31[4];
  preheater_LP4.wall.'U[3]' = RealVariables31[5];
  preheater_LP4.wall.'Q_flow[1]' = RealVariables31[6];
  preheater_LP4.wall.'Q_flow[2]' = RealVariables31[7];
  preheater_LP4.wall.'Q_flow[3]' = RealVariables31[8];
  preheater_LP4.wall.'Tdr[1]' = RealVariables31[9];
  preheater_LP4.wall.'Tdr[2]' = RealVariables31[10];
  preheater_LP4.wall.'Tdr[3]' = RealVariables31[11];
  preheater_LP4.wall.'Tdr[4]' = RealVariables31[12];
  preheater_LP4.wall.T_mean = RealVariables31[13];
  preheater_LP4.wall.outerPhase.Q_flow = RealVariables31[14];
  preheater_LP4.summary.outline.Q_flow = RealVariables31[15];
  preheater_LP4.summary.outline.Delta_T_in = RealVariables31[16];
  preheater_LP4.summary.outline.Delta_T_out = RealVariables31[17];
  preheater_LP4.summary.outline.kA = RealVariables31[18];
  preheater_LP4.eye2.p = RealVariables31[19];
  preheater_LP4.eye2.h = RealVariables31[20];
  preheater_LP4.eye2.T = RealVariables31[21];
  preheater_LP4.eye2.s = RealVariables31[22];
  preheater_LP4.eye1.p = RealVariables31[23];
  preheater_LP4.eye1.h = RealVariables31[24];
  preheater_LP4.eye1.T = RealVariables31[25];
  preheater_LP4.eye1.s = RealVariables31[26];
  Pump_preheater_LP3.Delta_p = RealVariables31[27];
  Pump_preheater_LP3.V_flow = RealVariables31[28];
  Pump_preheater_LP3.P_fluid = RealVariables31[29];
  Pump_preheater_LP3.outlet.p = RealVariables31[30];
  Pump_preheater_LP3.outlet.h_outflow = RealVariables31[31];
  Pump_preheater_LP3.eye.p = RealVariables31[32];
  Pump_preheater_LP3.eye.h = RealVariables31[33];
  Pump_preheater_LP3.eye.T = RealVariables31[34];
  Pump_preheater_LP3.eye.s = RealVariables31[35];
  Pump_preheater_LP3.summary.outline.head = RealVariables31[36];
  Pump_preheater_LP3.summary.outline.NPSHa = RealVariables31[37];
  Pump_preheater_LP3.summary.inlet.T = RealVariables31[38];
  Pump_preheater_LP3.summary.inlet.h = RealVariables31[39];
  Pump_preheater_LP3.summary.inlet.s = RealVariables31[40];
  Pump_preheater_LP3.summary.inlet.steamQuality = RealVariables31[41];
  Pump_preheater_LP3.summary.inlet.H_flow = RealVariables31[42];
  Pump_preheater_LP3.summary.inlet.rho = RealVariables31[43];
  Pump_preheater_LP3.summary.outlet.T = RealVariables31[44];
  Pump_preheater_LP3.summary.outlet.h = RealVariables31[45];
  Pump_preheater_LP3.summary.outlet.s = RealVariables31[46];
  Pump_preheater_LP3.summary.outlet.steamQuality = RealVariables31[47];
  Pump_preheater_LP3.summary.outlet.H_flow = RealVariables31[48];
  Pump_preheater_LP3.summary.outlet.rho = RealVariables31[49];
  valve_afterPumpLP3.pressureLoss.Delta_p = RealVariables31[50];
  valve_afterPumpLP3.summary.outline.V_flow = RealVariables31[51];
  valve_afterPumpLP3.summary.outline.PR = RealVariables31[52];
  valve_afterPumpLP3.summary.inlet.T = RealVariables31[53];
  valve_afterPumpLP3.summary.inlet.h = RealVariables31[54];
  valve_afterPumpLP3.summary.inlet.s = RealVariables31[55];
  valve_afterPumpLP3.summary.inlet.steamQuality = RealVariables31[56];
  valve_afterPumpLP3.summary.inlet.H_flow = RealVariables31[57];
  valve_afterPumpLP3.summary.inlet.rho = RealVariables31[58];
  valve_afterPumpLP3.summary.outlet.T = RealVariables31[59];
  valve_afterPumpLP3.summary.outlet.h = RealVariables31[60];
  valve_afterPumpLP3.summary.outlet.s = RealVariables31[61];
  valve_afterPumpLP3.summary.outlet.steamQuality = RealVariables31[62];
  valve_afterPumpLP3.summary.outlet.H_flow = RealVariables31[63];
  valve_afterPumpLP3.summary.outlet.rho = RealVariables31[64];
  valve_afterPumpLP3.eye.p = RealVariables31[65];
  valve_afterPumpLP3.eye.h = RealVariables31[66];
  valve_afterPumpLP3.eye.T = RealVariables31[67];
  valve_afterPumpLP3.eye.s = RealVariables31[68];
  valveControl_preheater_LP2.pressureLoss.aperture_ = RealVariables31[69];
  valveControl_preheater_LP2.pressureLoss.Delta_p = RealVariables31[70];
  valveControl_preheater_LP2.pressureLoss.ValveCharacteristics.'u[1]' = RealVariables31[71];
  valveControl_preheater_LP2.pressureLoss.ValveCharacteristics.'y[1]' = RealVariables31[72];
  valveControl_preheater_LP2.summary.outline.V_flow = RealVariables31[73];
  valveControl_preheater_LP2.summary.outline.PR = RealVariables31[74];
  valveControl_preheater_LP2.summary.inlet.T = RealVariables31[75];
  valveControl_preheater_LP2.summary.inlet.s = RealVariables31[76];
  valveControl_preheater_LP2.summary.inlet.steamQuality = RealVariables31[77];
  valveControl_preheater_LP2.summary.inlet.H_flow = RealVariables31[78];
  valveControl_preheater_LP2.summary.inlet.rho = RealVariables31[79];
  valveControl_preheater_LP2.summary.outlet.T = RealVariables31[80];
  valveControl_preheater_LP2.summary.outlet.s = RealVariables31[81];
  valveControl_preheater_LP2.summary.outlet.steamQuality = RealVariables31[82];
  valveControl_preheater_LP2.summary.outlet.H_flow = RealVariables31[83];
  valveControl_preheater_LP2.summary.outlet.rho = RealVariables31[84];
  valveControl_preheater_LP2.eye.p = RealVariables31[85];
  valveControl_preheater_LP2.eye.h = RealVariables31[86];
  valveControl_preheater_LP2.eye.T = RealVariables31[87];
  valveControl_preheater_LP2.eye.s = RealVariables31[88];
  join_preheater_LP3.'H_flow_in[1]' = RealVariables31[89];
  join_preheater_LP3.'H_flow_in[2]' = RealVariables31[90];
  join_preheater_LP3.H_flow_out = RealVariables31[91];
  join_preheater_LP3.h = RealVariables31[92];
  join_preheater_LP3.mass = RealVariables31[93];
  join_preheater_LP3.drhodt = RealVariables31[94];
  join_preheater_LP3.p = RealVariables31[95];
  join_preheater_LP3.summary.inlet1.T = RealVariables31[96];
  join_preheater_LP3.summary.inlet1.h = RealVariables31[97];
  join_preheater_LP3.summary.inlet1.s = RealVariables31[98];
  join_preheater_LP3.summary.inlet1.steamQuality = RealVariables31[99];
  join_preheater_LP3.summary.inlet1.H_flow = RealVariables31[100];
  join_preheater_LP3.summary.inlet1.rho = RealVariables32[1];
  join_preheater_LP3.summary.inlet2.T = RealVariables32[2];
  join_preheater_LP3.summary.inlet2.h = RealVariables32[3];
  join_preheater_LP3.summary.inlet2.s = RealVariables32[4];
  join_preheater_LP3.summary.inlet2.steamQuality = RealVariables32[5];
  join_preheater_LP3.summary.inlet2.H_flow = RealVariables32[6];
  join_preheater_LP3.summary.inlet2.rho = RealVariables32[7];
  join_preheater_LP3.summary.outlet.T = RealVariables32[8];
  join_preheater_LP3.summary.outlet.h = RealVariables32[9];
  join_preheater_LP3.summary.outlet.s = RealVariables32[10];
  join_preheater_LP3.summary.outlet.steamQuality = RealVariables32[11];
  join_preheater_LP3.summary.outlet.H_flow = RealVariables32[12];
  join_preheater_LP3.summary.outlet.rho = RealVariables32[13];
  join_preheater_LP3.summary.fluid.T = RealVariables32[14];
  join_preheater_LP3.summary.fluid.T_sat = RealVariables32[15];
  join_preheater_LP3.summary.fluid.h_bub = RealVariables32[16];
  join_preheater_LP3.summary.fluid.h_dew = RealVariables32[17];
  join_preheater_LP3.summary.fluid.s = RealVariables32[18];
  join_preheater_LP3.summary.fluid.steamQuality = RealVariables32[19];
  join_preheater_LP3.summary.fluid.H = RealVariables32[20];
  join_preheater_LP3.summary.fluid.rho = RealVariables32[21];
  join_preheater_LP3.pressureLossIn1.dp = RealVariables32[22];
  join_preheater_LP3.outlet.m_flow = RealVariables32[23];
  join_preheater_LP3.eye.p = RealVariables32[24];
  join_preheater_LP3.eye.h = RealVariables32[25];
  join_preheater_LP3.eye.T = RealVariables32[26];
  join_preheater_LP3.eye.s = RealVariables32[27];
  valveControl_preheater_LP4.pressureLoss.aperture_ = RealVariables32[28];
  valveControl_preheater_LP4.pressureLoss.Delta_p = RealVariables32[29];
  valveControl_preheater_LP4.pressureLoss.ValveCharacteristics.'u[1]' = RealVariables32[30];
  valveControl_preheater_LP4.pressureLoss.ValveCharacteristics.'y[1]' = RealVariables32[31];
  valveControl_preheater_LP4.summary.outline.V_flow = RealVariables32[32];
  valveControl_preheater_LP4.summary.outline.PR = RealVariables32[33];
  valveControl_preheater_LP4.summary.inlet.T = RealVariables32[34];
  valveControl_preheater_LP4.summary.inlet.s = RealVariables32[35];
  valveControl_preheater_LP4.summary.inlet.steamQuality = RealVariables32[36];
  valveControl_preheater_LP4.summary.inlet.H_flow = RealVariables32[37];
  valveControl_preheater_LP4.summary.inlet.rho = RealVariables32[38];
  valveControl_preheater_LP4.summary.outlet.T = RealVariables32[39];
  valveControl_preheater_LP4.summary.outlet.s = RealVariables32[40];
  valveControl_preheater_LP4.summary.outlet.steamQuality = RealVariables32[41];
  valveControl_preheater_LP4.summary.outlet.H_flow = RealVariables32[42];
  valveControl_preheater_LP4.summary.outlet.rho = RealVariables32[43];
  valveControl_preheater_LP4.eye.p = RealVariables32[44];
  valveControl_preheater_LP4.eye.h = RealVariables32[45];
  valveControl_preheater_LP4.eye.T = RealVariables32[46];
  valveControl_preheater_LP4.eye.s = RealVariables32[47];
  valve_LP2.pressureLoss.Delta_p = RealVariables32[48];
  valve_LP2.summary.outline.V_flow = RealVariables32[49];
  valve_LP2.summary.outline.PR = RealVariables32[50];
  valve_LP2.summary.inlet.T = RealVariables32[51];
  valve_LP2.summary.inlet.s = RealVariables32[52];
  valve_LP2.summary.inlet.steamQuality = RealVariables32[53];
  valve_LP2.summary.inlet.H_flow = RealVariables32[54];
  valve_LP2.summary.inlet.rho = RealVariables32[55];
  valve_LP2.summary.outlet.T = RealVariables32[56];
  valve_LP2.summary.outlet.s = RealVariables32[57];
  valve_LP2.summary.outlet.steamQuality = RealVariables32[58];
  valve_LP2.summary.outlet.H_flow = RealVariables32[59];
  valve_LP2.summary.outlet.rho = RealVariables32[60];
  valve_LP2.eye.p = RealVariables32[61];
  valve_LP2.eye.h = RealVariables32[62];
  valve_LP2.eye.T = RealVariables32[63];
  valve_LP2.eye.s = RealVariables32[64];
  valve_LP3.pressureLoss.Delta_p = RealVariables32[65];
  valve_LP3.summary.outline.V_flow = RealVariables32[66];
  valve_LP3.summary.outline.PR = RealVariables32[67];
  valve_LP3.summary.inlet.T = RealVariables32[68];
  valve_LP3.summary.inlet.s = RealVariables32[69];
  valve_LP3.summary.inlet.steamQuality = RealVariables32[70];
  valve_LP3.summary.inlet.H_flow = RealVariables32[71];
  valve_LP3.summary.inlet.rho = RealVariables32[72];
  valve_LP3.summary.outlet.T = RealVariables32[73];
  valve_LP3.summary.outlet.s = RealVariables32[74];
  valve_LP3.summary.outlet.steamQuality = RealVariables32[75];
  valve_LP3.summary.outlet.H_flow = RealVariables32[76];
  valve_LP3.summary.outlet.rho = RealVariables32[77];
  valve_LP3.eye.p = RealVariables32[78];
  valve_LP3.eye.h = RealVariables32[79];
  valve_LP3.eye.T = RealVariables32[80];
  valve_LP3.eye.s = RealVariables32[81];
  boundaryVLE_Txim_flow.eye.p = RealVariables32[82];
  boundaryVLE_Txim_flow.eye.h = RealVariables32[83];
  boundaryVLE_Txim_flow.eye.s = RealVariables32[84];
  boundaryVLE_phxi.eye.h = RealVariables32[85];
  boundaryVLE_phxi.eye.T = RealVariables32[86];
  boundaryVLE_phxi.eye.s = RealVariables32[87];
  PID_preheaterLP4.controlError = RealVariables32[88];
  PID_preheaterLP4.resetValueP = RealVariables32[89];
  PID_preheaterLP4.resetValueID = RealVariables32[90];
  PID_preheaterLP4.resetValueI = RealVariables32[91];
  PID_preheaterLP4.P.u = RealVariables32[92];
  PID_preheaterLP4.P.y = RealVariables32[93];
  PID_preheaterLP4.I.u = RealVariables32[94];
  PID_preheaterLP4.I.y = RealVariables32[95];
  PID_preheaterLP4.addPID.y = RealVariables32[96];
  PID_preheaterLP4.addI.u1 = RealVariables32[97];
  PID_preheaterLP4.addI.u2 = RealVariables32[98];
  PID_preheaterLP4.addI.y = RealVariables32[99];
  PID_preheaterLP4.gainTrack.u = RealVariables32[100];
  PID_preheaterLP4.limiter.u = RealVariables33[1];
  PID_preheaterLP4.limiter.y = RealVariables33[2];
  PID_preheaterLP4.feedback.y = RealVariables33[3];
  PID_preheaterLP4.switch_OnOff.u1 = RealVariables33[4];
  PID_preheaterLP4.smoothPIDInput.y_aux = RealVariables33[5];
  PID_preheaterLP4.smoothPIDOutput.y_aux = RealVariables33[6];
  PID_preheaterLP4.smoothPIDOutput1.y_aux = RealVariables33[7];
  PID_preheaterLP4.time_lag_I_activation.y = RealVariables33[8];
  PID_preheaterLP3.controlError = RealVariables33[9];
  PID_preheaterLP3.resetValueP = RealVariables33[10];
  PID_preheaterLP3.resetValueID = RealVariables33[11];
  PID_preheaterLP3.resetValueI = RealVariables33[12];
  PID_preheaterLP3.P.u = RealVariables33[13];
  PID_preheaterLP3.I.u = RealVariables33[14];
  PID_preheaterLP3.I.y = RealVariables33[15];
  PID_preheaterLP3.addPID.y = RealVariables33[16];
  PID_preheaterLP3.addI.u1 = RealVariables33[17];
  PID_preheaterLP3.addI.u2 = RealVariables33[18];
  PID_preheaterLP3.addI.y = RealVariables33[19];
  PID_preheaterLP3.gainTrack.u = RealVariables33[20];
  PID_preheaterLP3.limiter.u = RealVariables33[21];
  PID_preheaterLP3.limiter.y = RealVariables33[22];
  PID_preheaterLP3.feedback.y = RealVariables33[23];
  PID_preheaterLP3.fromPU.y = RealVariables33[24];
  PID_preheaterLP3.switch_OnOff.u1 = RealVariables33[25];
  PID_preheaterLP3.smoothPIDInput.y_aux = RealVariables33[26];
  PID_preheaterLP3.smoothPIDOutput.y_aux = RealVariables33[27];
  PID_preheaterLP3.smoothPIDOutput1.y_aux = RealVariables33[28];
  PID_preheaterLP3.time_lag_I_activation.y = RealVariables33[29];
  PID_NDVW3.controlError = RealVariables33[30];
  PID_NDVW3.resetValueP = RealVariables33[31];
  PID_NDVW3.resetValueID = RealVariables33[32];
  PID_NDVW3.resetValueI = RealVariables33[33];
  PID_NDVW3.P.u = RealVariables33[34];
  PID_NDVW3.P.y = RealVariables33[35];
  PID_NDVW3.I.u = RealVariables33[36];
  PID_NDVW3.I.y = RealVariables33[37];
  PID_NDVW3.addPID.y = RealVariables33[38];
  PID_NDVW3.addI.u1 = RealVariables33[39];
  PID_NDVW3.addI.u2 = RealVariables33[40];
  PID_NDVW3.addI.y = RealVariables33[41];
  PID_NDVW3.gainTrack.u = RealVariables33[42];
  PID_NDVW3.limiter.u = RealVariables33[43];
  PID_NDVW3.limiter.y = RealVariables33[44];
  PID_NDVW3.feedback.y = RealVariables33[45];
  PID_NDVW3.switch_OnOff.u1 = RealVariables33[46];
  PID_NDVW3.smoothPIDInput.y_aux = RealVariables33[47];
  PID_NDVW3.smoothPIDOutput.y_aux = RealVariables33[48];
  PID_NDVW3.smoothPIDOutput1.y_aux = RealVariables33[49];
  PID_NDVW3.time_lag_I_activation.y = RealVariables33[50];
  inertia.phi = RealVariables33[51];
  inertia.flange_a.tau = RealVariables33[52];
  inertia.flange_b.tau = RealVariables33[53];
  simpleGenerator.shaft.tau = RealVariables33[54];
  simpleGenerator.summary.P_shaft = RealVariables33[55];
  simpleGenerator.summary.P_el = RealVariables33[56];
  simpleGenerator.summary.rpm = RealVariables33[57];
  downComer_feedWaterTank.'h[1]' = RealVariables33[58];
  downComer_feedWaterTank.'h[2]' = RealVariables33[59];
  downComer_feedWaterTank.'h[3]' = RealVariables33[60];
  downComer_feedWaterTank.'p[1]' = RealVariables33[61];
  downComer_feedWaterTank.'p[2]' = RealVariables33[62];
  downComer_feedWaterTank.'p[3]' = RealVariables33[63];
  downComer_feedWaterTank.summary.outline.Delta_p = RealVariables33[64];
  downComer_feedWaterTank.summary.outline.mass_tot = RealVariables33[65];
  downComer_feedWaterTank.summary.outline.H_tot = RealVariables33[66];
  downComer_feedWaterTank.summary.outline.'mass[1]' = RealVariables33[67];
  downComer_feedWaterTank.summary.outline.'mass[2]' = RealVariables33[68];
  downComer_feedWaterTank.summary.outline.'mass[3]' = RealVariables33[69];
  downComer_feedWaterTank.summary.outline.'I[1]' = RealVariables33[70];
  downComer_feedWaterTank.summary.outline.'I[2]' = RealVariables33[71];
  downComer_feedWaterTank.summary.outline.'I[3]' = RealVariables33[72];
  downComer_feedWaterTank.summary.outline.'I[4]' = RealVariables33[73];
  downComer_feedWaterTank.summary.outline.'I_flow[1]' = RealVariables33[74];
  downComer_feedWaterTank.summary.outline.'I_flow[2]' = RealVariables33[75];
  downComer_feedWaterTank.summary.outline.'I_flow[3]' = RealVariables33[76];
  downComer_feedWaterTank.summary.outline.'I_flow[4]' = RealVariables33[77];
  downComer_feedWaterTank.summary.outline.'I_flow[5]' = RealVariables33[78];
  downComer_feedWaterTank.summary.outline.'m_flow[2]' = RealVariables33[79];
  downComer_feedWaterTank.summary.outline.'m_flow[3]' = RealVariables33[80];
  downComer_feedWaterTank.summary.outline.'w[1]' = RealVariables33[81];
  downComer_feedWaterTank.summary.outline.'w[2]' = RealVariables33[82];
  downComer_feedWaterTank.summary.outline.'w[3]' = RealVariables33[83];
  downComer_feedWaterTank.summary.outline.'w[4]' = RealVariables33[84];
  downComer_feedWaterTank.summary.inlet.T = RealVariables33[85];
  downComer_feedWaterTank.summary.inlet.h = RealVariables33[86];
  downComer_feedWaterTank.summary.inlet.s = RealVariables33[87];
  downComer_feedWaterTank.summary.inlet.steamQuality = RealVariables33[88];
  downComer_feedWaterTank.summary.inlet.H_flow = RealVariables33[89];
  downComer_feedWaterTank.summary.inlet.rho = RealVariables33[90];
  downComer_feedWaterTank.summary.outlet.T = RealVariables33[91];
  downComer_feedWaterTank.summary.outlet.h = RealVariables33[92];
  downComer_feedWaterTank.summary.outlet.s = RealVariables33[93];
  downComer_feedWaterTank.summary.outlet.steamQuality = RealVariables33[94];
  downComer_feedWaterTank.summary.outlet.H_flow = RealVariables33[95];
  downComer_feedWaterTank.summary.outlet.rho = RealVariables33[96];
  downComer_feedWaterTank.summary.fluid.'T[1]' = RealVariables33[97];
  downComer_feedWaterTank.summary.fluid.'T[2]' = RealVariables33[98];
  downComer_feedWaterTank.summary.fluid.'T[3]' = RealVariables33[99];
  downComer_feedWaterTank.summary.fluid.'T_sat[1]' = RealVariables33[100];
  downComer_feedWaterTank.summary.fluid.'T_sat[2]' = RealVariables34[1];
  downComer_feedWaterTank.summary.fluid.'T_sat[3]' = RealVariables34[2];
  downComer_feedWaterTank.summary.fluid.'h_bub[1]' = RealVariables34[3];
  downComer_feedWaterTank.summary.fluid.'h_bub[2]' = RealVariables34[4];
  downComer_feedWaterTank.summary.fluid.'h_bub[3]' = RealVariables34[5];
  downComer_feedWaterTank.summary.fluid.'h_dew[1]' = RealVariables34[6];
  downComer_feedWaterTank.summary.fluid.'h_dew[2]' = RealVariables34[7];
  downComer_feedWaterTank.summary.fluid.'h_dew[3]' = RealVariables34[8];
  downComer_feedWaterTank.summary.fluid.'s[1]' = RealVariables34[9];
  downComer_feedWaterTank.summary.fluid.'s[2]' = RealVariables34[10];
  downComer_feedWaterTank.summary.fluid.'s[3]' = RealVariables34[11];
  downComer_feedWaterTank.summary.fluid.'steamQuality[1]' = RealVariables34[12];
  downComer_feedWaterTank.summary.fluid.'steamQuality[2]' = RealVariables34[13];
  downComer_feedWaterTank.summary.fluid.'steamQuality[3]' = RealVariables34[14];
  downComer_feedWaterTank.summary.fluid.'H[1]' = RealVariables34[15];
  downComer_feedWaterTank.summary.fluid.'H[2]' = RealVariables34[16];
  downComer_feedWaterTank.summary.fluid.'H[3]' = RealVariables34[17];
  downComer_feedWaterTank.summary.fluid.'rho[1]' = RealVariables34[18];
  downComer_feedWaterTank.summary.fluid.'rho[2]' = RealVariables34[19];
  downComer_feedWaterTank.summary.fluid.'rho[3]' = RealVariables34[20];
  downComer_feedWaterTank.summary.wall.'T[1]' = RealVariables34[21];
  downComer_feedWaterTank.summary.wall.'T[2]' = RealVariables34[22];
  downComer_feedWaterTank.summary.wall.'T[3]' = RealVariables34[23];
  downComer_feedWaterTank.pressureLoss.'Delta_p[1]' = RealVariables34[24];
  downComer_feedWaterTank.pressureLoss.'Delta_p[2]' = RealVariables34[25];
  downComer_feedWaterTank.pressureLoss.'Delta_p[3]' = RealVariables34[26];
  downComer_feedWaterTank.heatTransfer.'alpha[1]' = RealVariables34[27];
  downComer_feedWaterTank.heatTransfer.'alpha[2]' = RealVariables34[28];
  downComer_feedWaterTank.heatTransfer.'alpha[3]' = RealVariables34[29];
  downComer_feedWaterTank.heatTransfer.'Delta_T_wi[1]' = RealVariables34[30];
  downComer_feedWaterTank.heatTransfer.'Delta_T_wi[2]' = RealVariables34[31];
  downComer_feedWaterTank.heatTransfer.'Delta_T_wi[3]' = RealVariables34[32];
  downComer_feedWaterTank.heatTransfer.'Delta_T_wo[1]' = RealVariables34[33];
  downComer_feedWaterTank.heatTransfer.'Delta_T_wo[2]' = RealVariables34[34];
  downComer_feedWaterTank.heatTransfer.'Delta_T_wo[3]' = RealVariables34[35];
  downComer_feedWaterTank.heatTransfer.'Delta_T_mean[1]' = RealVariables34[36];
  downComer_feedWaterTank.heatTransfer.'Delta_T_mean[2]' = RealVariables34[37];
  downComer_feedWaterTank.heatTransfer.'Delta_T_mean[3]' = RealVariables34[38];
  downComer_feedWaterTank.heatTransfer.'Delta_T_u[1]' = RealVariables34[39];
  downComer_feedWaterTank.heatTransfer.'Delta_T_u[2]' = RealVariables34[40];
  downComer_feedWaterTank.heatTransfer.'Delta_T_u[3]' = RealVariables34[41];
  downComer_feedWaterTank.heatTransfer.'Delta_T_l[1]' = RealVariables34[42];
  downComer_feedWaterTank.heatTransfer.'Delta_T_l[2]' = RealVariables34[43];
  downComer_feedWaterTank.heatTransfer.'Delta_T_l[3]' = RealVariables34[44];
  downComer_feedWaterTank.mechanicalEquilibrium.'rho_mix[1]' = RealVariables34[45];
  downComer_feedWaterTank.mechanicalEquilibrium.'rho_mix[2]' = RealVariables34[46];
  downComer_feedWaterTank.mechanicalEquilibrium.'rho_mix[3]' = RealVariables34[47];
  downComer_feedWaterTank.'eye_int[1]'.p = RealVariables34[48];
  downComer_feedWaterTank.'eye_int[1]'.h = RealVariables34[49];
  downComer_feedWaterTank.'eye_int[1]'.T = RealVariables34[50];
  downComer_feedWaterTank.'eye_int[1]'.s = RealVariables34[51];
  valveControl_preheater_LP1.pressureLoss.Delta_p = RealVariables34[52];
  valveControl_preheater_LP1.summary.outline.V_flow = RealVariables34[53];
  valveControl_preheater_LP1.summary.outline.PR = RealVariables34[54];
  valveControl_preheater_LP1.summary.inlet.T = RealVariables34[55];
  valveControl_preheater_LP1.summary.inlet.h = RealVariables34[56];
  valveControl_preheater_LP1.summary.inlet.s = RealVariables34[57];
  valveControl_preheater_LP1.summary.inlet.steamQuality = RealVariables34[58];
  valveControl_preheater_LP1.summary.inlet.H_flow = RealVariables34[59];
  valveControl_preheater_LP1.summary.inlet.rho = RealVariables34[60];
  valveControl_preheater_LP1.summary.outlet.T = RealVariables34[61];
  valveControl_preheater_LP1.summary.outlet.h = RealVariables34[62];
  valveControl_preheater_LP1.summary.outlet.s = RealVariables34[63];
  valveControl_preheater_LP1.summary.outlet.steamQuality = RealVariables34[64];
  valveControl_preheater_LP1.summary.outlet.H_flow = RealVariables34[65];
  valveControl_preheater_LP1.summary.outlet.rho = RealVariables34[66];
  valveControl_preheater_LP1.eye.h = RealVariables34[67];
  valveControl_preheater_LP1.eye.T = RealVariables34[68];
  valveControl_preheater_LP1.eye.s = RealVariables34[69];
  P_target_INIT = RealDependentParameters1[1];
  simCenter.p_amb_start = RealDependentParameters1[2];
  simCenter.T_amb_start = RealDependentParameters1[3];
  INIT.condenser.h_in = RealDependentParameters1[4];
  INIT.condenser.m_flow_in = RealDependentParameters1[5];
  INIT.Pump_cond.p_in = RealDependentParameters1[6];
  INIT.Pump_cond.p_out = RealDependentParameters1[7];
  INIT.Pump_cond.m_flow = RealDependentParameters1[8];
  INIT.Pump_cond.h_in = RealDependentParameters1[9];
  INIT.preheater_LP1.p_cond = RealDependentParameters1[10];
  INIT.preheater_LP1.m_flow_cond = RealDependentParameters1[11];
  INIT.preheater_LP1.m_flow_tap = RealDependentParameters1[12];
  INIT.preheater_LP1.p_tap = RealDependentParameters1[13];
  INIT.preheater_LP1.h_tap_in = RealDependentParameters1[14];
  INIT.preheater_LP1.h_cond_in = RealDependentParameters1[15];
  INIT.pump_preheater_LP1.p_in = RealDependentParameters1[16];
  INIT.pump_preheater_LP1.p_out = RealDependentParameters1[17];
  INIT.pump_preheater_LP1.m_flow = RealDependentParameters1[18];
  INIT.pump_preheater_LP1.h_in = RealDependentParameters1[19];
  INIT.valvePreFeedWaterTank.p_out = RealDependentParameters1[20];
  INIT.valvePreFeedWaterTank.m_flow = RealDependentParameters1[21];
  INIT.valvePreFeedWaterTank.h_in = RealDependentParameters1[22];
  INIT.valvePreFeedWaterTank.Delta_p = RealDependentParameters1[23];
  INIT.feedwatertank.h_tap_in1 = RealDependentParameters1[24];
  INIT.feedwatertank.h_tap_in2 = RealDependentParameters1[25];
  INIT.feedwatertank.h_cond_in = RealDependentParameters1[26];
  INIT.feedwatertank.m_flow_cond = RealDependentParameters1[27];
  INIT.feedwatertank.m_flow_tap1 = RealDependentParameters1[28];
  INIT.join_LP_main.h1 = RealDependentParameters1[29];
  INIT.join_LP_main.h2 = RealDependentParameters1[30];
  INIT.join_LP_main.m_flow_1 = RealDependentParameters1[31];
  INIT.join_LP_main.m_flow_2 = RealDependentParameters1[32];
  INIT.join_LP_main.p = RealDependentParameters1[33];
  INIT.Pump_FW.p_in = RealDependentParameters1[34];
  INIT.Pump_FW.p_out = RealDependentParameters1[35];
  INIT.Pump_FW.m_flow = RealDependentParameters1[36];
  INIT.Pump_FW.h_in = RealDependentParameters1[37];
  INIT.preheater_HP.p_cond = RealDependentParameters1[38];
  INIT.preheater_HP.m_flow_cond = RealDependentParameters1[39];
  INIT.preheater_HP.m_flow_tap = RealDependentParameters1[40];
  INIT.preheater_HP.p_tap = RealDependentParameters1[41];
  INIT.preheater_HP.h_tap_in = RealDependentParameters1[42];
  INIT.preheater_HP.h_cond_in = RealDependentParameters1[43];
  INIT.boiler.m_flow_cRH = RealDependentParameters1[44];
  INIT.boiler.h_LS_in = RealDependentParameters1[45];
  INIT.boiler.h_RS_in = RealDependentParameters1[46];
  INIT.boiler.Delta_p_LS_ = RealDependentParameters1[47];
  INIT.boiler.Delta_p_RS_ = RealDependentParameters1[48];
  INIT.boiler.m_flow_feed = RealDependentParameters1[49];
  INIT.Turbine_HP.p_in = RealDependentParameters1[50];
  INIT.Turbine_HP.p_out = RealDependentParameters1[51];
  INIT.Turbine_HP.m_flow = RealDependentParameters1[52];
  INIT.Turbine_HP.h_in = RealDependentParameters1[53];
  INIT.join_HP.m_flow_3 = RealDependentParameters1[54];
  INIT.join_HP.h1 = RealDependentParameters1[55];
  INIT.join_HP.m_flow_1 = RealDependentParameters1[56];
  INIT.join_HP.p = RealDependentParameters1[57];
  INIT.valve_HP.p_out = RealDependentParameters1[58];
  INIT.valve_HP.m_flow = RealDependentParameters1[59];
  INIT.valve_HP.h_in = RealDependentParameters1[60];
  INIT.valve_HP.Delta_p = RealDependentParameters1[61];
  INIT.valve_cut.p_in = RealDependentParameters1[62];
  INIT.valve_cut.p_out = RealDependentParameters1[63];
  INIT.valve_cut.m_flow = RealDependentParameters1[64];
  INIT.valve_cut.h_in = RealDependentParameters1[65];
  INIT.valve2_HP.p_in = RealDependentParameters1[66];
  INIT.valve2_HP.p_out = RealDependentParameters1[67];
  INIT.valve2_HP.m_flow = RealDependentParameters1[68];
  INIT.valve2_HP.h_in = RealDependentParameters1[69];
  INIT.Turbine_IP1.p_in = RealDependentParameters1[70];
  INIT.Turbine_IP1.p_out = RealDependentParameters1[71];
  INIT.Turbine_IP1.m_flow = RealDependentParameters1[72];
  INIT.Turbine_IP1.h_in = RealDependentParameters1[73];
  INIT.Turbine_LP1.p_in = RealDependentParameters1[74];
  INIT.Turbine_LP1.p_out = RealDependentParameters1[75];
  INIT.Turbine_LP1.m_flow = RealDependentParameters1[76];
  INIT.Turbine_LP1.h_in = RealDependentParameters1[77];
  INIT.split_LP1.m_flow_3 = RealDependentParameters1[78];
  INIT.split_LP1.h1 = RealDependentParameters1[79];
  INIT.split_LP1.m_flow_1 = RealDependentParameters1[80];
  INIT.split_LP1.p = RealDependentParameters1[81];
  INIT.valve_IP1.m_flow = RealDependentParameters1[82];
  INIT.valve_IP1.p_in = RealDependentParameters1[83];
  INIT.valve_IP1.p_out = RealDependentParameters1[84];
  INIT.valve_IP1.h_in = RealDependentParameters1[85];
  INIT.valve_LP1.p_out = RealDependentParameters1[86];
  INIT.valve_LP1.m_flow = RealDependentParameters1[87];
  INIT.valve_LP1.h_in = RealDependentParameters1[88];
  INIT.valve_LP1.Delta_p = RealDependentParameters1[89];
  INIT.Turbine_LP4.p_in = RealDependentParameters1[90];
  INIT.Turbine_LP4.p_out = RealDependentParameters1[91];
  INIT.Turbine_LP4.h_in = RealDependentParameters1[92];
  INIT.triple.m_flow = RealDependentParameters1[93];
  INIT.triple.p = RealDependentParameters1[94];
  INIT.triple.h = RealDependentParameters1[95];
  INIT.triple1.m_flow = RealDependentParameters1[96];
  INIT.triple1.p = RealDependentParameters1[97];
  INIT.triple1.h = RealDependentParameters1[98];
  INIT.triple2.m_flow = RealDependentParameters1[99];
  INIT.triple2.p = RealDependentParameters1[100];
  INIT.triple2.h = RealDependentParameters2[1];
  INIT.triple3.m_flow = RealDependentParameters2[2];
  INIT.triple3.p = RealDependentParameters2[3];
  INIT.triple3.h = RealDependentParameters2[4];
  INIT.triple5.m_flow = RealDependentParameters2[5];
  INIT.triple5.p = RealDependentParameters2[6];
  INIT.triple5.h = RealDependentParameters2[7];
  INIT.triple6.m_flow = RealDependentParameters2[8];
  INIT.triple6.p = RealDependentParameters2[9];
  INIT.triple6.h = RealDependentParameters2[10];
  INIT.triple7.m_flow = RealDependentParameters2[11];
  INIT.triple7.p = RealDependentParameters2[12];
  INIT.triple7.h = RealDependentParameters2[13];
  INIT.triple8.m_flow = RealDependentParameters2[14];
  INIT.triple8.p = RealDependentParameters2[15];
  INIT.triple8.h = RealDependentParameters2[16];
  INIT.triple9.m_flow = RealDependentParameters2[17];
  INIT.triple9.p = RealDependentParameters2[18];
  INIT.triple9.h = RealDependentParameters2[19];
  INIT.triple10.m_flow = RealDependentParameters2[20];
  INIT.triple10.p = RealDependentParameters2[21];
  INIT.triple10.h = RealDependentParameters2[22];
  INIT.triple11.m_flow = RealDependentParameters2[23];
  INIT.triple11.p = RealDependentParameters2[24];
  INIT.triple11.h = RealDependentParameters2[25];
  INIT.triple12.m_flow = RealDependentParameters2[26];
  INIT.triple12.p = RealDependentParameters2[27];
  INIT.triple12.h = RealDependentParameters2[28];
  INIT.triple13.m_flow = RealDependentParameters2[29];
  INIT.triple13.p = RealDependentParameters2[30];
  INIT.triple13.h = RealDependentParameters2[31];
  INIT.triple15.m_flow = RealDependentParameters2[32];
  INIT.triple15.p = RealDependentParameters2[33];
  INIT.triple15.h = RealDependentParameters2[34];
  INIT.triple16.m_flow = RealDependentParameters2[35];
  INIT.triple16.p = RealDependentParameters2[36];
  INIT.triple16.h = RealDependentParameters2[37];
  INIT.triple17.m_flow = RealDependentParameters2[38];
  INIT.triple17.p = RealDependentParameters2[39];
  INIT.triple17.h = RealDependentParameters2[40];
  INIT.triple18.m_flow = RealDependentParameters2[41];
  INIT.triple18.p = RealDependentParameters2[42];
  INIT.triple18.h = RealDependentParameters2[43];
  INIT.triple19.m_flow = RealDependentParameters2[44];
  INIT.triple19.p = RealDependentParameters2[45];
  INIT.triple19.h = RealDependentParameters2[46];
  INIT.triple20.m_flow = RealDependentParameters2[47];
  INIT.triple20.p = RealDependentParameters2[48];
  INIT.triple20.h = RealDependentParameters2[49];
  INIT.Turbine_IP2.p_in = RealDependentParameters2[50];
  INIT.Turbine_IP2.p_out = RealDependentParameters2[51];
  INIT.Turbine_IP2.m_flow = RealDependentParameters2[52];
  INIT.Turbine_IP2.h_in = RealDependentParameters2[53];
  INIT.Turbine_IP3.p_in = RealDependentParameters2[54];
  INIT.Turbine_IP3.p_out = RealDependentParameters2[55];
  INIT.Turbine_IP3.m_flow = RealDependentParameters2[56];
  INIT.Turbine_IP3.h_in = RealDependentParameters2[57];
  INIT.splitIP2.p = RealDependentParameters2[58];
  INIT.splitIP2.m_flow_3 = RealDependentParameters2[59];
  INIT.splitIP2.h1 = RealDependentParameters2[60];
  INIT.splitIP2.m_flow_1 = RealDependentParameters2[61];
  INIT.splitIP3.p = RealDependentParameters2[62];
  INIT.splitIP3.m_flow_3 = RealDependentParameters2[63];
  INIT.splitIP3.h1 = RealDependentParameters2[64];
  INIT.splitIP3.m_flow_1 = RealDependentParameters2[65];
  INIT.pressureAnchor_constFlow1_1.p = RealDependentParameters2[66];
  INIT.pressureAnchor_constFlow1_1.m_flow = RealDependentParameters2[67];
  INIT.pressureAnchor_constFlow1_1.h_in = RealDependentParameters2[68];
  INIT.Turbine_LP3.p_in = RealDependentParameters2[69];
  INIT.Turbine_LP3.p_out = RealDependentParameters2[70];
  INIT.Turbine_LP3.m_flow = RealDependentParameters2[71];
  INIT.Turbine_LP3.h_in = RealDependentParameters2[72];
  INIT.Turbine_LP2.p_in = RealDependentParameters2[73];
  INIT.Turbine_LP2.p_out = RealDependentParameters2[74];
  INIT.Turbine_LP2.m_flow = RealDependentParameters2[75];
  INIT.Turbine_LP2.h_in = RealDependentParameters2[76];
  INIT.valve2.p_in = RealDependentParameters2[77];
  INIT.valve2.p_out = RealDependentParameters2[78];
  INIT.valve2.m_flow = RealDependentParameters2[79];
  INIT.valve2.h_in = RealDependentParameters2[80];
  INIT.mixerIP2.h1 = RealDependentParameters2[81];
  INIT.mixerIP2.h2 = RealDependentParameters2[82];
  INIT.mixerIP2.m_flow_1 = RealDependentParameters2[83];
  INIT.mixerIP2.m_flow_3 = RealDependentParameters2[84];
  INIT.mixerIP2.p = RealDependentParameters2[85];
  INIT.preheater_LP2.p_cond = RealDependentParameters2[86];
  INIT.preheater_LP2.m_flow_cond = RealDependentParameters2[87];
  INIT.preheater_LP2.m_flow_tap = RealDependentParameters2[88];
  INIT.preheater_LP2.p_tap = RealDependentParameters2[89];
  INIT.preheater_LP2.h_tap_in = RealDependentParameters2[90];
  INIT.preheater_LP2.h_cond_in = RealDependentParameters2[91];
  INIT.preheater_LP3.p_cond = RealDependentParameters2[92];
  INIT.preheater_LP3.m_flow_cond = RealDependentParameters2[93];
  INIT.preheater_LP3.m_flow_tap = RealDependentParameters2[94];
  INIT.preheater_LP3.p_tap = RealDependentParameters2[95];
  INIT.preheater_LP3.h_tap_in = RealDependentParameters2[96];
  INIT.preheater_LP3.h_cond_in = RealDependentParameters2[97];
  INIT.preheater_LP4.p_cond = RealDependentParameters2[98];
  INIT.preheater_LP4.m_flow_cond = RealDependentParameters2[99];
  INIT.preheater_LP4.m_flow_tap = RealDependentParameters2[100];
  INIT.preheater_LP4.p_tap = RealDependentParameters3[1];
  INIT.preheater_LP4.h_tap_in = RealDependentParameters3[2];
  INIT.preheater_LP4.h_cond_in = RealDependentParameters3[3];
  INIT.valve_IP2.m_flow = RealDependentParameters3[4];
  INIT.valve_IP2.p_in = RealDependentParameters3[5];
  INIT.valve_IP2.p_out = RealDependentParameters3[6];
  INIT.valve_IP2.h_in = RealDependentParameters3[7];
  INIT.split_LP2.m_flow_3 = RealDependentParameters3[8];
  INIT.split_LP2.h1 = RealDependentParameters3[9];
  INIT.split_LP2.m_flow_1 = RealDependentParameters3[10];
  INIT.split_LP2.p = RealDependentParameters3[11];
  INIT.split_LP3.m_flow_3 = RealDependentParameters3[12];
  INIT.split_LP3.h1 = RealDependentParameters3[13];
  INIT.split_LP3.m_flow_1 = RealDependentParameters3[14];
  INIT.split_LP3.p = RealDependentParameters3[15];
  INIT.valve_LP2.p_out = RealDependentParameters3[16];
  INIT.valve_LP2.m_flow = RealDependentParameters3[17];
  INIT.valve_LP2.h_in = RealDependentParameters3[18];
  INIT.valve_LP2.Delta_p = RealDependentParameters3[19];
  INIT.valve_LP3.p_out = RealDependentParameters3[20];
  INIT.valve_LP3.m_flow = RealDependentParameters3[21];
  INIT.valve_LP3.h_in = RealDependentParameters3[22];
  INIT.valve_LP3.Delta_p = RealDependentParameters3[23];
  INIT.pump_preheater_LP3.p_in = RealDependentParameters3[24];
  INIT.pump_preheater_LP3.p_out = RealDependentParameters3[25];
  INIT.pump_preheater_LP3.m_flow = RealDependentParameters3[26];
  INIT.pump_preheater_LP3.h_in = RealDependentParameters3[27];
  INIT.join_preheater_LP3.h1 = RealDependentParameters3[28];
  INIT.join_preheater_LP3.h2 = RealDependentParameters3[29];
  INIT.join_preheater_LP3.m_flow_1 = RealDependentParameters3[30];
  INIT.join_preheater_LP3.m_flow_2 = RealDependentParameters3[31];
  INIT.join_preheater_LP3.p = RealDependentParameters3[32];
  INIT.valve_cutPressureLP4.p_in = RealDependentParameters3[33];
  INIT.valve_cutPressureLP4.p_out = RealDependentParameters3[34];
  INIT.valve_cutPressureLP4.m_flow = RealDependentParameters3[35];
  INIT.valve_cutPressureLP4.h_in = RealDependentParameters3[36];
  INIT.mixer_condenser.h1 = RealDependentParameters3[37];
  INIT.mixer_condenser.h2 = RealDependentParameters3[38];
  INIT.mixer_condenser.m_flow_1 = RealDependentParameters3[39];
  INIT.mixer_condenser.m_flow_2 = RealDependentParameters3[40];
  INIT.mixer_condenser.p = RealDependentParameters3[41];
  INIT.triple4.m_flow = RealDependentParameters3[42];
  INIT.triple4.p = RealDependentParameters3[43];
  INIT.triple4.h = RealDependentParameters3[44];
  INIT.triple14.m_flow = RealDependentParameters3[45];
  INIT.triple14.p = RealDependentParameters3[46];
  INIT.triple14.h = RealDependentParameters3[47];
  INIT.triple21.m_flow = RealDependentParameters3[48];
  INIT.triple21.p = RealDependentParameters3[49];
  INIT.triple21.h = RealDependentParameters3[50];
  INIT.triple22.m_flow = RealDependentParameters3[51];
  INIT.triple22.p = RealDependentParameters3[52];
  INIT.triple22.h = RealDependentParameters3[53];
  INIT.triple23.m_flow = RealDependentParameters3[54];
  INIT.triple23.p = RealDependentParameters3[55];
  INIT.triple23.h = RealDependentParameters3[56];
  INIT.triple24.m_flow = RealDependentParameters3[57];
  INIT.triple24.p = RealDependentParameters3[58];
  INIT.triple24.h = RealDependentParameters3[59];
  INIT.triple25.m_flow = RealDependentParameters3[60];
  INIT.triple25.p = RealDependentParameters3[61];
  INIT.triple25.h = RealDependentParameters3[62];
  INIT.triple26.m_flow = RealDependentParameters3[63];
  INIT.triple26.p = RealDependentParameters3[64];
  INIT.triple26.h = RealDependentParameters3[65];
  INIT.triple27.m_flow = RealDependentParameters3[66];
  INIT.triple27.p = RealDependentParameters3[67];
  INIT.triple27.h = RealDependentParameters3[68];
  INIT.triple28.m_flow = RealDependentParameters3[69];
  INIT.triple28.p = RealDependentParameters3[70];
  INIT.triple28.h = RealDependentParameters3[71];
  INIT.triple29.m_flow = RealDependentParameters3[72];
  INIT.triple29.p = RealDependentParameters3[73];
  INIT.triple29.h = RealDependentParameters3[74];
  INIT.triple30.m_flow = RealDependentParameters3[75];
  INIT.triple30.p = RealDependentParameters3[76];
  INIT.triple30.h = RealDependentParameters3[77];
  INIT.triple31.m_flow = RealDependentParameters3[78];
  INIT.triple31.p = RealDependentParameters3[79];
  INIT.triple31.h = RealDependentParameters3[80];
  INIT.downComer_feedWaterTank.m_flow = RealDependentParameters3[81];
  INIT.downComer_feedWaterTank.h_in = RealDependentParameters3[82];
  INIT.downComer_feedWaterTank.p_in = RealDependentParameters3[83];
  INIT.downComer_feedWaterTank.Delta_p_fric = RealDependentParameters3[84];
  INIT.triple32.m_flow = RealDependentParameters3[85];
  INIT.triple32.p = RealDependentParameters3[86];
  INIT.triple32.h = RealDependentParameters3[87];
  NOM.condenser.h_in = RealDependentParameters3[88];
  NOM.condenser.m_flow_in = RealDependentParameters3[89];
  NOM.Pump_cond.p_in = RealDependentParameters3[90];
  NOM.Pump_cond.p_out = RealDependentParameters3[91];
  NOM.Pump_cond.m_flow = RealDependentParameters3[92];
  NOM.Pump_cond.h_in = RealDependentParameters3[93];
  NOM.preheater_LP1.p_cond = RealDependentParameters3[94];
  NOM.preheater_LP1.m_flow_cond = RealDependentParameters3[95];
  NOM.preheater_LP1.m_flow_tap = RealDependentParameters3[96];
  NOM.preheater_LP1.p_tap = RealDependentParameters3[97];
  NOM.preheater_LP1.h_tap_in = RealDependentParameters3[98];
  NOM.preheater_LP1.h_cond_in = RealDependentParameters3[99];
  NOM.pump_preheater_LP1.p_in = RealDependentParameters3[100];
  NOM.pump_preheater_LP1.p_out = RealDependentParameters4[1];
  NOM.pump_preheater_LP1.m_flow = RealDependentParameters4[2];
  NOM.pump_preheater_LP1.h_in = RealDependentParameters4[3];
  NOM.valvePreFeedWaterTank.p_out = RealDependentParameters4[4];
  NOM.valvePreFeedWaterTank.m_flow = RealDependentParameters4[5];
  NOM.valvePreFeedWaterTank.h_in = RealDependentParameters4[6];
  NOM.valvePreFeedWaterTank.Delta_p = RealDependentParameters4[7];
  NOM.feedwatertank.h_tap_in1 = RealDependentParameters4[8];
  NOM.feedwatertank.h_tap_in2 = RealDependentParameters4[9];
  NOM.feedwatertank.h_cond_in = RealDependentParameters4[10];
  NOM.feedwatertank.m_flow_cond = RealDependentParameters4[11];
  NOM.feedwatertank.m_flow_tap1 = RealDependentParameters4[12];
  NOM.join_LP_main.h1 = RealDependentParameters4[13];
  NOM.join_LP_main.h2 = RealDependentParameters4[14];
  NOM.join_LP_main.m_flow_1 = RealDependentParameters4[15];
  NOM.join_LP_main.m_flow_2 = RealDependentParameters4[16];
  NOM.join_LP_main.p = RealDependentParameters4[17];
  NOM.Pump_FW.p_in = RealDependentParameters4[18];
  NOM.Pump_FW.p_out = RealDependentParameters4[19];
  NOM.Pump_FW.m_flow = RealDependentParameters4[20];
  NOM.Pump_FW.h_in = RealDependentParameters4[21];
  NOM.preheater_HP.p_cond = RealDependentParameters4[22];
  NOM.preheater_HP.m_flow_cond = RealDependentParameters4[23];
  NOM.preheater_HP.m_flow_tap = RealDependentParameters4[24];
  NOM.preheater_HP.p_tap = RealDependentParameters4[25];
  NOM.preheater_HP.h_tap_in = RealDependentParameters4[26];
  NOM.preheater_HP.h_cond_in = RealDependentParameters4[27];
  NOM.boiler.m_flow_cRH = RealDependentParameters4[28];
  NOM.boiler.h_LS_in = RealDependentParameters4[29];
  NOM.boiler.h_RS_in = RealDependentParameters4[30];
  NOM.boiler.Delta_p_LS_ = RealDependentParameters4[31];
  NOM.boiler.Delta_p_RS_ = RealDependentParameters4[32];
  NOM.boiler.m_flow_feed = RealDependentParameters4[33];
  NOM.Turbine_HP.p_in = RealDependentParameters4[34];
  NOM.Turbine_HP.p_out = RealDependentParameters4[35];
  NOM.Turbine_HP.m_flow = RealDependentParameters4[36];
  NOM.Turbine_HP.h_in = RealDependentParameters4[37];
  NOM.join_HP.m_flow_3 = RealDependentParameters4[38];
  NOM.join_HP.h1 = RealDependentParameters4[39];
  NOM.join_HP.m_flow_1 = RealDependentParameters4[40];
  NOM.join_HP.p = RealDependentParameters4[41];
  NOM.valve_HP.p_out = RealDependentParameters4[42];
  NOM.valve_HP.m_flow = RealDependentParameters4[43];
  NOM.valve_HP.h_in = RealDependentParameters4[44];
  NOM.valve_HP.Delta_p = RealDependentParameters4[45];
  NOM.valve_cut.p_in = RealDependentParameters4[46];
  NOM.valve_cut.p_out = RealDependentParameters4[47];
  NOM.valve_cut.m_flow = RealDependentParameters4[48];
  NOM.valve_cut.h_in = RealDependentParameters4[49];
  NOM.valve2_HP.p_in = RealDependentParameters4[50];
  NOM.valve2_HP.p_out = RealDependentParameters4[51];
  NOM.valve2_HP.m_flow = RealDependentParameters4[52];
  NOM.valve2_HP.h_in = RealDependentParameters4[53];
  NOM.Turbine_IP1.p_in = RealDependentParameters4[54];
  NOM.Turbine_IP1.p_out = RealDependentParameters4[55];
  NOM.Turbine_IP1.m_flow = RealDependentParameters4[56];
  NOM.Turbine_IP1.h_in = RealDependentParameters4[57];
  NOM.Turbine_LP1.p_in = RealDependentParameters4[58];
  NOM.Turbine_LP1.p_out = RealDependentParameters4[59];
  NOM.Turbine_LP1.m_flow = RealDependentParameters4[60];
  NOM.Turbine_LP1.h_in = RealDependentParameters4[61];
  NOM.split_LP1.m_flow_3 = RealDependentParameters4[62];
  NOM.split_LP1.h1 = RealDependentParameters4[63];
  NOM.split_LP1.m_flow_1 = RealDependentParameters4[64];
  NOM.split_LP1.p = RealDependentParameters4[65];
  NOM.valve_IP1.m_flow = RealDependentParameters4[66];
  NOM.valve_IP1.p_in = RealDependentParameters4[67];
  NOM.valve_IP1.p_out = RealDependentParameters4[68];
  NOM.valve_IP1.h_in = RealDependentParameters4[69];
  NOM.valve_LP1.p_out = RealDependentParameters4[70];
  NOM.valve_LP1.m_flow = RealDependentParameters4[71];
  NOM.valve_LP1.h_in = RealDependentParameters4[72];
  NOM.valve_LP1.Delta_p = RealDependentParameters4[73];
  NOM.Turbine_LP4.p_in = RealDependentParameters4[74];
  NOM.Turbine_LP4.p_out = RealDependentParameters4[75];
  NOM.Turbine_LP4.h_in = RealDependentParameters4[76];
  NOM.triple.m_flow = RealDependentParameters4[77];
  NOM.triple.p = RealDependentParameters4[78];
  NOM.triple.h = RealDependentParameters4[79];
  NOM.triple1.m_flow = RealDependentParameters4[80];
  NOM.triple1.p = RealDependentParameters4[81];
  NOM.triple1.h = RealDependentParameters4[82];
  NOM.triple2.m_flow = RealDependentParameters4[83];
  NOM.triple2.p = RealDependentParameters4[84];
  NOM.triple2.h = RealDependentParameters4[85];
  NOM.triple3.m_flow = RealDependentParameters4[86];
  NOM.triple3.p = RealDependentParameters4[87];
  NOM.triple3.h = RealDependentParameters4[88];
  NOM.triple5.m_flow = RealDependentParameters4[89];
  NOM.triple5.p = RealDependentParameters4[90];
  NOM.triple5.h = RealDependentParameters4[91];
  NOM.triple6.m_flow = RealDependentParameters4[92];
  NOM.triple6.p = RealDependentParameters4[93];
  NOM.triple6.h = RealDependentParameters4[94];
  NOM.triple7.m_flow = RealDependentParameters4[95];
  NOM.triple7.p = RealDependentParameters4[96];
  NOM.triple7.h = RealDependentParameters4[97];
  NOM.triple8.m_flow = RealDependentParameters4[98];
  NOM.triple8.p = RealDependentParameters4[99];
  NOM.triple8.h = RealDependentParameters4[100];
  NOM.triple9.m_flow = RealDependentParameters5[1];
  NOM.triple9.p = RealDependentParameters5[2];
  NOM.triple9.h = RealDependentParameters5[3];
  NOM.triple10.m_flow = RealDependentParameters5[4];
  NOM.triple10.p = RealDependentParameters5[5];
  NOM.triple10.h = RealDependentParameters5[6];
  NOM.triple11.m_flow = RealDependentParameters5[7];
  NOM.triple11.p = RealDependentParameters5[8];
  NOM.triple11.h = RealDependentParameters5[9];
  NOM.triple12.m_flow = RealDependentParameters5[10];
  NOM.triple12.p = RealDependentParameters5[11];
  NOM.triple12.h = RealDependentParameters5[12];
  NOM.triple13.m_flow = RealDependentParameters5[13];
  NOM.triple13.p = RealDependentParameters5[14];
  NOM.triple13.h = RealDependentParameters5[15];
  NOM.triple15.m_flow = RealDependentParameters5[16];
  NOM.triple15.p = RealDependentParameters5[17];
  NOM.triple15.h = RealDependentParameters5[18];
  NOM.triple16.m_flow = RealDependentParameters5[19];
  NOM.triple16.p = RealDependentParameters5[20];
  NOM.triple16.h = RealDependentParameters5[21];
  NOM.triple17.m_flow = RealDependentParameters5[22];
  NOM.triple17.p = RealDependentParameters5[23];
  NOM.triple17.h = RealDependentParameters5[24];
  NOM.triple18.m_flow = RealDependentParameters5[25];
  NOM.triple18.p = RealDependentParameters5[26];
  NOM.triple18.h = RealDependentParameters5[27];
  NOM.triple19.m_flow = RealDependentParameters5[28];
  NOM.triple19.p = RealDependentParameters5[29];
  NOM.triple19.h = RealDependentParameters5[30];
  NOM.triple20.m_flow = RealDependentParameters5[31];
  NOM.triple20.p = RealDependentParameters5[32];
  NOM.triple20.h = RealDependentParameters5[33];
  NOM.Turbine_IP2.p_in = RealDependentParameters5[34];
  NOM.Turbine_IP2.p_out = RealDependentParameters5[35];
  NOM.Turbine_IP2.m_flow = RealDependentParameters5[36];
  NOM.Turbine_IP2.h_in = RealDependentParameters5[37];
  NOM.Turbine_IP3.p_in = RealDependentParameters5[38];
  NOM.Turbine_IP3.p_out = RealDependentParameters5[39];
  NOM.Turbine_IP3.m_flow = RealDependentParameters5[40];
  NOM.Turbine_IP3.h_in = RealDependentParameters5[41];
  NOM.splitIP2.p = RealDependentParameters5[42];
  NOM.splitIP2.m_flow_3 = RealDependentParameters5[43];
  NOM.splitIP2.h1 = RealDependentParameters5[44];
  NOM.splitIP2.m_flow_1 = RealDependentParameters5[45];
  NOM.splitIP3.p = RealDependentParameters5[46];
  NOM.splitIP3.m_flow_3 = RealDependentParameters5[47];
  NOM.splitIP3.h1 = RealDependentParameters5[48];
  NOM.splitIP3.m_flow_1 = RealDependentParameters5[49];
  NOM.pressureAnchor_constFlow1_1.p = RealDependentParameters5[50];
  NOM.pressureAnchor_constFlow1_1.m_flow = RealDependentParameters5[51];
  NOM.pressureAnchor_constFlow1_1.h_in = RealDependentParameters5[52];
  NOM.Turbine_LP3.p_in = RealDependentParameters5[53];
  NOM.Turbine_LP3.p_out = RealDependentParameters5[54];
  NOM.Turbine_LP3.m_flow = RealDependentParameters5[55];
  NOM.Turbine_LP3.h_in = RealDependentParameters5[56];
  NOM.Turbine_LP2.p_in = RealDependentParameters5[57];
  NOM.Turbine_LP2.p_out = RealDependentParameters5[58];
  NOM.Turbine_LP2.m_flow = RealDependentParameters5[59];
  NOM.Turbine_LP2.h_in = RealDependentParameters5[60];
  NOM.valve2.p_in = RealDependentParameters5[61];
  NOM.valve2.p_out = RealDependentParameters5[62];
  NOM.valve2.m_flow = RealDependentParameters5[63];
  NOM.valve2.h_in = RealDependentParameters5[64];
  NOM.mixerIP2.h1 = RealDependentParameters5[65];
  NOM.mixerIP2.h2 = RealDependentParameters5[66];
  NOM.mixerIP2.m_flow_1 = RealDependentParameters5[67];
  NOM.mixerIP2.m_flow_3 = RealDependentParameters5[68];
  NOM.mixerIP2.p = RealDependentParameters5[69];
  NOM.preheater_LP2.p_cond = RealDependentParameters5[70];
  NOM.preheater_LP2.m_flow_cond = RealDependentParameters5[71];
  NOM.preheater_LP2.m_flow_tap = RealDependentParameters5[72];
  NOM.preheater_LP2.p_tap = RealDependentParameters5[73];
  NOM.preheater_LP2.h_tap_in = RealDependentParameters5[74];
  NOM.preheater_LP2.h_cond_in = RealDependentParameters5[75];
  NOM.preheater_LP3.p_cond = RealDependentParameters5[76];
  NOM.preheater_LP3.m_flow_cond = RealDependentParameters5[77];
  NOM.preheater_LP3.m_flow_tap = RealDependentParameters5[78];
  NOM.preheater_LP3.p_tap = RealDependentParameters5[79];
  NOM.preheater_LP3.h_tap_in = RealDependentParameters5[80];
  NOM.preheater_LP3.h_cond_in = RealDependentParameters5[81];
  NOM.preheater_LP4.p_cond = RealDependentParameters5[82];
  NOM.preheater_LP4.m_flow_cond = RealDependentParameters5[83];
  NOM.preheater_LP4.m_flow_tap = RealDependentParameters5[84];
  NOM.preheater_LP4.p_tap = RealDependentParameters5[85];
  NOM.preheater_LP4.h_tap_in = RealDependentParameters5[86];
  NOM.preheater_LP4.h_cond_in = RealDependentParameters5[87];
  NOM.valve_IP2.m_flow = RealDependentParameters5[88];
  NOM.valve_IP2.p_in = RealDependentParameters5[89];
  NOM.valve_IP2.p_out = RealDependentParameters5[90];
  NOM.valve_IP2.h_in = RealDependentParameters5[91];
  NOM.split_LP2.m_flow_3 = RealDependentParameters5[92];
  NOM.split_LP2.h1 = RealDependentParameters5[93];
  NOM.split_LP2.m_flow_1 = RealDependentParameters5[94];
  NOM.split_LP2.p = RealDependentParameters5[95];
  NOM.split_LP3.m_flow_3 = RealDependentParameters5[96];
  NOM.split_LP3.h1 = RealDependentParameters5[97];
  NOM.split_LP3.m_flow_1 = RealDependentParameters5[98];
  NOM.split_LP3.p = RealDependentParameters5[99];
  NOM.valve_LP2.p_out = RealDependentParameters5[100];
  NOM.valve_LP2.m_flow = RealDependentParameters6[1];
  NOM.valve_LP2.h_in = RealDependentParameters6[2];
  NOM.valve_LP2.Delta_p = RealDependentParameters6[3];
  NOM.valve_LP3.p_out = RealDependentParameters6[4];
  NOM.valve_LP3.m_flow = RealDependentParameters6[5];
  NOM.valve_LP3.h_in = RealDependentParameters6[6];
  NOM.valve_LP3.Delta_p = RealDependentParameters6[7];
  NOM.pump_preheater_LP3.p_in = RealDependentParameters6[8];
  NOM.pump_preheater_LP3.p_out = RealDependentParameters6[9];
  NOM.pump_preheater_LP3.m_flow = RealDependentParameters6[10];
  NOM.pump_preheater_LP3.h_in = RealDependentParameters6[11];
  NOM.join_preheater_LP3.h1 = RealDependentParameters6[12];
  NOM.join_preheater_LP3.h2 = RealDependentParameters6[13];
  NOM.join_preheater_LP3.m_flow_1 = RealDependentParameters6[14];
  NOM.join_preheater_LP3.m_flow_2 = RealDependentParameters6[15];
  NOM.join_preheater_LP3.p = RealDependentParameters6[16];
  NOM.valve_cutPressureLP4.p_in = RealDependentParameters6[17];
  NOM.valve_cutPressureLP4.p_out = RealDependentParameters6[18];
  NOM.valve_cutPressureLP4.m_flow = RealDependentParameters6[19];
  NOM.valve_cutPressureLP4.h_in = RealDependentParameters6[20];
  NOM.mixer_condenser.h1 = RealDependentParameters6[21];
  NOM.mixer_condenser.h2 = RealDependentParameters6[22];
  NOM.mixer_condenser.m_flow_1 = RealDependentParameters6[23];
  NOM.mixer_condenser.m_flow_2 = RealDependentParameters6[24];
  NOM.mixer_condenser.p = RealDependentParameters6[25];
  NOM.triple4.m_flow = RealDependentParameters6[26];
  NOM.triple4.p = RealDependentParameters6[27];
  NOM.triple4.h = RealDependentParameters6[28];
  NOM.triple14.m_flow = RealDependentParameters6[29];
  NOM.triple14.p = RealDependentParameters6[30];
  NOM.triple14.h = RealDependentParameters6[31];
  NOM.triple21.m_flow = RealDependentParameters6[32];
  NOM.triple21.p = RealDependentParameters6[33];
  NOM.triple21.h = RealDependentParameters6[34];
  NOM.triple22.m_flow = RealDependentParameters6[35];
  NOM.triple22.p = RealDependentParameters6[36];
  NOM.triple22.h = RealDependentParameters6[37];
  NOM.triple23.m_flow = RealDependentParameters6[38];
  NOM.triple23.p = RealDependentParameters6[39];
  NOM.triple23.h = RealDependentParameters6[40];
  NOM.triple24.m_flow = RealDependentParameters6[41];
  NOM.triple24.p = RealDependentParameters6[42];
  NOM.triple24.h = RealDependentParameters6[43];
  NOM.triple25.m_flow = RealDependentParameters6[44];
  NOM.triple25.p = RealDependentParameters6[45];
  NOM.triple25.h = RealDependentParameters6[46];
  NOM.triple26.m_flow = RealDependentParameters6[47];
  NOM.triple26.p = RealDependentParameters6[48];
  NOM.triple26.h = RealDependentParameters6[49];
  NOM.triple27.m_flow = RealDependentParameters6[50];
  NOM.triple27.p = RealDependentParameters6[51];
  NOM.triple27.h = RealDependentParameters6[52];
  NOM.triple28.m_flow = RealDependentParameters6[53];
  NOM.triple28.p = RealDependentParameters6[54];
  NOM.triple28.h = RealDependentParameters6[55];
  NOM.triple29.m_flow = RealDependentParameters6[56];
  NOM.triple29.p = RealDependentParameters6[57];
  NOM.triple29.h = RealDependentParameters6[58];
  NOM.triple30.m_flow = RealDependentParameters6[59];
  NOM.triple30.p = RealDependentParameters6[60];
  NOM.triple30.h = RealDependentParameters6[61];
  NOM.triple31.m_flow = RealDependentParameters6[62];
  NOM.triple31.p = RealDependentParameters6[63];
  NOM.triple31.h = RealDependentParameters6[64];
  NOM.downComer_feedWaterTank.m_flow = RealDependentParameters6[65];
  NOM.downComer_feedWaterTank.h_in = RealDependentParameters6[66];
  NOM.downComer_feedWaterTank.p_in = RealDependentParameters6[67];
  NOM.downComer_feedWaterTank.Delta_p_fric = RealDependentParameters6[68];
  NOM.triple32.m_flow = RealDependentParameters6[69];
  NOM.triple32.p = RealDependentParameters6[70];
  NOM.triple32.h = RealDependentParameters6[71];
  simCenter.h_amb_fluid1 = RealFixedLocal1[1];
  simCenter.s_amb_fluid1 = RealFixedLocal1[2];
  simCenter.h_amb_fluid2 = RealFixedLocal1[3];
  simCenter.s_amb_fluid2 = RealFixedLocal1[4];
  simCenter.h_amb_fluid3 = RealFixedLocal1[5];
  simCenter.s_amb_fluid3 = RealFixedLocal1[6];
  Turbine_HP1.p_nom = RealFixedLocal1[7];
  Turbine_HP1.m_flow_nom = RealFixedLocal1[8];
  Turbine_HP1.Pi = RealFixedLocal1[9];
  Turbine_HP1.rho_nom = RealFixedLocal1[10];
  Turbine_HP1.p_in_start = RealFixedLocal1[11];
  Turbine_HP1.p_out_start = RealFixedLocal1[12];
  Turbine_HP1.Kt = RealFixedLocal1[13];
  Turbine_HP1.iCom.m_flow_nom = RealFixedLocal1[14];
  Turbine_HP1.iCom.rho_nom = RealFixedLocal1[15];
  steamGenerator.h_LS_nom = RealFixedLocal1[16];
  steamGenerator.h_RH_nom = RealFixedLocal1[17];
  steamGenerator.Q_flow_F_nom = RealFixedLocal1[18];
  steamGenerator.'CL_yF_QF_[4,2]' = RealFixedLocal1[19];
  steamGenerator.p_LS_start = RealFixedLocal1[20];
  steamGenerator.h_LS_start = RealFixedLocal1[21];
  steamGenerator.p_RH_start = RealFixedLocal1[22];
  steamGenerator.h_RH_start = RealFixedLocal1[23];
  steamGenerator.liveSteam.M = RealFixedLocal1[24];
  steamGenerator.liveSteam.crit.d = RealFixedLocal1[25];
  steamGenerator.liveSteam.crit.h = RealFixedLocal1[26];
  steamGenerator.liveSteam.crit.p = RealFixedLocal1[27];
  steamGenerator.liveSteam.crit.s = RealFixedLocal1[28];
  steamGenerator.liveSteam.crit.T = RealFixedLocal1[29];
  steamGenerator.reheatedSteam.M = RealFixedLocal1[30];
  steamGenerator.reheatedSteam.crit.d = RealFixedLocal1[31];
  steamGenerator.reheatedSteam.crit.h = RealFixedLocal1[32];
  steamGenerator.reheatedSteam.crit.p = RealFixedLocal1[33];
  steamGenerator.reheatedSteam.crit.s = RealFixedLocal1[34];
  steamGenerator.reheatedSteam.crit.T = RealFixedLocal1[35];
  steamGenerator.convert2HPFiring.'table[4,2]' = RealFixedLocal1[36];
  Turbine_IP1.p_nom = RealFixedLocal1[37];
  Turbine_IP1.m_flow_nom = RealFixedLocal1[38];
  Turbine_IP1.Pi = RealFixedLocal1[39];
  Turbine_IP1.rho_nom = RealFixedLocal1[40];
  Turbine_IP1.p_in_start = RealFixedLocal1[41];
  Turbine_IP1.p_out_start = RealFixedLocal1[42];
  Turbine_IP1.Kt = RealFixedLocal1[43];
  Turbine_IP1.iCom.m_flow_nom = RealFixedLocal1[44];
  Turbine_IP1.iCom.rho_nom = RealFixedLocal1[45];
  Turbine_LP4.p_nom = RealFixedLocal1[46];
  Turbine_LP4.m_flow_nom = RealFixedLocal1[47];
  Turbine_LP4.Pi = RealFixedLocal1[48];
  Turbine_LP4.rho_nom = RealFixedLocal1[49];
  Turbine_LP4.p_in_start = RealFixedLocal1[50];
  Turbine_LP4.p_out_start = RealFixedLocal1[51];
  Turbine_LP4.Kt = RealFixedLocal1[52];
  Turbine_LP4.iCom.m_flow_nom = RealFixedLocal1[53];
  Turbine_LP4.iCom.rho_nom = RealFixedLocal1[54];
  condenser.m_flow_nom_shell = RealFixedLocal1[55];
  condenser.h_liq_start = RealFixedLocal1[56];
  condenser.h_vap_start = RealFixedLocal1[57];
  condenser.tubes.fluidIn.M = RealFixedLocal1[58];
  condenser.tubes.fluidIn.crit.d = RealFixedLocal1[59];
  condenser.tubes.fluidIn.crit.h = RealFixedLocal1[60];
  condenser.tubes.fluidIn.crit.p = RealFixedLocal1[61];
  condenser.tubes.fluidIn.crit.s = RealFixedLocal1[62];
  condenser.tubes.fluidIn.crit.T = RealFixedLocal1[63];
  condenser.tubes.fluidOut.M = RealFixedLocal1[64];
  condenser.tubes.fluidOut.crit.d = RealFixedLocal1[65];
  condenser.tubes.fluidOut.crit.h = RealFixedLocal1[66];
  condenser.tubes.fluidOut.crit.p = RealFixedLocal1[67];
  condenser.tubes.fluidOut.crit.s = RealFixedLocal1[68];
  condenser.tubes.fluidOut.crit.T = RealFixedLocal1[69];
  condenser.tubes.heattransfer.alpha_nom = RealFixedLocal1[70];
  condenser.tubes.heattransfer.HR_nom = RealFixedLocal1[71];
  condenser.shell.m_flow_nom = RealFixedLocal1[72];
  condenser.shell.rho_liq_nom = RealFixedLocal1[73];
  condenser.shell.rho_vap_nom = RealFixedLocal1[74];
  condenser.shell.h_liq_start = RealFixedLocal1[75];
  condenser.shell.h_vap_start = RealFixedLocal1[76];
  condenser.shell.'fluidIn[1]'.M = RealFixedLocal1[77];
  condenser.shell.'fluidIn[1]'.crit.d = RealFixedLocal1[78];
  condenser.shell.'fluidIn[1]'.crit.h = RealFixedLocal1[79];
  condenser.shell.'fluidIn[1]'.crit.p = RealFixedLocal1[80];
  condenser.shell.'fluidIn[1]'.crit.s = RealFixedLocal1[81];
  condenser.shell.'fluidIn[1]'.crit.T = RealFixedLocal1[82];
  condenser.shell.'fluidIn[2]'.M = RealFixedLocal1[83];
  condenser.shell.'fluidIn[2]'.crit.d = RealFixedLocal1[84];
  condenser.shell.'fluidIn[2]'.crit.h = RealFixedLocal1[85];
  condenser.shell.'fluidIn[2]'.crit.p = RealFixedLocal1[86];
  condenser.shell.'fluidIn[2]'.crit.s = RealFixedLocal1[87];
  condenser.shell.'fluidIn[2]'.crit.T = RealFixedLocal1[88];
  condenser.shell.'fluidIn[3]'.M = RealFixedLocal1[89];
  condenser.shell.'fluidIn[3]'.crit.d = RealFixedLocal1[90];
  condenser.shell.'fluidIn[3]'.crit.h = RealFixedLocal1[91];
  condenser.shell.'fluidIn[3]'.crit.p = RealFixedLocal1[92];
  condenser.shell.'fluidIn[3]'.crit.s = RealFixedLocal1[93];
  condenser.shell.'fluidIn[3]'.crit.T = RealFixedLocal1[94];
  condenser.shell.'fluidOut[1]'.M = RealFixedLocal1[95];
  condenser.shell.'fluidOut[1]'.crit.d = RealFixedLocal1[96];
  condenser.shell.'fluidOut[1]'.crit.h = RealFixedLocal1[97];
  condenser.shell.'fluidOut[1]'.crit.p = RealFixedLocal1[98];
  condenser.shell.'fluidOut[1]'.crit.s = RealFixedLocal1[99];
  condenser.shell.'fluidOut[1]'.crit.T = RealFixedLocal1[100];
  condenser.shell.pressureLoss.'Delta_p[3]' = RealFixedLocal2[1];
  condenser.summary.outline.kA_nom = RealFixedLocal2[2];
  feedWaterTank.m_flow_cond_nom = RealFixedLocal2[3];
  feedWaterTank.m_flow_heat_nom = RealFixedLocal2[4];
  feedWaterTank.h_nom = RealFixedLocal2[5];
  feedWaterTank.p_start = RealFixedLocal2[6];
  feedWaterTank.steamQuality_start = RealFixedLocal2[7];
  feedWaterTank.h_liq_start = RealFixedLocal2[8];
  feedWaterTank.h_vap_start = RealFixedLocal2[9];
  feedWaterTank.volume.m_flow_nom = RealFixedLocal2[10];
  feedWaterTank.volume.rho_liq_nom = RealFixedLocal2[11];
  feedWaterTank.volume.rho_vap_nom = RealFixedLocal2[12];
  feedWaterTank.volume.h_liq_start = RealFixedLocal2[13];
  feedWaterTank.volume.h_vap_start = RealFixedLocal2[14];
  feedWaterTank.volume.p_start = RealFixedLocal2[15];
  feedWaterTank.volume.'fluidIn[1]'.M = RealFixedLocal2[16];
  feedWaterTank.volume.'fluidIn[1]'.crit.d = RealFixedLocal2[17];
  feedWaterTank.volume.'fluidIn[1]'.crit.h = RealFixedLocal2[18];
  feedWaterTank.volume.'fluidIn[1]'.crit.p = RealFixedLocal2[19];
  feedWaterTank.volume.'fluidIn[1]'.crit.s = RealFixedLocal2[20];
  feedWaterTank.volume.'fluidIn[1]'.crit.T = RealFixedLocal2[21];
  feedWaterTank.volume.'fluidIn[2]'.M = RealFixedLocal2[22];
  feedWaterTank.volume.'fluidIn[2]'.crit.d = RealFixedLocal2[23];
  feedWaterTank.volume.'fluidIn[2]'.crit.h = RealFixedLocal2[24];
  feedWaterTank.volume.'fluidIn[2]'.crit.p = RealFixedLocal2[25];
  feedWaterTank.volume.'fluidIn[2]'.crit.s = RealFixedLocal2[26];
  feedWaterTank.volume.'fluidIn[2]'.crit.T = RealFixedLocal2[27];
  feedWaterTank.volume.'fluidIn[3]'.M = RealFixedLocal2[28];
  feedWaterTank.volume.'fluidIn[3]'.crit.d = RealFixedLocal2[29];
  feedWaterTank.volume.'fluidIn[3]'.crit.h = RealFixedLocal2[30];
  feedWaterTank.volume.'fluidIn[3]'.crit.p = RealFixedLocal2[31];
  feedWaterTank.volume.'fluidIn[3]'.crit.s = RealFixedLocal2[32];
  feedWaterTank.volume.'fluidIn[3]'.crit.T = RealFixedLocal2[33];
  feedWaterTank.volume.'fluidOut[1]'.M = RealFixedLocal2[34];
  feedWaterTank.volume.'fluidOut[1]'.crit.d = RealFixedLocal2[35];
  feedWaterTank.volume.'fluidOut[1]'.crit.h = RealFixedLocal2[36];
  feedWaterTank.volume.'fluidOut[1]'.crit.p = RealFixedLocal2[37];
  feedWaterTank.volume.'fluidOut[1]'.crit.s = RealFixedLocal2[38];
  feedWaterTank.volume.'fluidOut[1]'.crit.T = RealFixedLocal2[39];
  feedWaterTank.volume.'fluidOut[2]'.M = RealFixedLocal2[40];
  feedWaterTank.volume.'fluidOut[2]'.crit.d = RealFixedLocal2[41];
  feedWaterTank.volume.'fluidOut[2]'.crit.h = RealFixedLocal2[42];
  feedWaterTank.volume.'fluidOut[2]'.crit.p = RealFixedLocal2[43];
  feedWaterTank.volume.'fluidOut[2]'.crit.s = RealFixedLocal2[44];
  feedWaterTank.volume.'fluidOut[2]'.crit.T = RealFixedLocal2[45];
  Pump_cond.m_flow_start = RealFixedLocal2[46];
  PI_Pump_cond.y_max = RealFixedLocal2[47];
  PI_Pump_cond.y_min = RealFixedLocal2[48];
  PI_Pump_cond.y_start = RealFixedLocal2[49];
  PI_Pump_cond.I.y_start = RealFixedLocal2[50];
  PI_Pump_cond.limiter.uMax = RealFixedLocal2[51];
  PI_Pump_cond.limiter.uMin = RealFixedLocal2[52];
  valve_IP1.pressureLoss.Delta_p_nom = RealFixedLocal2[53];
  valve_IP1.pressureLoss.m_flow_nom = RealFixedLocal2[54];
  valve_IP1.pressureLoss.aperture_ = RealFixedLocal2[55];
  valve_IP1.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal2[56];
  valve_IP1.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal2[57];
  valve_IP1.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal2[58];
  Turbine_LP1.p_nom = RealFixedLocal2[59];
  Turbine_LP1.m_flow_nom = RealFixedLocal2[60];
  Turbine_LP1.Pi = RealFixedLocal2[61];
  Turbine_LP1.rho_nom = RealFixedLocal2[62];
  Turbine_LP1.p_in_start = RealFixedLocal2[63];
  Turbine_LP1.p_out_start = RealFixedLocal2[64];
  Turbine_LP1.Kt = RealFixedLocal2[65];
  Turbine_LP1.iCom.m_flow_nom = RealFixedLocal2[66];
  Turbine_LP1.iCom.rho_nom = RealFixedLocal2[67];
  join_LP1.'m_flow_out_nom[1]' = RealFixedLocal2[68];
  join_LP1.'m_flow_out_nom[2]' = RealFixedLocal2[69];
  join_LP1.p_nom = RealFixedLocal2[70];
  join_LP1.h_nom = RealFixedLocal2[71];
  join_LP1.h_start = RealFixedLocal2[72];
  join_LP1.p_start = RealFixedLocal2[73];
  valve_IP2.pressureLoss.Kv = RealFixedLocal2[74];
  valve_IP2.pressureLoss.m_flow_nom = RealFixedLocal2[75];
  valve_IP2.pressureLoss.Delta_p_nom = RealFixedLocal2[76];
  valve_IP2.pressureLoss.Kvs = RealFixedLocal2[77];
  valve_IP2.pressureLoss.aperture_ = RealFixedLocal2[78];
  valve_IP2.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal2[79];
  valve_IP2.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal2[80];
  valve_IP2.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal2[81];
  join_HP.'m_flow_out_nom[1]' = RealFixedLocal2[82];
  join_HP.'m_flow_out_nom[2]' = RealFixedLocal2[83];
  join_HP.p_nom = RealFixedLocal2[84];
  join_HP.h_nom = RealFixedLocal2[85];
  join_HP.h_start = RealFixedLocal2[86];
  join_HP.p_start = RealFixedLocal2[87];
  preheater_HP.m_flow_nom_shell = RealFixedLocal2[88];
  preheater_HP.p_nom_shell = RealFixedLocal2[89];
  preheater_HP.h_nom_shell = RealFixedLocal2[90];
  preheater_HP.h_liq_start = RealFixedLocal2[91];
  preheater_HP.h_vap_start = RealFixedLocal2[92];
  preheater_HP.p_start_shell = RealFixedLocal2[93];
  preheater_HP.m_flow_nom_tubes = RealFixedLocal2[94];
  preheater_HP.p_nom_tubes = RealFixedLocal2[95];
  preheater_HP.h_nom_tubes = RealFixedLocal2[96];
  preheater_HP.h_start_tubes = RealFixedLocal2[97];
  preheater_HP.p_start_tubes = RealFixedLocal2[98];
  preheater_HP.tubes.m_flow_nom = RealFixedLocal2[99];
  preheater_HP.tubes.p_nom = RealFixedLocal2[100];
  preheater_HP.tubes.h_nom = RealFixedLocal3[1];
  preheater_HP.tubes.h_start = RealFixedLocal3[2];
  preheater_HP.tubes.p_start = RealFixedLocal3[3];
  preheater_HP.tubes.fluidIn.M = RealFixedLocal3[4];
  preheater_HP.tubes.fluidIn.crit.d = RealFixedLocal3[5];
  preheater_HP.tubes.fluidIn.crit.h = RealFixedLocal3[6];
  preheater_HP.tubes.fluidIn.crit.p = RealFixedLocal3[7];
  preheater_HP.tubes.fluidIn.crit.s = RealFixedLocal3[8];
  preheater_HP.tubes.fluidIn.crit.T = RealFixedLocal3[9];
  preheater_HP.tubes.fluidOut.M = RealFixedLocal3[10];
  preheater_HP.tubes.fluidOut.crit.d = RealFixedLocal3[11];
  preheater_HP.tubes.fluidOut.crit.h = RealFixedLocal3[12];
  preheater_HP.tubes.fluidOut.crit.p = RealFixedLocal3[13];
  preheater_HP.tubes.fluidOut.crit.s = RealFixedLocal3[14];
  preheater_HP.tubes.fluidOut.crit.T = RealFixedLocal3[15];
  preheater_HP.shell.m_flow_nom = RealFixedLocal3[16];
  preheater_HP.shell.p_nom = RealFixedLocal3[17];
  preheater_HP.shell.rho_liq_nom = RealFixedLocal3[18];
  preheater_HP.shell.rho_vap_nom = RealFixedLocal3[19];
  preheater_HP.shell.h_liq_start = RealFixedLocal3[20];
  preheater_HP.shell.h_vap_start = RealFixedLocal3[21];
  preheater_HP.shell.p_start = RealFixedLocal3[22];
  preheater_HP.shell.'fluidIn[1]'.M = RealFixedLocal3[23];
  preheater_HP.shell.'fluidIn[1]'.crit.d = RealFixedLocal3[24];
  preheater_HP.shell.'fluidIn[1]'.crit.h = RealFixedLocal3[25];
  preheater_HP.shell.'fluidIn[1]'.crit.p = RealFixedLocal3[26];
  preheater_HP.shell.'fluidIn[1]'.crit.s = RealFixedLocal3[27];
  preheater_HP.shell.'fluidIn[1]'.crit.T = RealFixedLocal3[28];
  preheater_HP.shell.'fluidIn[2]'.M = RealFixedLocal3[29];
  preheater_HP.shell.'fluidIn[2]'.crit.d = RealFixedLocal3[30];
  preheater_HP.shell.'fluidIn[2]'.crit.h = RealFixedLocal3[31];
  preheater_HP.shell.'fluidIn[2]'.crit.p = RealFixedLocal3[32];
  preheater_HP.shell.'fluidIn[2]'.crit.s = RealFixedLocal3[33];
  preheater_HP.shell.'fluidIn[2]'.crit.T = RealFixedLocal3[34];
  preheater_HP.shell.'fluidIn[3]'.M = RealFixedLocal3[35];
  preheater_HP.shell.'fluidIn[3]'.crit.d = RealFixedLocal3[36];
  preheater_HP.shell.'fluidIn[3]'.crit.h = RealFixedLocal3[37];
  preheater_HP.shell.'fluidIn[3]'.crit.p = RealFixedLocal3[38];
  preheater_HP.shell.'fluidIn[3]'.crit.s = RealFixedLocal3[39];
  preheater_HP.shell.'fluidIn[3]'.crit.T = RealFixedLocal3[40];
  preheater_HP.shell.'fluidOut[1]'.M = RealFixedLocal3[41];
  preheater_HP.shell.'fluidOut[1]'.crit.d = RealFixedLocal3[42];
  preheater_HP.shell.'fluidOut[1]'.crit.h = RealFixedLocal3[43];
  preheater_HP.shell.'fluidOut[1]'.crit.p = RealFixedLocal3[44];
  preheater_HP.shell.'fluidOut[1]'.crit.s = RealFixedLocal3[45];
  preheater_HP.shell.'fluidOut[1]'.crit.T = RealFixedLocal3[46];
  preheater_HP.shell.pressureLoss.'Delta_p[2]' = RealFixedLocal3[47];
  preheater_HP.shell.pressureLoss.'Delta_p[3]' = RealFixedLocal3[48];
  valve_HP.pressureLoss.Kv = RealFixedLocal3[49];
  valve_HP.pressureLoss.m_flow_nom = RealFixedLocal3[50];
  valve_HP.pressureLoss.Kvs = RealFixedLocal3[51];
  valve_HP.pressureLoss.aperture_ = RealFixedLocal3[52];
  valve_HP.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal3[53];
  valve_HP.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal3[54];
  valve_HP.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal3[55];
  valveControl_preheater_HP.pressureLoss.m_flow_nom = RealFixedLocal3[56];
  valveControl_preheater_HP.pressureLoss.Delta_p_nom = RealFixedLocal3[57];
  valveControl_preheater_HP.pressureLoss.Kvs = RealFixedLocal3[58];
  valveControl_preheater_HP.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal3[59];
  valveControl_preheater_HP.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal3[60];
  preheater_LP1.m_flow_nom_shell = RealFixedLocal3[61];
  preheater_LP1.p_nom_shell = RealFixedLocal3[62];
  preheater_LP1.h_nom_shell = RealFixedLocal3[63];
  preheater_LP1.h_liq_start = RealFixedLocal3[64];
  preheater_LP1.h_vap_start = RealFixedLocal3[65];
  preheater_LP1.p_start_shell = RealFixedLocal3[66];
  preheater_LP1.m_flow_nom_tubes = RealFixedLocal3[67];
  preheater_LP1.p_nom_tubes = RealFixedLocal3[68];
  preheater_LP1.h_nom_tubes = RealFixedLocal3[69];
  preheater_LP1.h_start_tubes = RealFixedLocal3[70];
  preheater_LP1.p_start_tubes = RealFixedLocal3[71];
  preheater_LP1.tubes.m_flow_nom = RealFixedLocal3[72];
  preheater_LP1.tubes.p_nom = RealFixedLocal3[73];
  preheater_LP1.tubes.h_nom = RealFixedLocal3[74];
  preheater_LP1.tubes.h_start = RealFixedLocal3[75];
  preheater_LP1.tubes.p_start = RealFixedLocal3[76];
  preheater_LP1.tubes.fluidIn.M = RealFixedLocal3[77];
  preheater_LP1.tubes.fluidIn.crit.d = RealFixedLocal3[78];
  preheater_LP1.tubes.fluidIn.crit.h = RealFixedLocal3[79];
  preheater_LP1.tubes.fluidIn.crit.p = RealFixedLocal3[80];
  preheater_LP1.tubes.fluidIn.crit.s = RealFixedLocal3[81];
  preheater_LP1.tubes.fluidIn.crit.T = RealFixedLocal3[82];
  preheater_LP1.tubes.fluidOut.M = RealFixedLocal3[83];
  preheater_LP1.tubes.fluidOut.crit.d = RealFixedLocal3[84];
  preheater_LP1.tubes.fluidOut.crit.h = RealFixedLocal3[85];
  preheater_LP1.tubes.fluidOut.crit.p = RealFixedLocal3[86];
  preheater_LP1.tubes.fluidOut.crit.s = RealFixedLocal3[87];
  preheater_LP1.tubes.fluidOut.crit.T = RealFixedLocal3[88];
  preheater_LP1.shell.m_flow_nom = RealFixedLocal3[89];
  preheater_LP1.shell.p_nom = RealFixedLocal3[90];
  preheater_LP1.shell.rho_liq_nom = RealFixedLocal3[91];
  preheater_LP1.shell.rho_vap_nom = RealFixedLocal3[92];
  preheater_LP1.shell.h_liq_start = RealFixedLocal3[93];
  preheater_LP1.shell.h_vap_start = RealFixedLocal3[94];
  preheater_LP1.shell.p_start = RealFixedLocal3[95];
  preheater_LP1.shell.'fluidIn[1]'.M = RealFixedLocal3[96];
  preheater_LP1.shell.'fluidIn[1]'.crit.d = RealFixedLocal3[97];
  preheater_LP1.shell.'fluidIn[1]'.crit.h = RealFixedLocal3[98];
  preheater_LP1.shell.'fluidIn[1]'.crit.p = RealFixedLocal3[99];
  preheater_LP1.shell.'fluidIn[1]'.crit.s = RealFixedLocal3[100];
  preheater_LP1.shell.'fluidIn[1]'.crit.T = RealFixedLocal4[1];
  preheater_LP1.shell.'fluidIn[2]'.M = RealFixedLocal4[2];
  preheater_LP1.shell.'fluidIn[2]'.crit.d = RealFixedLocal4[3];
  preheater_LP1.shell.'fluidIn[2]'.crit.h = RealFixedLocal4[4];
  preheater_LP1.shell.'fluidIn[2]'.crit.p = RealFixedLocal4[5];
  preheater_LP1.shell.'fluidIn[2]'.crit.s = RealFixedLocal4[6];
  preheater_LP1.shell.'fluidIn[2]'.crit.T = RealFixedLocal4[7];
  preheater_LP1.shell.'fluidIn[3]'.M = RealFixedLocal4[8];
  preheater_LP1.shell.'fluidIn[3]'.crit.d = RealFixedLocal4[9];
  preheater_LP1.shell.'fluidIn[3]'.crit.h = RealFixedLocal4[10];
  preheater_LP1.shell.'fluidIn[3]'.crit.p = RealFixedLocal4[11];
  preheater_LP1.shell.'fluidIn[3]'.crit.s = RealFixedLocal4[12];
  preheater_LP1.shell.'fluidIn[3]'.crit.T = RealFixedLocal4[13];
  preheater_LP1.shell.'fluidOut[1]'.M = RealFixedLocal4[14];
  preheater_LP1.shell.'fluidOut[1]'.crit.d = RealFixedLocal4[15];
  preheater_LP1.shell.'fluidOut[1]'.crit.h = RealFixedLocal4[16];
  preheater_LP1.shell.'fluidOut[1]'.crit.p = RealFixedLocal4[17];
  preheater_LP1.shell.'fluidOut[1]'.crit.s = RealFixedLocal4[18];
  preheater_LP1.shell.'fluidOut[1]'.crit.T = RealFixedLocal4[19];
  preheater_LP1.shell.pressureLoss.'Delta_p[2]' = RealFixedLocal4[20];
  preheater_LP1.shell.pressureLoss.'Delta_p[3]' = RealFixedLocal4[21];
  INIT.P_target_ = RealFixedLocal4[22];
  INIT.condenser.h_out = RealFixedLocal4[23];
  INIT.condenser.summary.inlet.m_flow = RealFixedLocal4[24];
  INIT.condenser.summary.inlet.h = RealFixedLocal4[25];
  INIT.condenser.summary.outlet.m_flow = RealFixedLocal4[26];
  INIT.condenser.summary.outlet.h = RealFixedLocal4[27];
  INIT.condenser.inlet.h = RealFixedLocal4[28];
  INIT.condenser.inlet.m_flow = RealFixedLocal4[29];
  INIT.Pump_cond.rho_in = RealFixedLocal4[30];
  INIT.Pump_cond.P_pump = RealFixedLocal4[31];
  INIT.Pump_cond.h_out = RealFixedLocal4[32];
  INIT.Pump_cond.Delta_p = RealFixedLocal4[33];
  INIT.Pump_cond.summary.inlet.m_flow = RealFixedLocal4[34];
  INIT.Pump_cond.summary.inlet.p = RealFixedLocal4[35];
  INIT.Pump_cond.summary.inlet.h = RealFixedLocal4[36];
  INIT.Pump_cond.summary.outlet.m_flow = RealFixedLocal4[37];
  INIT.Pump_cond.summary.outlet.p = RealFixedLocal4[38];
  INIT.Pump_cond.summary.outlet.h = RealFixedLocal4[39];
  INIT.Pump_cond.summary.outline.Delta_p = RealFixedLocal4[40];
  INIT.Pump_cond.summary.outline.P_pump = RealFixedLocal4[41];
  INIT.Pump_cond.inlet.h = RealFixedLocal4[42];
  INIT.Pump_cond.inlet.m_flow = RealFixedLocal4[43];
  INIT.preheater_LP1.p_tap_out = RealFixedLocal4[44];
  INIT.preheater_LP1.h_tap_out = RealFixedLocal4[45];
  INIT.preheater_LP1.h_cond_out = RealFixedLocal4[46];
  INIT.preheater_LP1.summary.inlet_cond.m_flow = RealFixedLocal4[47];
  INIT.preheater_LP1.summary.inlet_cond.p = RealFixedLocal4[48];
  INIT.preheater_LP1.summary.inlet_cond.h = RealFixedLocal4[49];
  INIT.preheater_LP1.summary.outlet_cond.m_flow = RealFixedLocal4[50];
  INIT.preheater_LP1.summary.outlet_cond.p = RealFixedLocal4[51];
  INIT.preheater_LP1.summary.outlet_cond.h = RealFixedLocal4[52];
  INIT.preheater_LP1.summary.inlet_tap.m_flow = RealFixedLocal4[53];
  INIT.preheater_LP1.summary.inlet_tap.p = RealFixedLocal4[54];
  INIT.preheater_LP1.summary.inlet_tap.h = RealFixedLocal4[55];
  INIT.preheater_LP1.summary.outlet_tap.m_flow = RealFixedLocal4[56];
  INIT.preheater_LP1.summary.outlet_tap.p = RealFixedLocal4[57];
  INIT.preheater_LP1.summary.outlet_tap.h = RealFixedLocal4[58];
  INIT.preheater_LP1.cond_in.h = RealFixedLocal4[59];
  INIT.preheater_LP1.cond_out.p = RealFixedLocal4[60];
  INIT.preheater_LP1.tap_in.h = RealFixedLocal4[61];
  INIT.pump_preheater_LP1.rho_in = RealFixedLocal4[62];
  INIT.pump_preheater_LP1.P_pump = RealFixedLocal4[63];
  INIT.pump_preheater_LP1.h_out = RealFixedLocal4[64];
  INIT.pump_preheater_LP1.Delta_p = RealFixedLocal4[65];
  INIT.pump_preheater_LP1.summary.inlet.m_flow = RealFixedLocal4[66];
  INIT.pump_preheater_LP1.summary.inlet.p = RealFixedLocal4[67];
  INIT.pump_preheater_LP1.summary.inlet.h = RealFixedLocal4[68];
  INIT.pump_preheater_LP1.summary.outlet.m_flow = RealFixedLocal4[69];
  INIT.pump_preheater_LP1.summary.outlet.p = RealFixedLocal4[70];
  INIT.pump_preheater_LP1.summary.outlet.h = RealFixedLocal4[71];
  INIT.pump_preheater_LP1.summary.outline.Delta_p = RealFixedLocal4[72];
  INIT.pump_preheater_LP1.summary.outline.P_pump = RealFixedLocal4[73];
  INIT.valvePreFeedWaterTank.h_out = RealFixedLocal4[74];
  INIT.valvePreFeedWaterTank.summary.inlet.m_flow = RealFixedLocal4[75];
  INIT.valvePreFeedWaterTank.summary.inlet.p = RealFixedLocal4[76];
  INIT.valvePreFeedWaterTank.summary.inlet.h = RealFixedLocal4[77];
  INIT.valvePreFeedWaterTank.summary.inlet.rho = RealFixedLocal4[78];
  INIT.valvePreFeedWaterTank.summary.outlet.m_flow = RealFixedLocal4[79];
  INIT.valvePreFeedWaterTank.summary.outlet.p = RealFixedLocal4[80];
  INIT.valvePreFeedWaterTank.summary.outlet.h = RealFixedLocal4[81];
  INIT.valvePreFeedWaterTank.summary.outlet.rho = RealFixedLocal4[82];
  INIT.feedwatertank.m_flow_nom = RealFixedLocal4[83];
  INIT.feedwatertank.p_FWT = RealFixedLocal4[84];
  INIT.feedwatertank.p_FWT_out = RealFixedLocal4[85];
  INIT.feedwatertank.m_flow_tap2 = RealFixedLocal4[86];
  INIT.feedwatertank.m_flow_FW = RealFixedLocal4[87];
  INIT.feedwatertank.h_cond_out = RealFixedLocal4[88];
  INIT.feedwatertank.summary.inlet_cond.m_flow = RealFixedLocal4[89];
  INIT.feedwatertank.summary.inlet_cond.p = RealFixedLocal4[90];
  INIT.feedwatertank.summary.inlet_cond.h = RealFixedLocal4[91];
  INIT.feedwatertank.summary.outlet_cond.m_flow = RealFixedLocal4[92];
  INIT.feedwatertank.summary.outlet_cond.p = RealFixedLocal4[93];
  INIT.feedwatertank.summary.outlet_cond.h = RealFixedLocal4[94];
  INIT.feedwatertank.summary.inlet_tap1.m_flow = RealFixedLocal4[95];
  INIT.feedwatertank.summary.inlet_tap1.p = RealFixedLocal4[96];
  INIT.feedwatertank.summary.inlet_tap1.h = RealFixedLocal4[97];
  INIT.feedwatertank.summary.inlet_tap2.m_flow = RealFixedLocal4[98];
  INIT.feedwatertank.summary.inlet_tap2.p = RealFixedLocal4[99];
  INIT.feedwatertank.summary.inlet_tap2.h = RealFixedLocal4[100];
  INIT.feedwatertank.cond_in.h = RealFixedLocal5[1];
  INIT.feedwatertank.cond_in.m_flow = RealFixedLocal5[2];
  INIT.feedwatertank.tap_in2.h = RealFixedLocal5[3];
  INIT.feedwatertank.tap_in1.h = RealFixedLocal5[4];
  INIT.join_LP_main.summary.inlet1.m_flow = RealFixedLocal5[5];
  INIT.join_LP_main.summary.inlet1.p = RealFixedLocal5[6];
  INIT.join_LP_main.summary.inlet1.h = RealFixedLocal5[7];
  INIT.join_LP_main.summary.inlet2.m_flow = RealFixedLocal5[8];
  INIT.join_LP_main.summary.inlet2.p = RealFixedLocal5[9];
  INIT.join_LP_main.summary.inlet2.h = RealFixedLocal5[10];
  INIT.join_LP_main.summary.outlet.m_flow = RealFixedLocal5[11];
  INIT.join_LP_main.summary.outlet.p = RealFixedLocal5[12];
  INIT.join_LP_main.summary.outlet.h = RealFixedLocal5[13];
  INIT.Pump_FW.rho_in = RealFixedLocal5[14];
  INIT.Pump_FW.P_pump = RealFixedLocal5[15];
  INIT.Pump_FW.h_out = RealFixedLocal5[16];
  INIT.Pump_FW.Delta_p = RealFixedLocal5[17];
  INIT.Pump_FW.summary.inlet.m_flow = RealFixedLocal5[18];
  INIT.Pump_FW.summary.inlet.p = RealFixedLocal5[19];
  INIT.Pump_FW.summary.inlet.h = RealFixedLocal5[20];
  INIT.Pump_FW.summary.outlet.m_flow = RealFixedLocal5[21];
  INIT.Pump_FW.summary.outlet.p = RealFixedLocal5[22];
  INIT.Pump_FW.summary.outlet.h = RealFixedLocal5[23];
  INIT.Pump_FW.summary.outline.Delta_p = RealFixedLocal5[24];
  INIT.Pump_FW.summary.outline.P_pump = RealFixedLocal5[25];
  INIT.Pump_FW.inlet.p = RealFixedLocal5[26];
  INIT.preheater_HP.p_tap_out = RealFixedLocal5[27];
  INIT.preheater_HP.h_tap_out = RealFixedLocal5[28];
  INIT.preheater_HP.h_cond_out = RealFixedLocal5[29];
  INIT.preheater_HP.summary.inlet_cond.m_flow = RealFixedLocal5[30];
  INIT.preheater_HP.summary.inlet_cond.p = RealFixedLocal5[31];
  INIT.preheater_HP.summary.inlet_cond.h = RealFixedLocal5[32];
  INIT.preheater_HP.summary.outlet_cond.m_flow = RealFixedLocal5[33];
  INIT.preheater_HP.summary.outlet_cond.p = RealFixedLocal5[34];
  INIT.preheater_HP.summary.outlet_cond.h = RealFixedLocal5[35];
  INIT.preheater_HP.summary.inlet_tap.m_flow = RealFixedLocal5[36];
  INIT.preheater_HP.summary.inlet_tap.p = RealFixedLocal5[37];
  INIT.preheater_HP.summary.inlet_tap.h = RealFixedLocal5[38];
  INIT.preheater_HP.summary.outlet_tap.m_flow = RealFixedLocal5[39];
  INIT.preheater_HP.summary.outlet_tap.p = RealFixedLocal5[40];
  INIT.preheater_HP.summary.outlet_tap.h = RealFixedLocal5[41];
  INIT.preheater_HP.cond_out.p = RealFixedLocal5[42];
  INIT.preheater_HP.tap_in.h = RealFixedLocal5[43];
  INIT.boiler.Q_flow = RealFixedLocal5[44];
  INIT.boiler.Q_flow_LS_ = RealFixedLocal5[45];
  INIT.boiler.Q_flow_RS_ = RealFixedLocal5[46];
  INIT.boiler.h_LS_out = RealFixedLocal5[47];
  INIT.boiler.h_RS_out = RealFixedLocal5[48];
  INIT.boiler.p_LS_out = RealFixedLocal5[49];
  INIT.boiler.p_RS_in = RealFixedLocal5[50];
  INIT.boiler.p_RS_out = RealFixedLocal5[51];
  INIT.boiler.coldReheat.h = RealFixedLocal5[52];
  INIT.boiler.liveSteam.m_flow = RealFixedLocal5[53];
  INIT.Turbine_HP.rho_in = RealFixedLocal5[54];
  INIT.Turbine_HP.P_turbine = RealFixedLocal5[55];
  INIT.Turbine_HP.h_out = RealFixedLocal5[56];
  INIT.Turbine_HP.Delta_p = RealFixedLocal5[57];
  INIT.Turbine_HP.summary.inlet.m_flow = RealFixedLocal5[58];
  INIT.Turbine_HP.summary.inlet.p = RealFixedLocal5[59];
  INIT.Turbine_HP.summary.inlet.h = RealFixedLocal5[60];
  INIT.Turbine_HP.summary.outlet.m_flow = RealFixedLocal5[61];
  INIT.Turbine_HP.summary.outlet.p = RealFixedLocal5[62];
  INIT.Turbine_HP.summary.outlet.h = RealFixedLocal5[63];
  INIT.Turbine_HP.summary.outline.Delta_p = RealFixedLocal5[64];
  INIT.Turbine_HP.summary.outline.P_turbine = RealFixedLocal5[65];
  INIT.join_HP.m_flow_2 = RealFixedLocal5[66];
  INIT.join_HP.summary.inlet.m_flow = RealFixedLocal5[67];
  INIT.join_HP.summary.inlet.p = RealFixedLocal5[68];
  INIT.join_HP.summary.inlet.h = RealFixedLocal5[69];
  INIT.join_HP.summary.outlet1.m_flow = RealFixedLocal5[70];
  INIT.join_HP.summary.outlet1.p = RealFixedLocal5[71];
  INIT.join_HP.summary.outlet1.h = RealFixedLocal5[72];
  INIT.join_HP.summary.outlet2.m_flow = RealFixedLocal5[73];
  INIT.join_HP.summary.outlet2.p = RealFixedLocal5[74];
  INIT.join_HP.summary.outlet2.h = RealFixedLocal5[75];
  INIT.join_HP.outlet_2.p = RealFixedLocal5[76];
  INIT.valve_HP.summary.inlet.m_flow = RealFixedLocal5[77];
  INIT.valve_HP.summary.inlet.p = RealFixedLocal5[78];
  INIT.valve_HP.summary.inlet.h = RealFixedLocal5[79];
  INIT.valve_HP.summary.inlet.rho = RealFixedLocal5[80];
  INIT.valve_HP.summary.outlet.m_flow = RealFixedLocal5[81];
  INIT.valve_HP.summary.outlet.p = RealFixedLocal5[82];
  INIT.valve_HP.summary.outlet.h = RealFixedLocal5[83];
  INIT.valve_HP.summary.outlet.rho = RealFixedLocal5[84];
  INIT.valve_cut.Delta_p = RealFixedLocal5[85];
  INIT.valve_cut.summary.inlet.m_flow = RealFixedLocal5[86];
  INIT.valve_cut.summary.inlet.p = RealFixedLocal5[87];
  INIT.valve_cut.summary.inlet.h = RealFixedLocal5[88];
  INIT.valve_cut.summary.inlet.rho = RealFixedLocal5[89];
  INIT.valve_cut.summary.outlet.m_flow = RealFixedLocal5[90];
  INIT.valve_cut.summary.outlet.p = RealFixedLocal5[91];
  INIT.valve_cut.summary.outlet.h = RealFixedLocal5[92];
  INIT.valve_cut.summary.outlet.rho = RealFixedLocal5[93];
  INIT.valve2_HP.Delta_p = RealFixedLocal5[94];
  INIT.valve2_HP.summary.inlet.m_flow = RealFixedLocal5[95];
  INIT.valve2_HP.summary.inlet.p = RealFixedLocal5[96];
  INIT.valve2_HP.summary.inlet.h = RealFixedLocal5[97];
  INIT.valve2_HP.summary.inlet.rho = RealFixedLocal5[98];
  INIT.valve2_HP.summary.outlet.m_flow = RealFixedLocal5[99];
  INIT.valve2_HP.summary.outlet.p = RealFixedLocal5[100];
  INIT.valve2_HP.summary.outlet.h = RealFixedLocal6[1];
  INIT.valve2_HP.summary.outlet.rho = RealFixedLocal6[2];
  INIT.Turbine_IP1.rho_in = RealFixedLocal6[3];
  INIT.Turbine_IP1.P_turbine = RealFixedLocal6[4];
  INIT.Turbine_IP1.h_out = RealFixedLocal6[5];
  INIT.Turbine_IP1.Delta_p = RealFixedLocal6[6];
  INIT.Turbine_IP1.summary.inlet.m_flow = RealFixedLocal6[7];
  INIT.Turbine_IP1.summary.inlet.p = RealFixedLocal6[8];
  INIT.Turbine_IP1.summary.inlet.h = RealFixedLocal6[9];
  INIT.Turbine_IP1.summary.outlet.m_flow = RealFixedLocal6[10];
  INIT.Turbine_IP1.summary.outlet.p = RealFixedLocal6[11];
  INIT.Turbine_IP1.summary.outlet.h = RealFixedLocal6[12];
  INIT.Turbine_IP1.summary.outline.Delta_p = RealFixedLocal6[13];
  INIT.Turbine_IP1.summary.outline.P_turbine = RealFixedLocal6[14];
  INIT.Turbine_LP1.rho_in = RealFixedLocal6[15];
  INIT.Turbine_LP1.P_turbine = RealFixedLocal6[16];
  INIT.Turbine_LP1.h_out = RealFixedLocal6[17];
  INIT.Turbine_LP1.Delta_p = RealFixedLocal6[18];
  INIT.Turbine_LP1.summary.inlet.m_flow = RealFixedLocal6[19];
  INIT.Turbine_LP1.summary.inlet.p = RealFixedLocal6[20];
  INIT.Turbine_LP1.summary.inlet.h = RealFixedLocal6[21];
  INIT.Turbine_LP1.summary.outlet.m_flow = RealFixedLocal6[22];
  INIT.Turbine_LP1.summary.outlet.p = RealFixedLocal6[23];
  INIT.Turbine_LP1.summary.outlet.h = RealFixedLocal6[24];
  INIT.Turbine_LP1.summary.outline.Delta_p = RealFixedLocal6[25];
  INIT.Turbine_LP1.summary.outline.P_turbine = RealFixedLocal6[26];
  INIT.Turbine_LP1.inlet.m_flow = RealFixedLocal6[27];
  INIT.split_LP1.m_flow_2 = RealFixedLocal6[28];
  INIT.split_LP1.summary.inlet.m_flow = RealFixedLocal6[29];
  INIT.split_LP1.summary.inlet.p = RealFixedLocal6[30];
  INIT.split_LP1.summary.inlet.h = RealFixedLocal6[31];
  INIT.split_LP1.summary.outlet1.m_flow = RealFixedLocal6[32];
  INIT.split_LP1.summary.outlet1.p = RealFixedLocal6[33];
  INIT.split_LP1.summary.outlet1.h = RealFixedLocal6[34];
  INIT.split_LP1.summary.outlet2.m_flow = RealFixedLocal6[35];
  INIT.split_LP1.summary.outlet2.p = RealFixedLocal6[36];
  INIT.split_LP1.summary.outlet2.h = RealFixedLocal6[37];
  INIT.split_LP1.outlet_2.p = RealFixedLocal6[38];
  INIT.valve_IP1.Delta_p = RealFixedLocal6[39];
  INIT.valve_IP1.summary.inlet.m_flow = RealFixedLocal6[40];
  INIT.valve_IP1.summary.inlet.p = RealFixedLocal6[41];
  INIT.valve_IP1.summary.inlet.h = RealFixedLocal6[42];
  INIT.valve_IP1.summary.inlet.rho = RealFixedLocal6[43];
  INIT.valve_IP1.summary.outlet.m_flow = RealFixedLocal6[44];
  INIT.valve_IP1.summary.outlet.p = RealFixedLocal6[45];
  INIT.valve_IP1.summary.outlet.h = RealFixedLocal6[46];
  INIT.valve_IP1.summary.outlet.rho = RealFixedLocal6[47];
  INIT.valve_LP1.h_out = RealFixedLocal6[48];
  INIT.valve_LP1.summary.inlet.m_flow = RealFixedLocal6[49];
  INIT.valve_LP1.summary.inlet.p = RealFixedLocal6[50];
  INIT.valve_LP1.summary.inlet.h = RealFixedLocal6[51];
  INIT.valve_LP1.summary.inlet.rho = RealFixedLocal6[52];
  INIT.valve_LP1.summary.outlet.m_flow = RealFixedLocal6[53];
  INIT.valve_LP1.summary.outlet.p = RealFixedLocal6[54];
  INIT.valve_LP1.summary.outlet.h = RealFixedLocal6[55];
  INIT.valve_LP1.summary.outlet.rho = RealFixedLocal6[56];
  INIT.Turbine_LP4.rho_in = RealFixedLocal6[57];
  INIT.Turbine_LP4.P_turbine = RealFixedLocal6[58];
  INIT.Turbine_LP4.Delta_p = RealFixedLocal6[59];
  INIT.Turbine_LP4.summary.inlet.m_flow = RealFixedLocal6[60];
  INIT.Turbine_LP4.summary.inlet.p = RealFixedLocal6[61];
  INIT.Turbine_LP4.summary.inlet.h = RealFixedLocal6[62];
  INIT.Turbine_LP4.summary.outlet.m_flow = RealFixedLocal6[63];
  INIT.Turbine_LP4.summary.outlet.p = RealFixedLocal6[64];
  INIT.Turbine_LP4.summary.outlet.h = RealFixedLocal6[65];
  INIT.Turbine_LP4.summary.outline.Delta_p = RealFixedLocal6[66];
  INIT.Turbine_LP4.summary.outline.P_turbine = RealFixedLocal6[67];
  INIT.Turbine_LP4.inlet.m_flow = RealFixedLocal6[68];
  INIT.Turbine_IP2.rho_in = RealFixedLocal6[69];
  INIT.Turbine_IP2.P_turbine = RealFixedLocal6[70];
  INIT.Turbine_IP2.h_out = RealFixedLocal6[71];
  INIT.Turbine_IP2.Delta_p = RealFixedLocal6[72];
  INIT.Turbine_IP2.summary.inlet.m_flow = RealFixedLocal6[73];
  INIT.Turbine_IP2.summary.inlet.p = RealFixedLocal6[74];
  INIT.Turbine_IP2.summary.inlet.h = RealFixedLocal6[75];
  INIT.Turbine_IP2.summary.outlet.m_flow = RealFixedLocal6[76];
  INIT.Turbine_IP2.summary.outlet.p = RealFixedLocal6[77];
  INIT.Turbine_IP2.summary.outlet.h = RealFixedLocal6[78];
  INIT.Turbine_IP2.summary.outline.Delta_p = RealFixedLocal6[79];
  INIT.Turbine_IP2.summary.outline.P_turbine = RealFixedLocal6[80];
  INIT.Turbine_IP2.inlet.h = RealFixedLocal6[81];
  INIT.Turbine_IP3.rho_in = RealFixedLocal6[82];
  INIT.Turbine_IP3.P_turbine = RealFixedLocal6[83];
  INIT.Turbine_IP3.h_out = RealFixedLocal6[84];
  INIT.Turbine_IP3.Delta_p = RealFixedLocal6[85];
  INIT.Turbine_IP3.summary.inlet.m_flow = RealFixedLocal6[86];
  INIT.Turbine_IP3.summary.inlet.p = RealFixedLocal6[87];
  INIT.Turbine_IP3.summary.inlet.h = RealFixedLocal6[88];
  INIT.Turbine_IP3.summary.outlet.m_flow = RealFixedLocal6[89];
  INIT.Turbine_IP3.summary.outlet.p = RealFixedLocal6[90];
  INIT.Turbine_IP3.summary.outlet.h = RealFixedLocal6[91];
  INIT.Turbine_IP3.summary.outline.Delta_p = RealFixedLocal6[92];
  INIT.Turbine_IP3.summary.outline.P_turbine = RealFixedLocal6[93];
  INIT.Turbine_IP3.inlet.m_flow = RealFixedLocal6[94];
  INIT.splitIP2.summary.inlet.m_flow = RealFixedLocal6[95];
  INIT.splitIP2.summary.inlet.p = RealFixedLocal6[96];
  INIT.splitIP2.summary.inlet.h = RealFixedLocal6[97];
  INIT.splitIP2.summary.outlet1.m_flow = RealFixedLocal6[98];
  INIT.splitIP2.summary.outlet1.p = RealFixedLocal6[99];
  INIT.splitIP2.summary.outlet1.h = RealFixedLocal6[100];
  INIT.splitIP2.summary.outlet2.m_flow = RealFixedLocal7[1];
  INIT.splitIP2.summary.outlet2.p = RealFixedLocal7[2];
  INIT.splitIP2.summary.outlet2.h = RealFixedLocal7[3];
  INIT.splitIP3.summary.inlet.m_flow = RealFixedLocal7[4];
  INIT.splitIP3.summary.inlet.p = RealFixedLocal7[5];
  INIT.splitIP3.summary.inlet.h = RealFixedLocal7[6];
  INIT.splitIP3.summary.outlet1.m_flow = RealFixedLocal7[7];
  INIT.splitIP3.summary.outlet1.p = RealFixedLocal7[8];
  INIT.splitIP3.summary.outlet1.h = RealFixedLocal7[9];
  INIT.splitIP3.summary.outlet2.m_flow = RealFixedLocal7[10];
  INIT.splitIP3.summary.outlet2.p = RealFixedLocal7[11];
  INIT.splitIP3.summary.outlet2.h = RealFixedLocal7[12];
  INIT.pressureAnchor_constFlow1_1.summary.inlet.m_flow = RealFixedLocal7[13];
  INIT.pressureAnchor_constFlow1_1.summary.inlet.p = RealFixedLocal7[14];
  INIT.pressureAnchor_constFlow1_1.summary.inlet.h = RealFixedLocal7[15];
  INIT.pressureAnchor_constFlow1_1.summary.inlet.rho = RealFixedLocal7[16];
  INIT.pressureAnchor_constFlow1_1.summary.outlet.m_flow = RealFixedLocal7[17];
  INIT.pressureAnchor_constFlow1_1.summary.outlet.p = RealFixedLocal7[18];
  INIT.pressureAnchor_constFlow1_1.summary.outlet.h = RealFixedLocal7[19];
  INIT.pressureAnchor_constFlow1_1.summary.outlet.rho = RealFixedLocal7[20];
  INIT.Turbine_LP3.rho_in = RealFixedLocal7[21];
  INIT.Turbine_LP3.P_turbine = RealFixedLocal7[22];
  INIT.Turbine_LP3.h_out = RealFixedLocal7[23];
  INIT.Turbine_LP3.Delta_p = RealFixedLocal7[24];
  INIT.Turbine_LP3.summary.inlet.m_flow = RealFixedLocal7[25];
  INIT.Turbine_LP3.summary.inlet.p = RealFixedLocal7[26];
  INIT.Turbine_LP3.summary.inlet.h = RealFixedLocal7[27];
  INIT.Turbine_LP3.summary.outlet.m_flow = RealFixedLocal7[28];
  INIT.Turbine_LP3.summary.outlet.p = RealFixedLocal7[29];
  INIT.Turbine_LP3.summary.outlet.h = RealFixedLocal7[30];
  INIT.Turbine_LP3.summary.outline.Delta_p = RealFixedLocal7[31];
  INIT.Turbine_LP3.summary.outline.P_turbine = RealFixedLocal7[32];
  INIT.Turbine_LP3.inlet.m_flow = RealFixedLocal7[33];
  INIT.Turbine_LP2.rho_in = RealFixedLocal7[34];
  INIT.Turbine_LP2.P_turbine = RealFixedLocal7[35];
  INIT.Turbine_LP2.h_out = RealFixedLocal7[36];
  INIT.Turbine_LP2.Delta_p = RealFixedLocal7[37];
  INIT.Turbine_LP2.summary.inlet.m_flow = RealFixedLocal7[38];
  INIT.Turbine_LP2.summary.inlet.p = RealFixedLocal7[39];
  INIT.Turbine_LP2.summary.inlet.h = RealFixedLocal7[40];
  INIT.Turbine_LP2.summary.outlet.m_flow = RealFixedLocal7[41];
  INIT.Turbine_LP2.summary.outlet.p = RealFixedLocal7[42];
  INIT.Turbine_LP2.summary.outlet.h = RealFixedLocal7[43];
  INIT.Turbine_LP2.summary.outline.Delta_p = RealFixedLocal7[44];
  INIT.Turbine_LP2.summary.outline.P_turbine = RealFixedLocal7[45];
  INIT.valve2.h_out = RealFixedLocal7[46];
  INIT.valve2.Delta_p = RealFixedLocal7[47];
  INIT.valve2.summary.inlet.m_flow = RealFixedLocal7[48];
  INIT.valve2.summary.inlet.p = RealFixedLocal7[49];
  INIT.valve2.summary.inlet.h = RealFixedLocal7[50];
  INIT.valve2.summary.inlet.rho = RealFixedLocal7[51];
  INIT.valve2.summary.outlet.m_flow = RealFixedLocal7[52];
  INIT.valve2.summary.outlet.p = RealFixedLocal7[53];
  INIT.valve2.summary.outlet.h = RealFixedLocal7[54];
  INIT.valve2.summary.outlet.rho = RealFixedLocal7[55];
  INIT.valve2.inlet.p = RealFixedLocal7[56];
  INIT.valve2.inlet.h = RealFixedLocal7[57];
  INIT.mixerIP2.m_flow_2 = RealFixedLocal7[58];
  INIT.mixerIP2.h3 = RealFixedLocal7[59];
  INIT.mixerIP2.summary.inlet1.m_flow = RealFixedLocal7[60];
  INIT.mixerIP2.summary.inlet1.p = RealFixedLocal7[61];
  INIT.mixerIP2.summary.inlet1.h = RealFixedLocal7[62];
  INIT.mixerIP2.summary.inlet2.m_flow = RealFixedLocal7[63];
  INIT.mixerIP2.summary.inlet2.p = RealFixedLocal7[64];
  INIT.mixerIP2.summary.inlet2.h = RealFixedLocal7[65];
  INIT.mixerIP2.summary.outlet.m_flow = RealFixedLocal7[66];
  INIT.mixerIP2.summary.outlet.p = RealFixedLocal7[67];
  INIT.mixerIP2.summary.outlet.h = RealFixedLocal7[68];
  INIT.mixerIP2.inlet_2.h = RealFixedLocal7[69];
  INIT.preheater_LP2.summary.inlet_cond.m_flow = RealFixedLocal7[70];
  INIT.preheater_LP2.summary.inlet_cond.p = RealFixedLocal7[71];
  INIT.preheater_LP2.summary.inlet_cond.h = RealFixedLocal7[72];
  INIT.preheater_LP2.summary.outlet_cond.m_flow = RealFixedLocal7[73];
  INIT.preheater_LP2.summary.outlet_cond.p = RealFixedLocal7[74];
  INIT.preheater_LP2.summary.outlet_cond.h = RealFixedLocal7[75];
  INIT.preheater_LP2.summary.inlet_tap.m_flow = RealFixedLocal7[76];
  INIT.preheater_LP2.summary.inlet_tap.p = RealFixedLocal7[77];
  INIT.preheater_LP2.summary.inlet_tap.h = RealFixedLocal7[78];
  INIT.preheater_LP2.summary.outlet_tap.m_flow = RealFixedLocal7[79];
  INIT.preheater_LP2.summary.outlet_tap.p = RealFixedLocal7[80];
  INIT.preheater_LP2.summary.outlet_tap.h = RealFixedLocal7[81];
  INIT.preheater_LP2.cond_in.h = RealFixedLocal7[82];
  INIT.preheater_LP2.cond_in.m_flow = RealFixedLocal7[83];
  INIT.preheater_LP3.p_tap_out = RealFixedLocal7[84];
  INIT.preheater_LP3.h_tap_out = RealFixedLocal7[85];
  INIT.preheater_LP3.h_cond_out = RealFixedLocal7[86];
  INIT.preheater_LP3.summary.inlet_cond.m_flow = RealFixedLocal7[87];
  INIT.preheater_LP3.summary.inlet_cond.p = RealFixedLocal7[88];
  INIT.preheater_LP3.summary.inlet_cond.h = RealFixedLocal7[89];
  INIT.preheater_LP3.summary.outlet_cond.m_flow = RealFixedLocal7[90];
  INIT.preheater_LP3.summary.outlet_cond.p = RealFixedLocal7[91];
  INIT.preheater_LP3.summary.outlet_cond.h = RealFixedLocal7[92];
  INIT.preheater_LP3.summary.inlet_tap.m_flow = RealFixedLocal7[93];
  INIT.preheater_LP3.summary.inlet_tap.p = RealFixedLocal7[94];
  INIT.preheater_LP3.summary.inlet_tap.h = RealFixedLocal7[95];
  INIT.preheater_LP3.summary.outlet_tap.m_flow = RealFixedLocal7[96];
  INIT.preheater_LP3.summary.outlet_tap.p = RealFixedLocal7[97];
  INIT.preheater_LP3.summary.outlet_tap.h = RealFixedLocal7[98];
  INIT.preheater_LP3.cond_in.h = RealFixedLocal7[99];
  INIT.preheater_LP4.p_tap_out = RealFixedLocal7[100];
  INIT.preheater_LP4.h_tap_out = RealFixedLocal8[1];
  INIT.preheater_LP4.summary.inlet_cond.m_flow = RealFixedLocal8[2];
  INIT.preheater_LP4.summary.inlet_cond.p = RealFixedLocal8[3];
  INIT.preheater_LP4.summary.inlet_cond.h = RealFixedLocal8[4];
  INIT.preheater_LP4.summary.outlet_cond.m_flow = RealFixedLocal8[5];
  INIT.preheater_LP4.summary.outlet_cond.p = RealFixedLocal8[6];
  INIT.preheater_LP4.summary.outlet_cond.h = RealFixedLocal8[7];
  INIT.preheater_LP4.summary.inlet_tap.m_flow = RealFixedLocal8[8];
  INIT.preheater_LP4.summary.inlet_tap.p = RealFixedLocal8[9];
  INIT.preheater_LP4.summary.inlet_tap.h = RealFixedLocal8[10];
  INIT.preheater_LP4.summary.outlet_tap.m_flow = RealFixedLocal8[11];
  INIT.preheater_LP4.summary.outlet_tap.p = RealFixedLocal8[12];
  INIT.preheater_LP4.summary.outlet_tap.h = RealFixedLocal8[13];
  INIT.preheater_LP4.tap_in.h = RealFixedLocal8[14];
  INIT.valve_IP2.Delta_p = RealFixedLocal8[15];
  INIT.valve_IP2.summary.inlet.m_flow = RealFixedLocal8[16];
  INIT.valve_IP2.summary.inlet.p = RealFixedLocal8[17];
  INIT.valve_IP2.summary.inlet.h = RealFixedLocal8[18];
  INIT.valve_IP2.summary.inlet.rho = RealFixedLocal8[19];
  INIT.valve_IP2.summary.outlet.m_flow = RealFixedLocal8[20];
  INIT.valve_IP2.summary.outlet.p = RealFixedLocal8[21];
  INIT.valve_IP2.summary.outlet.h = RealFixedLocal8[22];
  INIT.valve_IP2.summary.outlet.rho = RealFixedLocal8[23];
  INIT.split_LP2.summary.inlet.m_flow = RealFixedLocal8[24];
  INIT.split_LP2.summary.inlet.p = RealFixedLocal8[25];
  INIT.split_LP2.summary.inlet.h = RealFixedLocal8[26];
  INIT.split_LP2.summary.outlet1.m_flow = RealFixedLocal8[27];
  INIT.split_LP2.summary.outlet1.p = RealFixedLocal8[28];
  INIT.split_LP2.summary.outlet1.h = RealFixedLocal8[29];
  INIT.split_LP2.summary.outlet2.m_flow = RealFixedLocal8[30];
  INIT.split_LP2.summary.outlet2.p = RealFixedLocal8[31];
  INIT.split_LP2.summary.outlet2.h = RealFixedLocal8[32];
  INIT.split_LP2.outlet_2.p = RealFixedLocal8[33];
  INIT.split_LP3.summary.inlet.m_flow = RealFixedLocal8[34];
  INIT.split_LP3.summary.inlet.p = RealFixedLocal8[35];
  INIT.split_LP3.summary.inlet.h = RealFixedLocal8[36];
  INIT.split_LP3.summary.outlet1.m_flow = RealFixedLocal8[37];
  INIT.split_LP3.summary.outlet1.p = RealFixedLocal8[38];
  INIT.split_LP3.summary.outlet1.h = RealFixedLocal8[39];
  INIT.split_LP3.summary.outlet2.m_flow = RealFixedLocal8[40];
  INIT.split_LP3.summary.outlet2.p = RealFixedLocal8[41];
  INIT.split_LP3.summary.outlet2.h = RealFixedLocal8[42];
  INIT.split_LP3.outlet_2.p = RealFixedLocal8[43];
  INIT.valve_LP2.summary.inlet.m_flow = RealFixedLocal8[44];
  INIT.valve_LP2.summary.inlet.p = RealFixedLocal8[45];
  INIT.valve_LP2.summary.inlet.h = RealFixedLocal8[46];
  INIT.valve_LP2.summary.inlet.rho = RealFixedLocal8[47];
  INIT.valve_LP2.summary.outlet.m_flow = RealFixedLocal8[48];
  INIT.valve_LP2.summary.outlet.p = RealFixedLocal8[49];
  INIT.valve_LP2.summary.outlet.h = RealFixedLocal8[50];
  INIT.valve_LP2.summary.outlet.rho = RealFixedLocal8[51];
  INIT.valve_LP3.summary.inlet.m_flow = RealFixedLocal8[52];
  INIT.valve_LP3.summary.inlet.p = RealFixedLocal8[53];
  INIT.valve_LP3.summary.inlet.h = RealFixedLocal8[54];
  INIT.valve_LP3.summary.inlet.rho = RealFixedLocal8[55];
  INIT.valve_LP3.summary.outlet.m_flow = RealFixedLocal8[56];
  INIT.valve_LP3.summary.outlet.p = RealFixedLocal8[57];
  INIT.valve_LP3.summary.outlet.h = RealFixedLocal8[58];
  INIT.valve_LP3.summary.outlet.rho = RealFixedLocal8[59];
  INIT.pump_preheater_LP3.rho_in = RealFixedLocal8[60];
  INIT.pump_preheater_LP3.P_pump = RealFixedLocal8[61];
  INIT.pump_preheater_LP3.h_out = RealFixedLocal8[62];
  INIT.pump_preheater_LP3.Delta_p = RealFixedLocal8[63];
  INIT.pump_preheater_LP3.summary.inlet.m_flow = RealFixedLocal8[64];
  INIT.pump_preheater_LP3.summary.inlet.p = RealFixedLocal8[65];
  INIT.pump_preheater_LP3.summary.inlet.h = RealFixedLocal8[66];
  INIT.pump_preheater_LP3.summary.outlet.m_flow = RealFixedLocal8[67];
  INIT.pump_preheater_LP3.summary.outlet.p = RealFixedLocal8[68];
  INIT.pump_preheater_LP3.summary.outlet.h = RealFixedLocal8[69];
  INIT.pump_preheater_LP3.summary.outline.Delta_p = RealFixedLocal8[70];
  INIT.pump_preheater_LP3.summary.outline.P_pump = RealFixedLocal8[71];
  INIT.join_preheater_LP3.summary.inlet1.m_flow = RealFixedLocal8[72];
  INIT.join_preheater_LP3.summary.inlet1.p = RealFixedLocal8[73];
  INIT.join_preheater_LP3.summary.inlet1.h = RealFixedLocal8[74];
  INIT.join_preheater_LP3.summary.inlet2.m_flow = RealFixedLocal8[75];
  INIT.join_preheater_LP3.summary.inlet2.p = RealFixedLocal8[76];
  INIT.join_preheater_LP3.summary.inlet2.h = RealFixedLocal8[77];
  INIT.join_preheater_LP3.summary.outlet.m_flow = RealFixedLocal8[78];
  INIT.join_preheater_LP3.summary.outlet.p = RealFixedLocal8[79];
  INIT.join_preheater_LP3.summary.outlet.h = RealFixedLocal8[80];
  INIT.valve_cutPressureLP4.h_out = RealFixedLocal8[81];
  INIT.valve_cutPressureLP4.Delta_p = RealFixedLocal8[82];
  INIT.valve_cutPressureLP4.summary.inlet.m_flow = RealFixedLocal8[83];
  INIT.valve_cutPressureLP4.summary.inlet.p = RealFixedLocal8[84];
  INIT.valve_cutPressureLP4.summary.inlet.h = RealFixedLocal8[85];
  INIT.valve_cutPressureLP4.summary.inlet.rho = RealFixedLocal8[86];
  INIT.valve_cutPressureLP4.summary.outlet.m_flow = RealFixedLocal8[87];
  INIT.valve_cutPressureLP4.summary.outlet.p = RealFixedLocal8[88];
  INIT.valve_cutPressureLP4.summary.outlet.h = RealFixedLocal8[89];
  INIT.valve_cutPressureLP4.summary.outlet.rho = RealFixedLocal8[90];
  INIT.mixer_condenser.summary.inlet1.m_flow = RealFixedLocal8[91];
  INIT.mixer_condenser.summary.inlet1.p = RealFixedLocal8[92];
  INIT.mixer_condenser.summary.inlet1.h = RealFixedLocal8[93];
  INIT.mixer_condenser.summary.inlet2.m_flow = RealFixedLocal8[94];
  INIT.mixer_condenser.summary.inlet2.p = RealFixedLocal8[95];
  INIT.mixer_condenser.summary.inlet2.h = RealFixedLocal8[96];
  INIT.mixer_condenser.summary.outlet.m_flow = RealFixedLocal8[97];
  INIT.mixer_condenser.summary.outlet.p = RealFixedLocal8[98];
  INIT.mixer_condenser.summary.outlet.h = RealFixedLocal8[99];
  INIT.downComer_feedWaterTank.Delta_p_geo = RealFixedLocal8[100];
  INIT.downComer_feedWaterTank.'p[1]' = RealFixedLocal9[1];
  INIT.downComer_feedWaterTank.'p[2]' = RealFixedLocal9[2];
  INIT.downComer_feedWaterTank.'p[3]' = RealFixedLocal9[3];
  INIT.downComer_feedWaterTank.summary.inlet.m_flow = RealFixedLocal9[4];
  INIT.downComer_feedWaterTank.summary.inlet.p = RealFixedLocal9[5];
  INIT.downComer_feedWaterTank.summary.inlet.h = RealFixedLocal9[6];
  INIT.downComer_feedWaterTank.summary.outlet.m_flow = RealFixedLocal9[7];
  INIT.downComer_feedWaterTank.summary.outlet.p = RealFixedLocal9[8];
  INIT.downComer_feedWaterTank.summary.outlet.h = RealFixedLocal9[9];
  valvePreFeedWaterTank.pressureLoss.m_flow_nom = RealFixedLocal9[10];
  valvePreFeedWaterTank.pressureLoss.aperture_ = RealFixedLocal9[11];
  valvePreFeedWaterTank.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal9[12];
  valvePreFeedWaterTank.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal9[13];
  valvePreFeedWaterTank.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal9[14];
  join_LP_main.'m_flow_in_nom[1]' = RealFixedLocal9[15];
  join_LP_main.'m_flow_in_nom[2]' = RealFixedLocal9[16];
  join_LP_main.p_nom = RealFixedLocal9[17];
  join_LP_main.h_nom = RealFixedLocal9[18];
  join_LP_main.h_start = RealFixedLocal9[19];
  join_LP_main.p_start = RealFixedLocal9[20];
  PI_preheater1.y_max = RealFixedLocal9[21];
  PI_preheater1.y_min = RealFixedLocal9[22];
  PI_preheater1.y_start = RealFixedLocal9[23];
  PI_preheater1.I.y_start = RealFixedLocal9[24];
  PI_preheater1.limiter.uMax = RealFixedLocal9[25];
  PI_preheater1.limiter.uMin = RealFixedLocal9[26];
  Nominal_PowerFeedwaterPump1.k = RealFixedLocal9[27];
  NOM.condenser.h_out = RealFixedLocal9[28];
  NOM.condenser.summary.inlet.m_flow = RealFixedLocal9[29];
  NOM.condenser.summary.inlet.h = RealFixedLocal9[30];
  NOM.condenser.summary.outlet.m_flow = RealFixedLocal9[31];
  NOM.condenser.summary.outlet.h = RealFixedLocal9[32];
  NOM.condenser.inlet.h = RealFixedLocal9[33];
  NOM.condenser.inlet.m_flow = RealFixedLocal9[34];
  NOM.Pump_cond.rho_in = RealFixedLocal9[35];
  NOM.Pump_cond.P_pump = RealFixedLocal9[36];
  NOM.Pump_cond.h_out = RealFixedLocal9[37];
  NOM.Pump_cond.Delta_p = RealFixedLocal9[38];
  NOM.Pump_cond.summary.inlet.m_flow = RealFixedLocal9[39];
  NOM.Pump_cond.summary.inlet.p = RealFixedLocal9[40];
  NOM.Pump_cond.summary.inlet.h = RealFixedLocal9[41];
  NOM.Pump_cond.summary.outlet.m_flow = RealFixedLocal9[42];
  NOM.Pump_cond.summary.outlet.p = RealFixedLocal9[43];
  NOM.Pump_cond.summary.outlet.h = RealFixedLocal9[44];
  NOM.Pump_cond.summary.outline.Delta_p = RealFixedLocal9[45];
  NOM.Pump_cond.summary.outline.P_pump = RealFixedLocal9[46];
  NOM.Pump_cond.inlet.h = RealFixedLocal9[47];
  NOM.Pump_cond.inlet.m_flow = RealFixedLocal9[48];
  NOM.preheater_LP1.p_tap_out = RealFixedLocal9[49];
  NOM.preheater_LP1.h_tap_out = RealFixedLocal9[50];
  NOM.preheater_LP1.h_cond_out = RealFixedLocal9[51];
  NOM.preheater_LP1.summary.inlet_cond.m_flow = RealFixedLocal9[52];
  NOM.preheater_LP1.summary.inlet_cond.p = RealFixedLocal9[53];
  NOM.preheater_LP1.summary.inlet_cond.h = RealFixedLocal9[54];
  NOM.preheater_LP1.summary.outlet_cond.m_flow = RealFixedLocal9[55];
  NOM.preheater_LP1.summary.outlet_cond.p = RealFixedLocal9[56];
  NOM.preheater_LP1.summary.outlet_cond.h = RealFixedLocal9[57];
  NOM.preheater_LP1.summary.inlet_tap.m_flow = RealFixedLocal9[58];
  NOM.preheater_LP1.summary.inlet_tap.p = RealFixedLocal9[59];
  NOM.preheater_LP1.summary.inlet_tap.h = RealFixedLocal9[60];
  NOM.preheater_LP1.summary.outlet_tap.m_flow = RealFixedLocal9[61];
  NOM.preheater_LP1.summary.outlet_tap.p = RealFixedLocal9[62];
  NOM.preheater_LP1.summary.outlet_tap.h = RealFixedLocal9[63];
  NOM.preheater_LP1.cond_in.h = RealFixedLocal9[64];
  NOM.preheater_LP1.cond_out.p = RealFixedLocal9[65];
  NOM.preheater_LP1.tap_in.h = RealFixedLocal9[66];
  NOM.pump_preheater_LP1.rho_in = RealFixedLocal9[67];
  NOM.pump_preheater_LP1.P_pump = RealFixedLocal9[68];
  NOM.pump_preheater_LP1.h_out = RealFixedLocal9[69];
  NOM.pump_preheater_LP1.Delta_p = RealFixedLocal9[70];
  NOM.pump_preheater_LP1.summary.inlet.m_flow = RealFixedLocal9[71];
  NOM.pump_preheater_LP1.summary.inlet.p = RealFixedLocal9[72];
  NOM.pump_preheater_LP1.summary.inlet.h = RealFixedLocal9[73];
  NOM.pump_preheater_LP1.summary.outlet.m_flow = RealFixedLocal9[74];
  NOM.pump_preheater_LP1.summary.outlet.p = RealFixedLocal9[75];
  NOM.pump_preheater_LP1.summary.outlet.h = RealFixedLocal9[76];
  NOM.pump_preheater_LP1.summary.outline.Delta_p = RealFixedLocal9[77];
  NOM.pump_preheater_LP1.summary.outline.P_pump = RealFixedLocal9[78];
  NOM.valvePreFeedWaterTank.h_out = RealFixedLocal9[79];
  NOM.valvePreFeedWaterTank.summary.inlet.m_flow = RealFixedLocal9[80];
  NOM.valvePreFeedWaterTank.summary.inlet.p = RealFixedLocal9[81];
  NOM.valvePreFeedWaterTank.summary.inlet.h = RealFixedLocal9[82];
  NOM.valvePreFeedWaterTank.summary.inlet.rho = RealFixedLocal9[83];
  NOM.valvePreFeedWaterTank.summary.outlet.m_flow = RealFixedLocal9[84];
  NOM.valvePreFeedWaterTank.summary.outlet.p = RealFixedLocal9[85];
  NOM.valvePreFeedWaterTank.summary.outlet.h = RealFixedLocal9[86];
  NOM.valvePreFeedWaterTank.summary.outlet.rho = RealFixedLocal9[87];
  NOM.feedwatertank.m_flow_tap2 = RealFixedLocal9[88];
  NOM.feedwatertank.h_cond_out = RealFixedLocal9[89];
  NOM.feedwatertank.summary.inlet_cond.m_flow = RealFixedLocal9[90];
  NOM.feedwatertank.summary.inlet_cond.h = RealFixedLocal9[91];
  NOM.feedwatertank.summary.outlet_cond.h = RealFixedLocal9[92];
  NOM.feedwatertank.summary.inlet_tap1.m_flow = RealFixedLocal9[93];
  NOM.feedwatertank.summary.inlet_tap1.h = RealFixedLocal9[94];
  NOM.feedwatertank.summary.inlet_tap2.m_flow = RealFixedLocal9[95];
  NOM.feedwatertank.summary.inlet_tap2.h = RealFixedLocal9[96];
  NOM.feedwatertank.cond_in.h = RealFixedLocal9[97];
  NOM.feedwatertank.cond_in.m_flow = RealFixedLocal9[98];
  NOM.feedwatertank.tap_in2.h = RealFixedLocal9[99];
  NOM.feedwatertank.tap_in1.h = RealFixedLocal9[100];
  NOM.join_LP_main.summary.inlet1.m_flow = RealFixedLocal10[1];
  NOM.join_LP_main.summary.inlet1.p = RealFixedLocal10[2];
  NOM.join_LP_main.summary.inlet1.h = RealFixedLocal10[3];
  NOM.join_LP_main.summary.inlet2.m_flow = RealFixedLocal10[4];
  NOM.join_LP_main.summary.inlet2.p = RealFixedLocal10[5];
  NOM.join_LP_main.summary.inlet2.h = RealFixedLocal10[6];
  NOM.join_LP_main.summary.outlet.m_flow = RealFixedLocal10[7];
  NOM.join_LP_main.summary.outlet.p = RealFixedLocal10[8];
  NOM.join_LP_main.summary.outlet.h = RealFixedLocal10[9];
  NOM.Pump_FW.rho_in = RealFixedLocal10[10];
  NOM.Pump_FW.P_pump = RealFixedLocal10[11];
  NOM.Pump_FW.h_out = RealFixedLocal10[12];
  NOM.Pump_FW.Delta_p = RealFixedLocal10[13];
  NOM.Pump_FW.summary.inlet.m_flow = RealFixedLocal10[14];
  NOM.Pump_FW.summary.inlet.p = RealFixedLocal10[15];
  NOM.Pump_FW.summary.inlet.h = RealFixedLocal10[16];
  NOM.Pump_FW.summary.outlet.m_flow = RealFixedLocal10[17];
  NOM.Pump_FW.summary.outlet.p = RealFixedLocal10[18];
  NOM.Pump_FW.summary.outlet.h = RealFixedLocal10[19];
  NOM.Pump_FW.summary.outline.Delta_p = RealFixedLocal10[20];
  NOM.Pump_FW.summary.outline.P_pump = RealFixedLocal10[21];
  NOM.Pump_FW.inlet.p = RealFixedLocal10[22];
  NOM.preheater_HP.p_tap_out = RealFixedLocal10[23];
  NOM.preheater_HP.h_tap_out = RealFixedLocal10[24];
  NOM.preheater_HP.h_cond_out = RealFixedLocal10[25];
  NOM.preheater_HP.summary.inlet_cond.m_flow = RealFixedLocal10[26];
  NOM.preheater_HP.summary.inlet_cond.p = RealFixedLocal10[27];
  NOM.preheater_HP.summary.inlet_cond.h = RealFixedLocal10[28];
  NOM.preheater_HP.summary.outlet_cond.m_flow = RealFixedLocal10[29];
  NOM.preheater_HP.summary.outlet_cond.p = RealFixedLocal10[30];
  NOM.preheater_HP.summary.outlet_cond.h = RealFixedLocal10[31];
  NOM.preheater_HP.summary.inlet_tap.m_flow = RealFixedLocal10[32];
  NOM.preheater_HP.summary.inlet_tap.p = RealFixedLocal10[33];
  NOM.preheater_HP.summary.inlet_tap.h = RealFixedLocal10[34];
  NOM.preheater_HP.summary.outlet_tap.m_flow = RealFixedLocal10[35];
  NOM.preheater_HP.summary.outlet_tap.p = RealFixedLocal10[36];
  NOM.preheater_HP.summary.outlet_tap.h = RealFixedLocal10[37];
  NOM.preheater_HP.cond_out.p = RealFixedLocal10[38];
  NOM.preheater_HP.tap_in.h = RealFixedLocal10[39];
  NOM.boiler.Q_flow = RealFixedLocal10[40];
  NOM.boiler.Q_flow_LS_ = RealFixedLocal10[41];
  NOM.boiler.Q_flow_RS_ = RealFixedLocal10[42];
  NOM.boiler.h_LS_out = RealFixedLocal10[43];
  NOM.boiler.h_RS_out = RealFixedLocal10[44];
  NOM.boiler.p_RS_in = RealFixedLocal10[45];
  NOM.boiler.coldReheat.h = RealFixedLocal10[46];
  NOM.Turbine_HP.rho_in = RealFixedLocal10[47];
  NOM.Turbine_HP.P_turbine = RealFixedLocal10[48];
  NOM.Turbine_HP.h_out = RealFixedLocal10[49];
  NOM.Turbine_HP.Delta_p = RealFixedLocal10[50];
  NOM.Turbine_HP.summary.inlet.m_flow = RealFixedLocal10[51];
  NOM.Turbine_HP.summary.inlet.p = RealFixedLocal10[52];
  NOM.Turbine_HP.summary.inlet.h = RealFixedLocal10[53];
  NOM.Turbine_HP.summary.outlet.m_flow = RealFixedLocal10[54];
  NOM.Turbine_HP.summary.outlet.p = RealFixedLocal10[55];
  NOM.Turbine_HP.summary.outlet.h = RealFixedLocal10[56];
  NOM.Turbine_HP.summary.outline.Delta_p = RealFixedLocal10[57];
  NOM.Turbine_HP.summary.outline.P_turbine = RealFixedLocal10[58];
  NOM.join_HP.m_flow_2 = RealFixedLocal10[59];
  NOM.join_HP.summary.inlet.m_flow = RealFixedLocal10[60];
  NOM.join_HP.summary.inlet.p = RealFixedLocal10[61];
  NOM.join_HP.summary.inlet.h = RealFixedLocal10[62];
  NOM.join_HP.summary.outlet1.m_flow = RealFixedLocal10[63];
  NOM.join_HP.summary.outlet1.p = RealFixedLocal10[64];
  NOM.join_HP.summary.outlet1.h = RealFixedLocal10[65];
  NOM.join_HP.summary.outlet2.m_flow = RealFixedLocal10[66];
  NOM.join_HP.summary.outlet2.p = RealFixedLocal10[67];
  NOM.join_HP.summary.outlet2.h = RealFixedLocal10[68];
  NOM.join_HP.outlet_2.p = RealFixedLocal10[69];
  NOM.valve_HP.summary.inlet.m_flow = RealFixedLocal10[70];
  NOM.valve_HP.summary.inlet.p = RealFixedLocal10[71];
  NOM.valve_HP.summary.inlet.h = RealFixedLocal10[72];
  NOM.valve_HP.summary.inlet.rho = RealFixedLocal10[73];
  NOM.valve_HP.summary.outlet.m_flow = RealFixedLocal10[74];
  NOM.valve_HP.summary.outlet.p = RealFixedLocal10[75];
  NOM.valve_HP.summary.outlet.h = RealFixedLocal10[76];
  NOM.valve_HP.summary.outlet.rho = RealFixedLocal10[77];
  NOM.valve_cut.Delta_p = RealFixedLocal10[78];
  NOM.valve_cut.summary.inlet.m_flow = RealFixedLocal10[79];
  NOM.valve_cut.summary.inlet.p = RealFixedLocal10[80];
  NOM.valve_cut.summary.inlet.h = RealFixedLocal10[81];
  NOM.valve_cut.summary.inlet.rho = RealFixedLocal10[82];
  NOM.valve_cut.summary.outlet.m_flow = RealFixedLocal10[83];
  NOM.valve_cut.summary.outlet.p = RealFixedLocal10[84];
  NOM.valve_cut.summary.outlet.h = RealFixedLocal10[85];
  NOM.valve_cut.summary.outlet.rho = RealFixedLocal10[86];
  NOM.valve2_HP.Delta_p = RealFixedLocal10[87];
  NOM.valve2_HP.summary.inlet.m_flow = RealFixedLocal10[88];
  NOM.valve2_HP.summary.inlet.p = RealFixedLocal10[89];
  NOM.valve2_HP.summary.inlet.h = RealFixedLocal10[90];
  NOM.valve2_HP.summary.inlet.rho = RealFixedLocal10[91];
  NOM.valve2_HP.summary.outlet.m_flow = RealFixedLocal10[92];
  NOM.valve2_HP.summary.outlet.p = RealFixedLocal10[93];
  NOM.valve2_HP.summary.outlet.h = RealFixedLocal10[94];
  NOM.valve2_HP.summary.outlet.rho = RealFixedLocal10[95];
  NOM.Turbine_IP1.rho_in = RealFixedLocal10[96];
  NOM.Turbine_IP1.P_turbine = RealFixedLocal10[97];
  NOM.Turbine_IP1.h_out = RealFixedLocal10[98];
  NOM.Turbine_IP1.Delta_p = RealFixedLocal10[99];
  NOM.Turbine_IP1.summary.inlet.m_flow = RealFixedLocal10[100];
  NOM.Turbine_IP1.summary.inlet.p = RealFixedLocal11[1];
  NOM.Turbine_IP1.summary.inlet.h = RealFixedLocal11[2];
  NOM.Turbine_IP1.summary.outlet.m_flow = RealFixedLocal11[3];
  NOM.Turbine_IP1.summary.outlet.p = RealFixedLocal11[4];
  NOM.Turbine_IP1.summary.outlet.h = RealFixedLocal11[5];
  NOM.Turbine_IP1.summary.outline.Delta_p = RealFixedLocal11[6];
  NOM.Turbine_IP1.summary.outline.P_turbine = RealFixedLocal11[7];
  NOM.Turbine_LP1.rho_in = RealFixedLocal11[8];
  NOM.Turbine_LP1.P_turbine = RealFixedLocal11[9];
  NOM.Turbine_LP1.h_out = RealFixedLocal11[10];
  NOM.Turbine_LP1.Delta_p = RealFixedLocal11[11];
  NOM.Turbine_LP1.summary.inlet.m_flow = RealFixedLocal11[12];
  NOM.Turbine_LP1.summary.inlet.p = RealFixedLocal11[13];
  NOM.Turbine_LP1.summary.inlet.h = RealFixedLocal11[14];
  NOM.Turbine_LP1.summary.outlet.m_flow = RealFixedLocal11[15];
  NOM.Turbine_LP1.summary.outlet.p = RealFixedLocal11[16];
  NOM.Turbine_LP1.summary.outlet.h = RealFixedLocal11[17];
  NOM.Turbine_LP1.summary.outline.Delta_p = RealFixedLocal11[18];
  NOM.Turbine_LP1.summary.outline.P_turbine = RealFixedLocal11[19];
  NOM.Turbine_LP1.inlet.m_flow = RealFixedLocal11[20];
  NOM.split_LP1.m_flow_2 = RealFixedLocal11[21];
  NOM.split_LP1.summary.inlet.m_flow = RealFixedLocal11[22];
  NOM.split_LP1.summary.inlet.p = RealFixedLocal11[23];
  NOM.split_LP1.summary.inlet.h = RealFixedLocal11[24];
  NOM.split_LP1.summary.outlet1.m_flow = RealFixedLocal11[25];
  NOM.split_LP1.summary.outlet1.p = RealFixedLocal11[26];
  NOM.split_LP1.summary.outlet1.h = RealFixedLocal11[27];
  NOM.split_LP1.summary.outlet2.m_flow = RealFixedLocal11[28];
  NOM.split_LP1.summary.outlet2.p = RealFixedLocal11[29];
  NOM.split_LP1.summary.outlet2.h = RealFixedLocal11[30];
  NOM.split_LP1.outlet_2.p = RealFixedLocal11[31];
  NOM.valve_IP1.Delta_p = RealFixedLocal11[32];
  NOM.valve_IP1.summary.inlet.m_flow = RealFixedLocal11[33];
  NOM.valve_IP1.summary.inlet.p = RealFixedLocal11[34];
  NOM.valve_IP1.summary.inlet.h = RealFixedLocal11[35];
  NOM.valve_IP1.summary.inlet.rho = RealFixedLocal11[36];
  NOM.valve_IP1.summary.outlet.m_flow = RealFixedLocal11[37];
  NOM.valve_IP1.summary.outlet.p = RealFixedLocal11[38];
  NOM.valve_IP1.summary.outlet.h = RealFixedLocal11[39];
  NOM.valve_IP1.summary.outlet.rho = RealFixedLocal11[40];
  NOM.valve_LP1.h_out = RealFixedLocal11[41];
  NOM.valve_LP1.summary.inlet.m_flow = RealFixedLocal11[42];
  NOM.valve_LP1.summary.inlet.p = RealFixedLocal11[43];
  NOM.valve_LP1.summary.inlet.h = RealFixedLocal11[44];
  NOM.valve_LP1.summary.inlet.rho = RealFixedLocal11[45];
  NOM.valve_LP1.summary.outlet.m_flow = RealFixedLocal11[46];
  NOM.valve_LP1.summary.outlet.p = RealFixedLocal11[47];
  NOM.valve_LP1.summary.outlet.h = RealFixedLocal11[48];
  NOM.valve_LP1.summary.outlet.rho = RealFixedLocal11[49];
  NOM.Turbine_LP4.rho_in = RealFixedLocal11[50];
  NOM.Turbine_LP4.P_turbine = RealFixedLocal11[51];
  NOM.Turbine_LP4.Delta_p = RealFixedLocal11[52];
  NOM.Turbine_LP4.summary.inlet.m_flow = RealFixedLocal11[53];
  NOM.Turbine_LP4.summary.inlet.p = RealFixedLocal11[54];
  NOM.Turbine_LP4.summary.inlet.h = RealFixedLocal11[55];
  NOM.Turbine_LP4.summary.outlet.m_flow = RealFixedLocal11[56];
  NOM.Turbine_LP4.summary.outlet.p = RealFixedLocal11[57];
  NOM.Turbine_LP4.summary.outlet.h = RealFixedLocal11[58];
  NOM.Turbine_LP4.summary.outline.Delta_p = RealFixedLocal11[59];
  NOM.Turbine_LP4.summary.outline.P_turbine = RealFixedLocal11[60];
  NOM.Turbine_LP4.inlet.m_flow = RealFixedLocal11[61];
  NOM.Turbine_IP2.rho_in = RealFixedLocal11[62];
  NOM.Turbine_IP2.P_turbine = RealFixedLocal11[63];
  NOM.Turbine_IP2.h_out = RealFixedLocal11[64];
  NOM.Turbine_IP2.Delta_p = RealFixedLocal11[65];
  NOM.Turbine_IP2.summary.inlet.m_flow = RealFixedLocal11[66];
  NOM.Turbine_IP2.summary.inlet.p = RealFixedLocal11[67];
  NOM.Turbine_IP2.summary.inlet.h = RealFixedLocal11[68];
  NOM.Turbine_IP2.summary.outlet.m_flow = RealFixedLocal11[69];
  NOM.Turbine_IP2.summary.outlet.p = RealFixedLocal11[70];
  NOM.Turbine_IP2.summary.outlet.h = RealFixedLocal11[71];
  NOM.Turbine_IP2.summary.outline.Delta_p = RealFixedLocal11[72];
  NOM.Turbine_IP2.summary.outline.P_turbine = RealFixedLocal11[73];
  NOM.Turbine_IP2.inlet.h = RealFixedLocal11[74];
  NOM.Turbine_IP3.rho_in = RealFixedLocal11[75];
  NOM.Turbine_IP3.P_turbine = RealFixedLocal11[76];
  NOM.Turbine_IP3.h_out = RealFixedLocal11[77];
  NOM.Turbine_IP3.Delta_p = RealFixedLocal11[78];
  NOM.Turbine_IP3.summary.inlet.m_flow = RealFixedLocal11[79];
  NOM.Turbine_IP3.summary.inlet.p = RealFixedLocal11[80];
  NOM.Turbine_IP3.summary.inlet.h = RealFixedLocal11[81];
  NOM.Turbine_IP3.summary.outlet.m_flow = RealFixedLocal11[82];
  NOM.Turbine_IP3.summary.outlet.p = RealFixedLocal11[83];
  NOM.Turbine_IP3.summary.outlet.h = RealFixedLocal11[84];
  NOM.Turbine_IP3.summary.outline.Delta_p = RealFixedLocal11[85];
  NOM.Turbine_IP3.summary.outline.P_turbine = RealFixedLocal11[86];
  NOM.Turbine_IP3.inlet.m_flow = RealFixedLocal11[87];
  NOM.splitIP2.summary.inlet.m_flow = RealFixedLocal11[88];
  NOM.splitIP2.summary.inlet.p = RealFixedLocal11[89];
  NOM.splitIP2.summary.inlet.h = RealFixedLocal11[90];
  NOM.splitIP2.summary.outlet1.m_flow = RealFixedLocal11[91];
  NOM.splitIP2.summary.outlet1.p = RealFixedLocal11[92];
  NOM.splitIP2.summary.outlet1.h = RealFixedLocal11[93];
  NOM.splitIP2.summary.outlet2.m_flow = RealFixedLocal11[94];
  NOM.splitIP2.summary.outlet2.p = RealFixedLocal11[95];
  NOM.splitIP2.summary.outlet2.h = RealFixedLocal11[96];
  NOM.splitIP3.summary.inlet.m_flow = RealFixedLocal11[97];
  NOM.splitIP3.summary.inlet.p = RealFixedLocal11[98];
  NOM.splitIP3.summary.inlet.h = RealFixedLocal11[99];
  NOM.splitIP3.summary.outlet1.m_flow = RealFixedLocal11[100];
  NOM.splitIP3.summary.outlet1.p = RealFixedLocal12[1];
  NOM.splitIP3.summary.outlet1.h = RealFixedLocal12[2];
  NOM.splitIP3.summary.outlet2.m_flow = RealFixedLocal12[3];
  NOM.splitIP3.summary.outlet2.p = RealFixedLocal12[4];
  NOM.splitIP3.summary.outlet2.h = RealFixedLocal12[5];
  NOM.pressureAnchor_constFlow1_1.summary.inlet.m_flow = RealFixedLocal12[6];
  NOM.pressureAnchor_constFlow1_1.summary.inlet.p = RealFixedLocal12[7];
  NOM.pressureAnchor_constFlow1_1.summary.inlet.h = RealFixedLocal12[8];
  NOM.pressureAnchor_constFlow1_1.summary.inlet.rho = RealFixedLocal12[9];
  NOM.pressureAnchor_constFlow1_1.summary.outlet.m_flow = RealFixedLocal12[10];
  NOM.pressureAnchor_constFlow1_1.summary.outlet.p = RealFixedLocal12[11];
  NOM.pressureAnchor_constFlow1_1.summary.outlet.h = RealFixedLocal12[12];
  NOM.pressureAnchor_constFlow1_1.summary.outlet.rho = RealFixedLocal12[13];
  NOM.Turbine_LP3.rho_in = RealFixedLocal12[14];
  NOM.Turbine_LP3.P_turbine = RealFixedLocal12[15];
  NOM.Turbine_LP3.h_out = RealFixedLocal12[16];
  NOM.Turbine_LP3.Delta_p = RealFixedLocal12[17];
  NOM.Turbine_LP3.summary.inlet.m_flow = RealFixedLocal12[18];
  NOM.Turbine_LP3.summary.inlet.p = RealFixedLocal12[19];
  NOM.Turbine_LP3.summary.inlet.h = RealFixedLocal12[20];
  NOM.Turbine_LP3.summary.outlet.m_flow = RealFixedLocal12[21];
  NOM.Turbine_LP3.summary.outlet.p = RealFixedLocal12[22];
  NOM.Turbine_LP3.summary.outlet.h = RealFixedLocal12[23];
  NOM.Turbine_LP3.summary.outline.Delta_p = RealFixedLocal12[24];
  NOM.Turbine_LP3.summary.outline.P_turbine = RealFixedLocal12[25];
  NOM.Turbine_LP3.inlet.m_flow = RealFixedLocal12[26];
  NOM.Turbine_LP2.rho_in = RealFixedLocal12[27];
  NOM.Turbine_LP2.P_turbine = RealFixedLocal12[28];
  NOM.Turbine_LP2.h_out = RealFixedLocal12[29];
  NOM.Turbine_LP2.Delta_p = RealFixedLocal12[30];
  NOM.Turbine_LP2.summary.inlet.m_flow = RealFixedLocal12[31];
  NOM.Turbine_LP2.summary.inlet.p = RealFixedLocal12[32];
  NOM.Turbine_LP2.summary.inlet.h = RealFixedLocal12[33];
  NOM.Turbine_LP2.summary.outlet.m_flow = RealFixedLocal12[34];
  NOM.Turbine_LP2.summary.outlet.p = RealFixedLocal12[35];
  NOM.Turbine_LP2.summary.outlet.h = RealFixedLocal12[36];
  NOM.Turbine_LP2.summary.outline.Delta_p = RealFixedLocal12[37];
  NOM.Turbine_LP2.summary.outline.P_turbine = RealFixedLocal12[38];
  NOM.valve2.h_out = RealFixedLocal12[39];
  NOM.valve2.Delta_p = RealFixedLocal12[40];
  NOM.valve2.summary.inlet.m_flow = RealFixedLocal12[41];
  NOM.valve2.summary.inlet.p = RealFixedLocal12[42];
  NOM.valve2.summary.inlet.h = RealFixedLocal12[43];
  NOM.valve2.summary.inlet.rho = RealFixedLocal12[44];
  NOM.valve2.summary.outlet.m_flow = RealFixedLocal12[45];
  NOM.valve2.summary.outlet.p = RealFixedLocal12[46];
  NOM.valve2.summary.outlet.h = RealFixedLocal12[47];
  NOM.valve2.summary.outlet.rho = RealFixedLocal12[48];
  NOM.valve2.inlet.p = RealFixedLocal12[49];
  NOM.valve2.inlet.h = RealFixedLocal12[50];
  NOM.mixerIP2.m_flow_2 = RealFixedLocal12[51];
  NOM.mixerIP2.h3 = RealFixedLocal12[52];
  NOM.mixerIP2.summary.inlet1.m_flow = RealFixedLocal12[53];
  NOM.mixerIP2.summary.inlet1.p = RealFixedLocal12[54];
  NOM.mixerIP2.summary.inlet1.h = RealFixedLocal12[55];
  NOM.mixerIP2.summary.inlet2.m_flow = RealFixedLocal12[56];
  NOM.mixerIP2.summary.inlet2.p = RealFixedLocal12[57];
  NOM.mixerIP2.summary.inlet2.h = RealFixedLocal12[58];
  NOM.mixerIP2.summary.outlet.m_flow = RealFixedLocal12[59];
  NOM.mixerIP2.summary.outlet.p = RealFixedLocal12[60];
  NOM.mixerIP2.summary.outlet.h = RealFixedLocal12[61];
  NOM.mixerIP2.inlet_2.h = RealFixedLocal12[62];
  NOM.preheater_LP2.summary.inlet_cond.m_flow = RealFixedLocal12[63];
  NOM.preheater_LP2.summary.inlet_cond.p = RealFixedLocal12[64];
  NOM.preheater_LP2.summary.inlet_cond.h = RealFixedLocal12[65];
  NOM.preheater_LP2.summary.outlet_cond.m_flow = RealFixedLocal12[66];
  NOM.preheater_LP2.summary.outlet_cond.p = RealFixedLocal12[67];
  NOM.preheater_LP2.summary.outlet_cond.h = RealFixedLocal12[68];
  NOM.preheater_LP2.summary.inlet_tap.m_flow = RealFixedLocal12[69];
  NOM.preheater_LP2.summary.inlet_tap.p = RealFixedLocal12[70];
  NOM.preheater_LP2.summary.inlet_tap.h = RealFixedLocal12[71];
  NOM.preheater_LP2.summary.outlet_tap.m_flow = RealFixedLocal12[72];
  NOM.preheater_LP2.summary.outlet_tap.p = RealFixedLocal12[73];
  NOM.preheater_LP2.summary.outlet_tap.h = RealFixedLocal12[74];
  NOM.preheater_LP2.cond_in.h = RealFixedLocal12[75];
  NOM.preheater_LP2.cond_in.m_flow = RealFixedLocal12[76];
  NOM.preheater_LP3.p_tap_out = RealFixedLocal12[77];
  NOM.preheater_LP3.h_tap_out = RealFixedLocal12[78];
  NOM.preheater_LP3.h_cond_out = RealFixedLocal12[79];
  NOM.preheater_LP3.summary.inlet_cond.m_flow = RealFixedLocal12[80];
  NOM.preheater_LP3.summary.inlet_cond.p = RealFixedLocal12[81];
  NOM.preheater_LP3.summary.inlet_cond.h = RealFixedLocal12[82];
  NOM.preheater_LP3.summary.outlet_cond.m_flow = RealFixedLocal12[83];
  NOM.preheater_LP3.summary.outlet_cond.p = RealFixedLocal12[84];
  NOM.preheater_LP3.summary.outlet_cond.h = RealFixedLocal12[85];
  NOM.preheater_LP3.summary.inlet_tap.m_flow = RealFixedLocal12[86];
  NOM.preheater_LP3.summary.inlet_tap.p = RealFixedLocal12[87];
  NOM.preheater_LP3.summary.inlet_tap.h = RealFixedLocal12[88];
  NOM.preheater_LP3.summary.outlet_tap.m_flow = RealFixedLocal12[89];
  NOM.preheater_LP3.summary.outlet_tap.p = RealFixedLocal12[90];
  NOM.preheater_LP3.summary.outlet_tap.h = RealFixedLocal12[91];
  NOM.preheater_LP3.cond_in.h = RealFixedLocal12[92];
  NOM.preheater_LP4.p_tap_out = RealFixedLocal12[93];
  NOM.preheater_LP4.h_tap_out = RealFixedLocal12[94];
  NOM.preheater_LP4.summary.inlet_cond.m_flow = RealFixedLocal12[95];
  NOM.preheater_LP4.summary.inlet_cond.p = RealFixedLocal12[96];
  NOM.preheater_LP4.summary.inlet_cond.h = RealFixedLocal12[97];
  NOM.preheater_LP4.summary.outlet_cond.m_flow = RealFixedLocal12[98];
  NOM.preheater_LP4.summary.outlet_cond.p = RealFixedLocal12[99];
  NOM.preheater_LP4.summary.outlet_cond.h = RealFixedLocal12[100];
  NOM.preheater_LP4.summary.inlet_tap.m_flow = RealFixedLocal13[1];
  NOM.preheater_LP4.summary.inlet_tap.p = RealFixedLocal13[2];
  NOM.preheater_LP4.summary.inlet_tap.h = RealFixedLocal13[3];
  NOM.preheater_LP4.summary.outlet_tap.m_flow = RealFixedLocal13[4];
  NOM.preheater_LP4.summary.outlet_tap.p = RealFixedLocal13[5];
  NOM.preheater_LP4.summary.outlet_tap.h = RealFixedLocal13[6];
  NOM.preheater_LP4.tap_in.h = RealFixedLocal13[7];
  NOM.valve_IP2.Delta_p = RealFixedLocal13[8];
  NOM.valve_IP2.summary.inlet.m_flow = RealFixedLocal13[9];
  NOM.valve_IP2.summary.inlet.p = RealFixedLocal13[10];
  NOM.valve_IP2.summary.inlet.h = RealFixedLocal13[11];
  NOM.valve_IP2.summary.inlet.rho = RealFixedLocal13[12];
  NOM.valve_IP2.summary.outlet.m_flow = RealFixedLocal13[13];
  NOM.valve_IP2.summary.outlet.p = RealFixedLocal13[14];
  NOM.valve_IP2.summary.outlet.h = RealFixedLocal13[15];
  NOM.valve_IP2.summary.outlet.rho = RealFixedLocal13[16];
  NOM.split_LP2.summary.inlet.m_flow = RealFixedLocal13[17];
  NOM.split_LP2.summary.inlet.p = RealFixedLocal13[18];
  NOM.split_LP2.summary.inlet.h = RealFixedLocal13[19];
  NOM.split_LP2.summary.outlet1.m_flow = RealFixedLocal13[20];
  NOM.split_LP2.summary.outlet1.p = RealFixedLocal13[21];
  NOM.split_LP2.summary.outlet1.h = RealFixedLocal13[22];
  NOM.split_LP2.summary.outlet2.m_flow = RealFixedLocal13[23];
  NOM.split_LP2.summary.outlet2.p = RealFixedLocal13[24];
  NOM.split_LP2.summary.outlet2.h = RealFixedLocal13[25];
  NOM.split_LP2.outlet_2.p = RealFixedLocal13[26];
  NOM.split_LP3.summary.inlet.m_flow = RealFixedLocal13[27];
  NOM.split_LP3.summary.inlet.p = RealFixedLocal13[28];
  NOM.split_LP3.summary.inlet.h = RealFixedLocal13[29];
  NOM.split_LP3.summary.outlet1.m_flow = RealFixedLocal13[30];
  NOM.split_LP3.summary.outlet1.p = RealFixedLocal13[31];
  NOM.split_LP3.summary.outlet1.h = RealFixedLocal13[32];
  NOM.split_LP3.summary.outlet2.m_flow = RealFixedLocal13[33];
  NOM.split_LP3.summary.outlet2.p = RealFixedLocal13[34];
  NOM.split_LP3.summary.outlet2.h = RealFixedLocal13[35];
  NOM.split_LP3.outlet_2.p = RealFixedLocal13[36];
  NOM.valve_LP2.summary.inlet.m_flow = RealFixedLocal13[37];
  NOM.valve_LP2.summary.inlet.p = RealFixedLocal13[38];
  NOM.valve_LP2.summary.inlet.h = RealFixedLocal13[39];
  NOM.valve_LP2.summary.inlet.rho = RealFixedLocal13[40];
  NOM.valve_LP2.summary.outlet.m_flow = RealFixedLocal13[41];
  NOM.valve_LP2.summary.outlet.p = RealFixedLocal13[42];
  NOM.valve_LP2.summary.outlet.h = RealFixedLocal13[43];
  NOM.valve_LP2.summary.outlet.rho = RealFixedLocal13[44];
  NOM.valve_LP3.summary.inlet.m_flow = RealFixedLocal13[45];
  NOM.valve_LP3.summary.inlet.p = RealFixedLocal13[46];
  NOM.valve_LP3.summary.inlet.h = RealFixedLocal13[47];
  NOM.valve_LP3.summary.inlet.rho = RealFixedLocal13[48];
  NOM.valve_LP3.summary.outlet.m_flow = RealFixedLocal13[49];
  NOM.valve_LP3.summary.outlet.p = RealFixedLocal13[50];
  NOM.valve_LP3.summary.outlet.h = RealFixedLocal13[51];
  NOM.valve_LP3.summary.outlet.rho = RealFixedLocal13[52];
  NOM.pump_preheater_LP3.rho_in = RealFixedLocal13[53];
  NOM.pump_preheater_LP3.P_pump = RealFixedLocal13[54];
  NOM.pump_preheater_LP3.h_out = RealFixedLocal13[55];
  NOM.pump_preheater_LP3.Delta_p = RealFixedLocal13[56];
  NOM.pump_preheater_LP3.summary.inlet.m_flow = RealFixedLocal13[57];
  NOM.pump_preheater_LP3.summary.inlet.p = RealFixedLocal13[58];
  NOM.pump_preheater_LP3.summary.inlet.h = RealFixedLocal13[59];
  NOM.pump_preheater_LP3.summary.outlet.m_flow = RealFixedLocal13[60];
  NOM.pump_preheater_LP3.summary.outlet.p = RealFixedLocal13[61];
  NOM.pump_preheater_LP3.summary.outlet.h = RealFixedLocal13[62];
  NOM.pump_preheater_LP3.summary.outline.Delta_p = RealFixedLocal13[63];
  NOM.pump_preheater_LP3.summary.outline.P_pump = RealFixedLocal13[64];
  NOM.join_preheater_LP3.summary.inlet1.m_flow = RealFixedLocal13[65];
  NOM.join_preheater_LP3.summary.inlet1.p = RealFixedLocal13[66];
  NOM.join_preheater_LP3.summary.inlet1.h = RealFixedLocal13[67];
  NOM.join_preheater_LP3.summary.inlet2.m_flow = RealFixedLocal13[68];
  NOM.join_preheater_LP3.summary.inlet2.p = RealFixedLocal13[69];
  NOM.join_preheater_LP3.summary.inlet2.h = RealFixedLocal13[70];
  NOM.join_preheater_LP3.summary.outlet.m_flow = RealFixedLocal13[71];
  NOM.join_preheater_LP3.summary.outlet.p = RealFixedLocal13[72];
  NOM.join_preheater_LP3.summary.outlet.h = RealFixedLocal13[73];
  NOM.valve_cutPressureLP4.h_out = RealFixedLocal13[74];
  NOM.valve_cutPressureLP4.Delta_p = RealFixedLocal13[75];
  NOM.valve_cutPressureLP4.summary.inlet.m_flow = RealFixedLocal13[76];
  NOM.valve_cutPressureLP4.summary.inlet.p = RealFixedLocal13[77];
  NOM.valve_cutPressureLP4.summary.inlet.h = RealFixedLocal13[78];
  NOM.valve_cutPressureLP4.summary.inlet.rho = RealFixedLocal13[79];
  NOM.valve_cutPressureLP4.summary.outlet.m_flow = RealFixedLocal13[80];
  NOM.valve_cutPressureLP4.summary.outlet.p = RealFixedLocal13[81];
  NOM.valve_cutPressureLP4.summary.outlet.h = RealFixedLocal13[82];
  NOM.valve_cutPressureLP4.summary.outlet.rho = RealFixedLocal13[83];
  NOM.mixer_condenser.summary.inlet1.m_flow = RealFixedLocal13[84];
  NOM.mixer_condenser.summary.inlet1.p = RealFixedLocal13[85];
  NOM.mixer_condenser.summary.inlet1.h = RealFixedLocal13[86];
  NOM.mixer_condenser.summary.inlet2.m_flow = RealFixedLocal13[87];
  NOM.mixer_condenser.summary.inlet2.p = RealFixedLocal13[88];
  NOM.mixer_condenser.summary.inlet2.h = RealFixedLocal13[89];
  NOM.mixer_condenser.summary.outlet.m_flow = RealFixedLocal13[90];
  NOM.mixer_condenser.summary.outlet.p = RealFixedLocal13[91];
  NOM.mixer_condenser.summary.outlet.h = RealFixedLocal13[92];
  NOM.downComer_feedWaterTank.Delta_p_geo = RealFixedLocal13[93];
  NOM.downComer_feedWaterTank.'p[1]' = RealFixedLocal13[94];
  NOM.downComer_feedWaterTank.'p[2]' = RealFixedLocal13[95];
  NOM.downComer_feedWaterTank.'p[3]' = RealFixedLocal13[96];
  NOM.downComer_feedWaterTank.summary.inlet.m_flow = RealFixedLocal13[97];
  NOM.downComer_feedWaterTank.summary.inlet.p = RealFixedLocal13[98];
  NOM.downComer_feedWaterTank.summary.inlet.h = RealFixedLocal13[99];
  NOM.downComer_feedWaterTank.summary.outlet.m_flow = RealFixedLocal13[100];
  NOM.downComer_feedWaterTank.summary.outlet.p = RealFixedLocal14[1];
  NOM.downComer_feedWaterTank.summary.outlet.h = RealFixedLocal14[2];
  Turbine_IP3.p_nom = RealFixedLocal14[3];
  Turbine_IP3.m_flow_nom = RealFixedLocal14[4];
  Turbine_IP3.Pi = RealFixedLocal14[5];
  Turbine_IP3.rho_nom = RealFixedLocal14[6];
  Turbine_IP3.p_in_start = RealFixedLocal14[7];
  Turbine_IP3.p_out_start = RealFixedLocal14[8];
  Turbine_IP3.Kt = RealFixedLocal14[9];
  Turbine_IP3.iCom.m_flow_nom = RealFixedLocal14[10];
  Turbine_IP3.iCom.rho_nom = RealFixedLocal14[11];
  Turbine_IP2.p_nom = RealFixedLocal14[12];
  Turbine_IP2.m_flow_nom = RealFixedLocal14[13];
  Turbine_IP2.Pi = RealFixedLocal14[14];
  Turbine_IP2.rho_nom = RealFixedLocal14[15];
  Turbine_IP2.p_in_start = RealFixedLocal14[16];
  Turbine_IP2.p_out_start = RealFixedLocal14[17];
  Turbine_IP2.Kt = RealFixedLocal14[18];
  Turbine_IP2.iCom.m_flow_nom = RealFixedLocal14[19];
  Turbine_IP2.iCom.rho_nom = RealFixedLocal14[20];
  split_IP2.'m_flow_out_nom[1]' = RealFixedLocal14[21];
  split_IP2.'m_flow_out_nom[2]' = RealFixedLocal14[22];
  split_IP2.p_nom = RealFixedLocal14[23];
  split_IP2.h_nom = RealFixedLocal14[24];
  split_IP2.h_start = RealFixedLocal14[25];
  split_IP2.p_start = RealFixedLocal14[26];
  join_IP3.'m_flow_out_nom[1]' = RealFixedLocal14[27];
  join_IP3.'m_flow_out_nom[2]' = RealFixedLocal14[28];
  join_IP3.p_nom = RealFixedLocal14[29];
  join_IP3.h_nom = RealFixedLocal14[30];
  join_IP3.h_start = RealFixedLocal14[31];
  join_IP3.p_start = RealFixedLocal14[32];
  Turbine_LP3.p_nom = RealFixedLocal14[33];
  Turbine_LP3.m_flow_nom = RealFixedLocal14[34];
  Turbine_LP3.Pi = RealFixedLocal14[35];
  Turbine_LP3.rho_nom = RealFixedLocal14[36];
  Turbine_LP3.p_in_start = RealFixedLocal14[37];
  Turbine_LP3.p_out_start = RealFixedLocal14[38];
  Turbine_LP3.Kt = RealFixedLocal14[39];
  Turbine_LP3.iCom.m_flow_nom = RealFixedLocal14[40];
  Turbine_LP3.iCom.rho_nom = RealFixedLocal14[41];
  Turbine_LP2.p_nom = RealFixedLocal14[42];
  Turbine_LP2.m_flow_nom = RealFixedLocal14[43];
  Turbine_LP2.Pi = RealFixedLocal14[44];
  Turbine_LP2.rho_nom = RealFixedLocal14[45];
  Turbine_LP2.p_in_start = RealFixedLocal14[46];
  Turbine_LP2.p_out_start = RealFixedLocal14[47];
  Turbine_LP2.Kt = RealFixedLocal14[48];
  Turbine_LP2.iCom.m_flow_nom = RealFixedLocal14[49];
  Turbine_LP2.iCom.rho_nom = RealFixedLocal14[50];
  join_LP2.'m_flow_out_nom[1]' = RealFixedLocal14[51];
  join_LP2.'m_flow_out_nom[2]' = RealFixedLocal14[52];
  join_LP2.p_nom = RealFixedLocal14[53];
  join_LP2.h_nom = RealFixedLocal14[54];
  join_LP2.h_start = RealFixedLocal14[55];
  join_LP2.p_start = RealFixedLocal14[56];
  split_LP3.'m_flow_out_nom[1]' = RealFixedLocal14[57];
  split_LP3.'m_flow_out_nom[2]' = RealFixedLocal14[58];
  split_LP3.p_nom = RealFixedLocal14[59];
  split_LP3.h_nom = RealFixedLocal14[60];
  split_LP3.h_start = RealFixedLocal14[61];
  split_LP3.p_start = RealFixedLocal14[62];
  valve_LP1.pressureLoss.Delta_p_nom = RealFixedLocal14[63];
  valve_LP1.pressureLoss.m_flow_nom = RealFixedLocal14[64];
  valve_LP1.pressureLoss.aperture_ = RealFixedLocal14[65];
  valve_LP1.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal14[66];
  valve_LP1.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal14[67];
  valve_LP1.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal14[68];
  preheater_LP2.m_flow_nom_shell = RealFixedLocal14[69];
  preheater_LP2.p_nom_shell = RealFixedLocal14[70];
  preheater_LP2.h_nom_shell = RealFixedLocal14[71];
  preheater_LP2.h_liq_start = RealFixedLocal14[72];
  preheater_LP2.h_vap_start = RealFixedLocal14[73];
  preheater_LP2.p_start_shell = RealFixedLocal14[74];
  preheater_LP2.m_flow_nom_tubes = RealFixedLocal14[75];
  preheater_LP2.p_nom_tubes = RealFixedLocal14[76];
  preheater_LP2.h_nom_tubes = RealFixedLocal14[77];
  preheater_LP2.h_start_tubes = RealFixedLocal14[78];
  preheater_LP2.p_start_tubes = RealFixedLocal14[79];
  preheater_LP2.tubes.m_flow_nom = RealFixedLocal14[80];
  preheater_LP2.tubes.p_nom = RealFixedLocal14[81];
  preheater_LP2.tubes.h_nom = RealFixedLocal14[82];
  preheater_LP2.tubes.h_start = RealFixedLocal14[83];
  preheater_LP2.tubes.p_start = RealFixedLocal14[84];
  preheater_LP2.tubes.fluidIn.M = RealFixedLocal14[85];
  preheater_LP2.tubes.fluidIn.crit.d = RealFixedLocal14[86];
  preheater_LP2.tubes.fluidIn.crit.h = RealFixedLocal14[87];
  preheater_LP2.tubes.fluidIn.crit.p = RealFixedLocal14[88];
  preheater_LP2.tubes.fluidIn.crit.s = RealFixedLocal14[89];
  preheater_LP2.tubes.fluidIn.crit.T = RealFixedLocal14[90];
  preheater_LP2.tubes.fluidOut.M = RealFixedLocal14[91];
  preheater_LP2.tubes.fluidOut.crit.d = RealFixedLocal14[92];
  preheater_LP2.tubes.fluidOut.crit.h = RealFixedLocal14[93];
  preheater_LP2.tubes.fluidOut.crit.p = RealFixedLocal14[94];
  preheater_LP2.tubes.fluidOut.crit.s = RealFixedLocal14[95];
  preheater_LP2.tubes.fluidOut.crit.T = RealFixedLocal14[96];
  preheater_LP2.shell.m_flow_nom = RealFixedLocal14[97];
  preheater_LP2.shell.p_nom = RealFixedLocal14[98];
  preheater_LP2.shell.rho_liq_nom = RealFixedLocal14[99];
  preheater_LP2.shell.rho_vap_nom = RealFixedLocal14[100];
  preheater_LP2.shell.h_liq_start = RealFixedLocal15[1];
  preheater_LP2.shell.h_vap_start = RealFixedLocal15[2];
  preheater_LP2.shell.p_start = RealFixedLocal15[3];
  preheater_LP2.shell.'fluidIn[1]'.M = RealFixedLocal15[4];
  preheater_LP2.shell.'fluidIn[1]'.crit.d = RealFixedLocal15[5];
  preheater_LP2.shell.'fluidIn[1]'.crit.h = RealFixedLocal15[6];
  preheater_LP2.shell.'fluidIn[1]'.crit.p = RealFixedLocal15[7];
  preheater_LP2.shell.'fluidIn[1]'.crit.s = RealFixedLocal15[8];
  preheater_LP2.shell.'fluidIn[1]'.crit.T = RealFixedLocal15[9];
  preheater_LP2.shell.'fluidIn[2]'.M = RealFixedLocal15[10];
  preheater_LP2.shell.'fluidIn[2]'.crit.d = RealFixedLocal15[11];
  preheater_LP2.shell.'fluidIn[2]'.crit.h = RealFixedLocal15[12];
  preheater_LP2.shell.'fluidIn[2]'.crit.p = RealFixedLocal15[13];
  preheater_LP2.shell.'fluidIn[2]'.crit.s = RealFixedLocal15[14];
  preheater_LP2.shell.'fluidIn[2]'.crit.T = RealFixedLocal15[15];
  preheater_LP2.shell.'fluidIn[3]'.M = RealFixedLocal15[16];
  preheater_LP2.shell.'fluidIn[3]'.crit.d = RealFixedLocal15[17];
  preheater_LP2.shell.'fluidIn[3]'.crit.h = RealFixedLocal15[18];
  preheater_LP2.shell.'fluidIn[3]'.crit.p = RealFixedLocal15[19];
  preheater_LP2.shell.'fluidIn[3]'.crit.s = RealFixedLocal15[20];
  preheater_LP2.shell.'fluidIn[3]'.crit.T = RealFixedLocal15[21];
  preheater_LP2.shell.'fluidOut[1]'.M = RealFixedLocal15[22];
  preheater_LP2.shell.'fluidOut[1]'.crit.d = RealFixedLocal15[23];
  preheater_LP2.shell.'fluidOut[1]'.crit.h = RealFixedLocal15[24];
  preheater_LP2.shell.'fluidOut[1]'.crit.p = RealFixedLocal15[25];
  preheater_LP2.shell.'fluidOut[1]'.crit.s = RealFixedLocal15[26];
  preheater_LP2.shell.'fluidOut[1]'.crit.T = RealFixedLocal15[27];
  preheater_LP2.shell.pressureLoss.'Delta_p[2]' = RealFixedLocal15[28];
  preheater_LP2.shell.pressureLoss.'Delta_p[3]' = RealFixedLocal15[29];
  preheater_LP3.m_flow_nom_shell = RealFixedLocal15[30];
  preheater_LP3.p_nom_shell = RealFixedLocal15[31];
  preheater_LP3.h_nom_shell = RealFixedLocal15[32];
  preheater_LP3.h_liq_start = RealFixedLocal15[33];
  preheater_LP3.h_vap_start = RealFixedLocal15[34];
  preheater_LP3.p_start_shell = RealFixedLocal15[35];
  preheater_LP3.m_flow_nom_tubes = RealFixedLocal15[36];
  preheater_LP3.p_nom_tubes = RealFixedLocal15[37];
  preheater_LP3.h_nom_tubes = RealFixedLocal15[38];
  preheater_LP3.h_start_tubes = RealFixedLocal15[39];
  preheater_LP3.p_start_tubes = RealFixedLocal15[40];
  preheater_LP3.tubes.m_flow_nom = RealFixedLocal15[41];
  preheater_LP3.tubes.p_nom = RealFixedLocal15[42];
  preheater_LP3.tubes.h_nom = RealFixedLocal15[43];
  preheater_LP3.tubes.h_start = RealFixedLocal15[44];
  preheater_LP3.tubes.p_start = RealFixedLocal15[45];
  preheater_LP3.tubes.fluidIn.M = RealFixedLocal15[46];
  preheater_LP3.tubes.fluidIn.crit.d = RealFixedLocal15[47];
  preheater_LP3.tubes.fluidIn.crit.h = RealFixedLocal15[48];
  preheater_LP3.tubes.fluidIn.crit.p = RealFixedLocal15[49];
  preheater_LP3.tubes.fluidIn.crit.s = RealFixedLocal15[50];
  preheater_LP3.tubes.fluidIn.crit.T = RealFixedLocal15[51];
  preheater_LP3.tubes.fluidOut.M = RealFixedLocal15[52];
  preheater_LP3.tubes.fluidOut.crit.d = RealFixedLocal15[53];
  preheater_LP3.tubes.fluidOut.crit.h = RealFixedLocal15[54];
  preheater_LP3.tubes.fluidOut.crit.p = RealFixedLocal15[55];
  preheater_LP3.tubes.fluidOut.crit.s = RealFixedLocal15[56];
  preheater_LP3.tubes.fluidOut.crit.T = RealFixedLocal15[57];
  preheater_LP3.shell.m_flow_nom = RealFixedLocal15[58];
  preheater_LP3.shell.p_nom = RealFixedLocal15[59];
  preheater_LP3.shell.rho_liq_nom = RealFixedLocal15[60];
  preheater_LP3.shell.rho_vap_nom = RealFixedLocal15[61];
  preheater_LP3.shell.h_liq_start = RealFixedLocal15[62];
  preheater_LP3.shell.h_vap_start = RealFixedLocal15[63];
  preheater_LP3.shell.p_start = RealFixedLocal15[64];
  preheater_LP3.shell.'fluidIn[1]'.M = RealFixedLocal15[65];
  preheater_LP3.shell.'fluidIn[1]'.crit.d = RealFixedLocal15[66];
  preheater_LP3.shell.'fluidIn[1]'.crit.h = RealFixedLocal15[67];
  preheater_LP3.shell.'fluidIn[1]'.crit.p = RealFixedLocal15[68];
  preheater_LP3.shell.'fluidIn[1]'.crit.s = RealFixedLocal15[69];
  preheater_LP3.shell.'fluidIn[1]'.crit.T = RealFixedLocal15[70];
  preheater_LP3.shell.'fluidIn[2]'.M = RealFixedLocal15[71];
  preheater_LP3.shell.'fluidIn[2]'.crit.d = RealFixedLocal15[72];
  preheater_LP3.shell.'fluidIn[2]'.crit.h = RealFixedLocal15[73];
  preheater_LP3.shell.'fluidIn[2]'.crit.p = RealFixedLocal15[74];
  preheater_LP3.shell.'fluidIn[2]'.crit.s = RealFixedLocal15[75];
  preheater_LP3.shell.'fluidIn[2]'.crit.T = RealFixedLocal15[76];
  preheater_LP3.shell.'fluidIn[3]'.M = RealFixedLocal15[77];
  preheater_LP3.shell.'fluidIn[3]'.crit.d = RealFixedLocal15[78];
  preheater_LP3.shell.'fluidIn[3]'.crit.h = RealFixedLocal15[79];
  preheater_LP3.shell.'fluidIn[3]'.crit.p = RealFixedLocal15[80];
  preheater_LP3.shell.'fluidIn[3]'.crit.s = RealFixedLocal15[81];
  preheater_LP3.shell.'fluidIn[3]'.crit.T = RealFixedLocal15[82];
  preheater_LP3.shell.'fluidOut[1]'.M = RealFixedLocal15[83];
  preheater_LP3.shell.'fluidOut[1]'.crit.d = RealFixedLocal15[84];
  preheater_LP3.shell.'fluidOut[1]'.crit.h = RealFixedLocal15[85];
  preheater_LP3.shell.'fluidOut[1]'.crit.p = RealFixedLocal15[86];
  preheater_LP3.shell.'fluidOut[1]'.crit.s = RealFixedLocal15[87];
  preheater_LP3.shell.'fluidOut[1]'.crit.T = RealFixedLocal15[88];
  preheater_LP3.shell.pressureLoss.'Delta_p[3]' = RealFixedLocal15[89];
  preheater_LP4.m_flow_nom_shell = RealFixedLocal15[90];
  preheater_LP4.p_nom_shell = RealFixedLocal15[91];
  preheater_LP4.h_nom_shell = RealFixedLocal15[92];
  preheater_LP4.h_liq_start = RealFixedLocal15[93];
  preheater_LP4.h_vap_start = RealFixedLocal15[94];
  preheater_LP4.p_start_shell = RealFixedLocal15[95];
  preheater_LP4.m_flow_nom_tubes = RealFixedLocal15[96];
  preheater_LP4.p_nom_tubes = RealFixedLocal15[97];
  preheater_LP4.h_nom_tubes = RealFixedLocal15[98];
  preheater_LP4.h_start_tubes = RealFixedLocal15[99];
  preheater_LP4.p_start_tubes = RealFixedLocal15[100];
  preheater_LP4.tubes.m_flow_nom = RealFixedLocal16[1];
  preheater_LP4.tubes.p_nom = RealFixedLocal16[2];
  preheater_LP4.tubes.h_nom = RealFixedLocal16[3];
  preheater_LP4.tubes.h_start = RealFixedLocal16[4];
  preheater_LP4.tubes.p_start = RealFixedLocal16[5];
  preheater_LP4.tubes.fluidIn.M = RealFixedLocal16[6];
  preheater_LP4.tubes.fluidIn.crit.d = RealFixedLocal16[7];
  preheater_LP4.tubes.fluidIn.crit.h = RealFixedLocal16[8];
  preheater_LP4.tubes.fluidIn.crit.p = RealFixedLocal16[9];
  preheater_LP4.tubes.fluidIn.crit.s = RealFixedLocal16[10];
  preheater_LP4.tubes.fluidIn.crit.T = RealFixedLocal16[11];
  preheater_LP4.tubes.fluidOut.M = RealFixedLocal16[12];
  preheater_LP4.tubes.fluidOut.crit.d = RealFixedLocal16[13];
  preheater_LP4.tubes.fluidOut.crit.h = RealFixedLocal16[14];
  preheater_LP4.tubes.fluidOut.crit.p = RealFixedLocal16[15];
  preheater_LP4.tubes.fluidOut.crit.s = RealFixedLocal16[16];
  preheater_LP4.tubes.fluidOut.crit.T = RealFixedLocal16[17];
  preheater_LP4.shell.m_flow_nom = RealFixedLocal16[18];
  preheater_LP4.shell.p_nom = RealFixedLocal16[19];
  preheater_LP4.shell.rho_liq_nom = RealFixedLocal16[20];
  preheater_LP4.shell.rho_vap_nom = RealFixedLocal16[21];
  preheater_LP4.shell.h_liq_start = RealFixedLocal16[22];
  preheater_LP4.shell.h_vap_start = RealFixedLocal16[23];
  preheater_LP4.shell.p_start = RealFixedLocal16[24];
  preheater_LP4.shell.'fluidIn[1]'.M = RealFixedLocal16[25];
  preheater_LP4.shell.'fluidIn[1]'.crit.d = RealFixedLocal16[26];
  preheater_LP4.shell.'fluidIn[1]'.crit.h = RealFixedLocal16[27];
  preheater_LP4.shell.'fluidIn[1]'.crit.p = RealFixedLocal16[28];
  preheater_LP4.shell.'fluidIn[1]'.crit.s = RealFixedLocal16[29];
  preheater_LP4.shell.'fluidIn[1]'.crit.T = RealFixedLocal16[30];
  preheater_LP4.shell.'fluidIn[2]'.M = RealFixedLocal16[31];
  preheater_LP4.shell.'fluidIn[2]'.crit.d = RealFixedLocal16[32];
  preheater_LP4.shell.'fluidIn[2]'.crit.h = RealFixedLocal16[33];
  preheater_LP4.shell.'fluidIn[2]'.crit.p = RealFixedLocal16[34];
  preheater_LP4.shell.'fluidIn[2]'.crit.s = RealFixedLocal16[35];
  preheater_LP4.shell.'fluidIn[2]'.crit.T = RealFixedLocal16[36];
  preheater_LP4.shell.'fluidIn[3]'.M = RealFixedLocal16[37];
  preheater_LP4.shell.'fluidIn[3]'.crit.d = RealFixedLocal16[38];
  preheater_LP4.shell.'fluidIn[3]'.crit.h = RealFixedLocal16[39];
  preheater_LP4.shell.'fluidIn[3]'.crit.p = RealFixedLocal16[40];
  preheater_LP4.shell.'fluidIn[3]'.crit.s = RealFixedLocal16[41];
  preheater_LP4.shell.'fluidIn[3]'.crit.T = RealFixedLocal16[42];
  preheater_LP4.shell.'fluidOut[1]'.M = RealFixedLocal16[43];
  preheater_LP4.shell.'fluidOut[1]'.crit.d = RealFixedLocal16[44];
  preheater_LP4.shell.'fluidOut[1]'.crit.h = RealFixedLocal16[45];
  preheater_LP4.shell.'fluidOut[1]'.crit.p = RealFixedLocal16[46];
  preheater_LP4.shell.'fluidOut[1]'.crit.s = RealFixedLocal16[47];
  preheater_LP4.shell.'fluidOut[1]'.crit.T = RealFixedLocal16[48];
  preheater_LP4.shell.pressureLoss.'Delta_p[2]' = RealFixedLocal16[49];
  preheater_LP4.shell.pressureLoss.'Delta_p[3]' = RealFixedLocal16[50];
  valve_afterPumpLP3.pressureLoss.aperture_ = RealFixedLocal16[51];
  valve_afterPumpLP3.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal16[52];
  valve_afterPumpLP3.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal16[53];
  valve_afterPumpLP3.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal16[54];
  valveControl_preheater_LP2.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal16[55];
  valveControl_preheater_LP2.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal16[56];
  join_preheater_LP3.p_nom = RealFixedLocal16[57];
  join_preheater_LP3.h_nom = RealFixedLocal16[58];
  join_preheater_LP3.h_start = RealFixedLocal16[59];
  join_preheater_LP3.p_start = RealFixedLocal16[60];
  valveControl_preheater_LP4.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal16[61];
  valveControl_preheater_LP4.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal16[62];
  valve_LP2.pressureLoss.Delta_p_nom = RealFixedLocal16[63];
  valve_LP2.pressureLoss.m_flow_nom = RealFixedLocal16[64];
  valve_LP2.pressureLoss.aperture_ = RealFixedLocal16[65];
  valve_LP2.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal16[66];
  valve_LP2.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal16[67];
  valve_LP2.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal16[68];
  valve_LP3.pressureLoss.Delta_p_nom = RealFixedLocal16[69];
  valve_LP3.pressureLoss.m_flow_nom = RealFixedLocal16[70];
  valve_LP3.pressureLoss.aperture_ = RealFixedLocal16[71];
  valve_LP3.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal16[72];
  valve_LP3.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal16[73];
  valve_LP3.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal16[74];
  PID_preheaterLP3.y_start = RealFixedLocal16[75];
  PID_preheaterLP3.I.y_start = RealFixedLocal16[76];
  downComer_feedWaterTank.m_flow_nom = RealFixedLocal16[77];
  downComer_feedWaterTank.'p_nom[1]' = RealFixedLocal16[78];
  downComer_feedWaterTank.'p_nom[2]' = RealFixedLocal16[79];
  downComer_feedWaterTank.'p_nom[3]' = RealFixedLocal16[80];
  downComer_feedWaterTank.'h_nom[1]' = RealFixedLocal16[81];
  downComer_feedWaterTank.'h_nom[2]' = RealFixedLocal16[82];
  downComer_feedWaterTank.'h_nom[3]' = RealFixedLocal16[83];
  downComer_feedWaterTank.'rho_nom[1]' = RealFixedLocal16[84];
  downComer_feedWaterTank.'rho_nom[2]' = RealFixedLocal16[85];
  downComer_feedWaterTank.'rho_nom[3]' = RealFixedLocal16[86];
  downComer_feedWaterTank.'h_start[1]' = RealFixedLocal16[87];
  downComer_feedWaterTank.'h_start[2]' = RealFixedLocal16[88];
  downComer_feedWaterTank.'h_start[3]' = RealFixedLocal16[89];
  downComer_feedWaterTank.'p_start[1]' = RealFixedLocal16[90];
  downComer_feedWaterTank.'p_start[2]' = RealFixedLocal16[91];
  downComer_feedWaterTank.'p_start[3]' = RealFixedLocal16[92];
  downComer_feedWaterTank.pressureLoss.m_flow_nom = RealFixedLocal16[93];
  downComer_feedWaterTank.mechanicalEquilibrium.'h_start[1]' = RealFixedLocal16[94];
  downComer_feedWaterTank.mechanicalEquilibrium.'h_start[2]' = RealFixedLocal16[95];
  downComer_feedWaterTank.mechanicalEquilibrium.'h_start[3]' = RealFixedLocal16[96];
  valveControl_preheater_LP1.pressureLoss.aperture_ = RealFixedLocal16[97];
  valveControl_preheater_LP1.pressureLoss.ValveCharacteristics.'y[1]' = RealFixedLocal16[98];
  valveControl_preheater_LP1.pressureLoss.ValveCharacteristics.u_min = RealFixedLocal16[99];
  valveControl_preheater_LP1.pressureLoss.ValveCharacteristics.u_max = RealFixedLocal16[100];
  steamGenerator.liveSteam.vleFluidPointer.id = IntegerFixedLocal[1];
  steamGenerator.reheatedSteam.vleFluidPointer.id = IntegerFixedLocal[2];
  condenser.tubes.fluidIn.vleFluidPointer.id = IntegerFixedLocal[3];
  condenser.tubes.fluidOut.vleFluidPointer.id = IntegerFixedLocal[4];
  condenser.shell.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[5];
  condenser.shell.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[6];
  condenser.shell.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[7];
  condenser.shell.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[8];
  feedWaterTank.volume.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[9];
  feedWaterTank.volume.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[10];
  feedWaterTank.volume.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[11];
  feedWaterTank.volume.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[12];
  feedWaterTank.volume.'fluidOut[2]'.vleFluidPointer.id = IntegerFixedLocal[13];
  preheater_HP.tubes.fluidIn.vleFluidPointer.id = IntegerFixedLocal[14];
  preheater_HP.tubes.fluidOut.vleFluidPointer.id = IntegerFixedLocal[15];
  preheater_HP.shell.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[16];
  preheater_HP.shell.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[17];
  preheater_HP.shell.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[18];
  preheater_HP.shell.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[19];
  preheater_LP1.tubes.fluidIn.vleFluidPointer.id = IntegerFixedLocal[20];
  preheater_LP1.tubes.fluidOut.vleFluidPointer.id = IntegerFixedLocal[21];
  preheater_LP1.shell.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[22];
  preheater_LP1.shell.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[23];
  preheater_LP1.shell.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[24];
  preheater_LP1.shell.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[25];
  preheater_LP2.tubes.fluidIn.vleFluidPointer.id = IntegerFixedLocal[26];
  preheater_LP2.tubes.fluidOut.vleFluidPointer.id = IntegerFixedLocal[27];
  preheater_LP2.shell.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[28];
  preheater_LP2.shell.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[29];
  preheater_LP2.shell.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[30];
  preheater_LP2.shell.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[31];
  preheater_LP3.tubes.fluidIn.vleFluidPointer.id = IntegerFixedLocal[32];
  preheater_LP3.tubes.fluidOut.vleFluidPointer.id = IntegerFixedLocal[33];
  preheater_LP3.shell.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[34];
  preheater_LP3.shell.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[35];
  preheater_LP3.shell.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[36];
  preheater_LP3.shell.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[37];
  preheater_LP4.tubes.fluidIn.vleFluidPointer.id = IntegerFixedLocal[38];
  preheater_LP4.tubes.fluidOut.vleFluidPointer.id = IntegerFixedLocal[39];
  preheater_LP4.shell.'fluidIn[1]'.vleFluidPointer.id = IntegerFixedLocal[40];
  preheater_LP4.shell.'fluidIn[2]'.vleFluidPointer.id = IntegerFixedLocal[41];
  preheater_LP4.shell.'fluidIn[3]'.vleFluidPointer.id = IntegerFixedLocal[42];
  preheater_LP4.shell.'fluidOut[1]'.vleFluidPointer.id = IntegerFixedLocal[43];
  PI_Pump_cond.switch_OnOff_I.u2 = BooleanVariables[1];
  PI_Pump_cond.switch_OnOff.u2 = BooleanVariables[2];
  PI_valveControl_preheater_HP.switch_OnOff_I.u2 = BooleanVariables[3];
  PI_valveControl_preheater_HP.switch_OnOff.u2 = BooleanVariables[4];
  PI_preheater1.switch_OnOff_I.u2 = BooleanVariables[5];
  PI_preheater1.switch_OnOff.u2 = BooleanVariables[6];
  PID_preheaterLP4.switch_OnOff_I.u2 = BooleanVariables[7];
  PID_preheaterLP4.switch_OnOff.u2 = BooleanVariables[8];
  PID_preheaterLP3.switch_OnOff_I.u2 = BooleanVariables[9];
  PID_preheaterLP3.switch_OnOff.u2 = BooleanVariables[10];
  PID_NDVW3.switch_OnOff_I.u2 = BooleanVariables[11];
  PID_NDVW3.switch_OnOff.u2 = BooleanVariables[12];
  valve_IP2.pressureLoss.normIsValid = BooleanFixedLocal[1];
  valve_HP.pressureLoss.normIsValid = BooleanFixedLocal[2];
  valveControl_preheater_HP.pressureLoss.normIsValid = BooleanFixedLocal[3];
//alias Declarations
  Turbine_HP1.summary.outline.p_nom = Turbine_HP1.p_nom;
  Turbine_HP1.summary.outline.m_flow_nom = Turbine_HP1.m_flow_nom;
  Turbine_HP1.summary.outline.Pi = Turbine_HP1.Pi;
  Turbine_HP1.summary.outline.rho_nom = Turbine_HP1.rho_nom;
  steamGenerator.liveSteam.'M_i[1]' = steamGenerator.liveSteam.M;
  steamGenerator.reheatedSteam.'M_i[1]' = steamGenerator.reheatedSteam.M;
  Turbine_IP1.summary.outline.p_nom = Turbine_IP1.p_nom;
  Turbine_IP1.summary.outline.m_flow_nom = Turbine_IP1.m_flow_nom;
  Turbine_IP1.summary.outline.Pi = Turbine_IP1.Pi;
  Turbine_IP1.summary.outline.rho_nom = Turbine_IP1.rho_nom;
  Turbine_LP4.summary.outline.p_nom = Turbine_LP4.p_nom;
  Turbine_LP4.summary.outline.m_flow_nom = Turbine_LP4.m_flow_nom;
  Turbine_LP4.summary.outline.Pi = Turbine_LP4.Pi;
  Turbine_LP4.summary.outline.rho_nom = Turbine_LP4.rho_nom;
  condenser.tubes.fluidIn.'M_i[1]' = condenser.tubes.fluidIn.M;
  condenser.tubes.fluidOut.'M_i[1]' = condenser.tubes.fluidOut.M;
  condenser.shell.'fluidIn[1]'.'M_i[1]' = condenser.shell.'fluidIn[1]'.M;
  condenser.shell.'fluidIn[2]'.'M_i[1]' = condenser.shell.'fluidIn[2]'.M;
  condenser.shell.'fluidIn[3]'.'M_i[1]' = condenser.shell.'fluidIn[3]'.M;
  condenser.shell.'fluidOut[1]'.'M_i[1]' = condenser.shell.'fluidOut[1]'.M;
  feedWaterTank.volume.'fluidIn[1]'.'M_i[1]' = feedWaterTank.volume.'fluidIn[1]'.M;
  feedWaterTank.volume.'fluidIn[2]'.'M_i[1]' = feedWaterTank.volume.'fluidIn[2]'.M;
  feedWaterTank.volume.'fluidIn[3]'.'M_i[1]' = feedWaterTank.volume.'fluidIn[3]'.M;
  feedWaterTank.volume.'fluidOut[1]'.'M_i[1]' = feedWaterTank.volume.'fluidOut[1]'.M;
  feedWaterTank.volume.'fluidOut[2]'.'M_i[1]' = feedWaterTank.volume.'fluidOut[2]'.M;
  PI_Pump_cond.y_start_I.y = PI_Pump_cond.I.y_start;
  Turbine_LP1.summary.outline.p_nom = Turbine_LP1.p_nom;
  Turbine_LP1.summary.outline.m_flow_nom = Turbine_LP1.m_flow_nom;
  Turbine_LP1.summary.outline.Pi = Turbine_LP1.Pi;
  Turbine_LP1.summary.outline.rho_nom = Turbine_LP1.rho_nom;
  preheater_HP.tubes.fluidIn.'M_i[1]' = preheater_HP.tubes.fluidIn.M;
  preheater_HP.tubes.fluidOut.'M_i[1]' = preheater_HP.tubes.fluidOut.M;
  preheater_HP.shell.'fluidIn[1]'.'M_i[1]' = preheater_HP.shell.'fluidIn[1]'.M;
  preheater_HP.shell.'fluidIn[2]'.'M_i[1]' = preheater_HP.shell.'fluidIn[2]'.M;
  preheater_HP.shell.'fluidIn[3]'.'M_i[1]' = preheater_HP.shell.'fluidIn[3]'.M;
  preheater_HP.shell.'fluidOut[1]'.'M_i[1]' = preheater_HP.shell.'fluidOut[1]'.M;
  preheater_LP1.tubes.fluidIn.'M_i[1]' = preheater_LP1.tubes.fluidIn.M;
  preheater_LP1.tubes.fluidOut.'M_i[1]' = preheater_LP1.tubes.fluidOut.M;
  preheater_LP1.shell.'fluidIn[1]'.'M_i[1]' = preheater_LP1.shell.'fluidIn[1]'.M;
  preheater_LP1.shell.'fluidIn[2]'.'M_i[1]' = preheater_LP1.shell.'fluidIn[2]'.M;
  preheater_LP1.shell.'fluidIn[3]'.'M_i[1]' = preheater_LP1.shell.'fluidIn[3]'.M;
  preheater_LP1.shell.'fluidOut[1]'.'M_i[1]' = preheater_LP1.shell.'fluidOut[1]'.M;
  INIT.condenser.outlet.h = INIT.condenser.h_out;
  INIT.triple9.steamSignal.h = INIT.condenser.h_out;
  INIT.mixer_condenser.inlet_1.h = INIT.condenser.h_out;
  INIT.condenser.outlet.m_flow = INIT.condenser.m_flow_in;
  INIT.triple9.steamSignal.m_flow = INIT.condenser.m_flow_in;
  INIT.mixer_condenser.inlet_1.m_flow = INIT.condenser.m_flow_in;
  INIT.Pump_cond.outlet.m_flow = INIT.Pump_cond.m_flow;
  INIT.triple19.steamSignal.m_flow = INIT.Pump_cond.m_flow;
  INIT.preheater_LP4.cond_in.m_flow = INIT.Pump_cond.m_flow;
  INIT.Pump_cond.outlet.h = INIT.Pump_cond.h_out;
  INIT.triple19.steamSignal.h = INIT.Pump_cond.h_out;
  INIT.preheater_LP4.cond_in.h = INIT.Pump_cond.h_out;
  INIT.preheater_LP1.cond_in.p = INIT.preheater_LP1.p_cond;
  INIT.preheater_LP2.cond_out.p = INIT.preheater_LP1.p_cond;
  INIT.triple14.steamSignal.p = INIT.preheater_LP1.p_cond;
  INIT.preheater_LP1.cond_out.m_flow = INIT.preheater_LP1.m_flow_cond;
  INIT.valvePreFeedWaterTank.inlet.m_flow = INIT.preheater_LP1.m_flow_cond;
  INIT.triple18.steamSignal.m_flow = INIT.preheater_LP1.m_flow_cond;
  INIT.preheater_LP1.tap_in.m_flow = INIT.preheater_LP1.m_flow_tap;
  INIT.preheater_LP1.tap_out.m_flow = INIT.preheater_LP1.m_flow_tap;
  INIT.pump_preheater_LP1.inlet.m_flow = INIT.preheater_LP1.m_flow_tap;
  INIT.triple17.steamSignal.m_flow = INIT.preheater_LP1.m_flow_tap;
  INIT.valve_IP2.outlet.m_flow = INIT.preheater_LP1.m_flow_tap;
  INIT.triple4.steamSignal.m_flow = INIT.preheater_LP1.m_flow_tap;
  INIT.preheater_LP1.tap_in.p = INIT.preheater_LP1.p_tap;
  INIT.valve_IP2.outlet.p = INIT.preheater_LP1.p_tap;
  INIT.triple4.steamSignal.p = INIT.preheater_LP1.p_tap;
  INIT.preheater_LP1.tap_out.p = INIT.preheater_LP1.p_tap_out;
  INIT.pump_preheater_LP1.inlet.p = INIT.preheater_LP1.p_tap_out;
  INIT.triple17.steamSignal.p = INIT.preheater_LP1.p_tap_out;
  INIT.preheater_LP1.tap_out.h = INIT.preheater_LP1.h_tap_out;
  INIT.pump_preheater_LP1.inlet.h = INIT.preheater_LP1.h_tap_out;
  INIT.triple17.steamSignal.h = INIT.preheater_LP1.h_tap_out;
  INIT.preheater_LP1.cond_out.h = INIT.preheater_LP1.h_cond_out;
  INIT.valvePreFeedWaterTank.inlet.h = INIT.preheater_LP1.h_cond_out;
  INIT.triple18.steamSignal.h = INIT.preheater_LP1.h_cond_out;
  INIT.pump_preheater_LP1.outlet.m_flow = INIT.pump_preheater_LP1.m_flow;
  INIT.join_LP_main.inlet_2.m_flow = INIT.pump_preheater_LP1.m_flow;
  INIT.pump_preheater_LP1.outlet.h = INIT.pump_preheater_LP1.h_out;
  INIT.join_LP_main.inlet_2.h = INIT.pump_preheater_LP1.h_out;
  INIT.valvePreFeedWaterTank.p_in = INIT.preheater_LP1.cond_out.p;
  INIT.valvePreFeedWaterTank.inlet.p = INIT.preheater_LP1.cond_out.p;
  INIT.triple18.steamSignal.p = INIT.preheater_LP1.cond_out.p;
  INIT.valvePreFeedWaterTank.outlet.m_flow = INIT.valvePreFeedWaterTank.m_flow;
  INIT.join_LP_main.inlet_1.m_flow = INIT.valvePreFeedWaterTank.m_flow;
  INIT.valvePreFeedWaterTank.outlet.h = INIT.valvePreFeedWaterTank.h_out;
  INIT.join_LP_main.inlet_1.h = INIT.valvePreFeedWaterTank.h_out;
  INIT.feedwatertank.cond_in.p = INIT.feedwatertank.p_FWT;
  INIT.feedwatertank.tap_in2.p = INIT.feedwatertank.p_FWT;
  INIT.feedwatertank.tap_in1.p = INIT.feedwatertank.p_FWT;
  INIT.join_LP_main.outlet.p = INIT.feedwatertank.p_FWT;
  INIT.valve2_HP.outlet.p = INIT.feedwatertank.p_FWT;
  INIT.valve_IP1.outlet.p = INIT.feedwatertank.p_FWT;
  INIT.triple8.steamSignal.p = INIT.feedwatertank.p_FWT;
  INIT.triple11.steamSignal.p = INIT.feedwatertank.p_FWT;
  INIT.triple20.steamSignal.p = INIT.feedwatertank.p_FWT;
  INIT.feedwatertank.cond_out.p = INIT.feedwatertank.p_FWT_out;
  INIT.downComer_feedWaterTank.inlet.p = INIT.feedwatertank.p_FWT_out;
  INIT.feedwatertank.tap_in2.m_flow = INIT.feedwatertank.m_flow_tap2;
  INIT.valve_IP1.outlet.m_flow = INIT.feedwatertank.m_flow_tap2;
  INIT.triple20.steamSignal.m_flow = INIT.feedwatertank.m_flow_tap2;
  INIT.feedwatertank.cond_out.m_flow = INIT.feedwatertank.m_flow_FW;
  INIT.downComer_feedWaterTank.inlet.m_flow = INIT.feedwatertank.m_flow_FW;
  INIT.feedwatertank.cond_out.h = INIT.feedwatertank.h_cond_out;
  INIT.downComer_feedWaterTank.inlet.h = INIT.feedwatertank.h_cond_out;
  INIT.join_LP_main.h3 = INIT.feedwatertank.cond_in.h;
  INIT.join_LP_main.outlet.h = INIT.feedwatertank.cond_in.h;
  INIT.triple11.steamSignal.h = INIT.feedwatertank.cond_in.h;
  INIT.join_LP_main.m_flow_3 = INIT.feedwatertank.cond_in.m_flow;
  INIT.join_LP_main.outlet.m_flow = INIT.feedwatertank.cond_in.m_flow;
  INIT.triple11.steamSignal.m_flow = INIT.feedwatertank.cond_in.m_flow;
  INIT.pump_preheater_LP1.outlet.p = INIT.join_LP_main.p;
  INIT.valvePreFeedWaterTank.outlet.p = INIT.join_LP_main.p;
  INIT.join_LP_main.inlet_1.p = INIT.join_LP_main.p;
  INIT.join_LP_main.inlet_2.p = INIT.join_LP_main.p;
  INIT.Pump_FW.outlet.m_flow = INIT.Pump_FW.m_flow;
  INIT.preheater_HP.cond_in.m_flow = INIT.Pump_FW.m_flow;
  INIT.triple12.steamSignal.m_flow = INIT.Pump_FW.m_flow;
  INIT.Pump_FW.outlet.h = INIT.Pump_FW.h_out;
  INIT.preheater_HP.cond_in.h = INIT.Pump_FW.h_out;
  INIT.triple12.steamSignal.h = INIT.Pump_FW.h_out;
  INIT.Pump_FW.outlet.p = INIT.preheater_HP.p_cond;
  INIT.preheater_HP.cond_in.p = INIT.preheater_HP.p_cond;
  INIT.triple12.steamSignal.p = INIT.preheater_HP.p_cond;
  INIT.preheater_HP.cond_out.m_flow = INIT.preheater_HP.m_flow_cond;
  INIT.boiler.feedWater.m_flow = INIT.preheater_HP.m_flow_cond;
  INIT.triple13.steamSignal.m_flow = INIT.preheater_HP.m_flow_cond;
  INIT.preheater_HP.tap_in.m_flow = INIT.preheater_HP.m_flow_tap;
  INIT.preheater_HP.tap_out.m_flow = INIT.preheater_HP.m_flow_tap;
  INIT.valve_HP.outlet.m_flow = INIT.preheater_HP.m_flow_tap;
  INIT.valve2_HP.inlet.m_flow = INIT.preheater_HP.m_flow_tap;
  INIT.triple16.steamSignal.m_flow = INIT.preheater_HP.m_flow_tap;
  INIT.preheater_HP.tap_in.p = INIT.preheater_HP.p_tap;
  INIT.valve_HP.outlet.p = INIT.preheater_HP.p_tap;
  INIT.preheater_HP.tap_out.p = INIT.preheater_HP.p_tap_out;
  INIT.valve2_HP.inlet.p = INIT.preheater_HP.p_tap_out;
  INIT.triple16.steamSignal.p = INIT.preheater_HP.p_tap_out;
  INIT.preheater_HP.tap_out.h = INIT.preheater_HP.h_tap_out;
  INIT.valve2_HP.inlet.h = INIT.preheater_HP.h_tap_out;
  INIT.triple16.steamSignal.h = INIT.preheater_HP.h_tap_out;
  INIT.preheater_HP.cond_out.h = INIT.preheater_HP.h_cond_out;
  INIT.boiler.feedWater.h = INIT.preheater_HP.h_cond_out;
  INIT.triple13.steamSignal.h = INIT.preheater_HP.h_cond_out;
  INIT.boiler.hotReheat.m_flow = INIT.boiler.m_flow_cRH;
  INIT.Turbine_IP1.inlet.m_flow = INIT.boiler.m_flow_cRH;
  INIT.triple3.steamSignal.m_flow = INIT.boiler.m_flow_cRH;
  INIT.boiler.liveSteam.h = INIT.boiler.h_LS_out;
  INIT.Turbine_HP.inlet.h = INIT.boiler.h_LS_out;
  INIT.triple2.steamSignal.h = INIT.boiler.h_LS_out;
  INIT.boiler.hotReheat.h = INIT.boiler.h_RS_out;
  INIT.Turbine_IP1.inlet.h = INIT.boiler.h_RS_out;
  INIT.triple3.steamSignal.h = INIT.boiler.h_RS_out;
  INIT.boiler.p_LS_in = INIT.preheater_HP.cond_out.p;
  INIT.boiler.feedWater.p = INIT.preheater_HP.cond_out.p;
  INIT.triple13.steamSignal.p = INIT.preheater_HP.cond_out.p;
  INIT.boiler.liveSteam.p = INIT.boiler.p_LS_out;
  INIT.Turbine_HP.inlet.p = INIT.boiler.p_LS_out;
  INIT.triple2.steamSignal.p = INIT.boiler.p_LS_out;
  INIT.boiler.coldReheat.p = INIT.boiler.p_RS_in;
  INIT.valve_cut.outlet.p = INIT.boiler.p_RS_in;
  INIT.triple32.steamSignal.p = INIT.boiler.p_RS_in;
  INIT.boiler.hotReheat.p = INIT.boiler.p_RS_out;
  INIT.Turbine_IP1.inlet.p = INIT.boiler.p_RS_out;
  INIT.triple3.steamSignal.p = INIT.boiler.p_RS_out;
  INIT.Turbine_HP.inlet.m_flow = INIT.boiler.liveSteam.m_flow;
  INIT.triple2.steamSignal.m_flow = INIT.boiler.liveSteam.m_flow;
  INIT.Turbine_HP.outlet.m_flow = INIT.Turbine_HP.m_flow;
  INIT.join_HP.inlet.m_flow = INIT.Turbine_HP.m_flow;
  INIT.triple.steamSignal.m_flow = INIT.Turbine_HP.m_flow;
  INIT.Turbine_HP.outlet.h = INIT.Turbine_HP.h_out;
  INIT.join_HP.inlet.h = INIT.Turbine_HP.h_out;
  INIT.triple.steamSignal.h = INIT.Turbine_HP.h_out;
  INIT.join_HP.outlet_1.m_flow = INIT.join_HP.m_flow_2;
  INIT.valve_cut.inlet.m_flow = INIT.join_HP.m_flow_2;
  INIT.join_HP.outlet_1.h = INIT.join_HP.h1;
  INIT.join_HP.outlet_2.h = INIT.join_HP.h1;
  INIT.valve_HP.inlet.h = INIT.join_HP.h1;
  INIT.valve_cut.inlet.h = INIT.join_HP.h1;
  INIT.triple15.steamSignal.h = INIT.join_HP.h1;
  INIT.Turbine_HP.outlet.p = INIT.join_HP.p;
  INIT.join_HP.inlet.p = INIT.join_HP.p;
  INIT.join_HP.outlet_1.p = INIT.join_HP.p;
  INIT.valve_cut.inlet.p = INIT.join_HP.p;
  INIT.triple.steamSignal.p = INIT.join_HP.p;
  INIT.valve_HP.p_in = INIT.join_HP.outlet_2.p;
  INIT.valve_HP.inlet.p = INIT.join_HP.outlet_2.p;
  INIT.triple15.steamSignal.p = INIT.join_HP.outlet_2.p;
  INIT.join_HP.outlet_2.m_flow = INIT.valve_HP.m_flow;
  INIT.valve_HP.inlet.m_flow = INIT.valve_HP.m_flow;
  INIT.triple15.steamSignal.m_flow = INIT.valve_HP.m_flow;
  INIT.valve_HP.h_out = INIT.preheater_HP.tap_in.h;
  INIT.valve_HP.outlet.h = INIT.preheater_HP.tap_in.h;
  INIT.boiler.coldReheat.m_flow = INIT.valve_cut.m_flow;
  INIT.valve_cut.outlet.m_flow = INIT.valve_cut.m_flow;
  INIT.triple32.steamSignal.m_flow = INIT.valve_cut.m_flow;
  INIT.valve_cut.h_out = INIT.boiler.coldReheat.h;
  INIT.valve_cut.outlet.h = INIT.boiler.coldReheat.h;
  INIT.triple32.steamSignal.h = INIT.boiler.coldReheat.h;
  INIT.feedwatertank.tap_in1.m_flow = INIT.valve2_HP.m_flow;
  INIT.valve2_HP.outlet.m_flow = INIT.valve2_HP.m_flow;
  INIT.triple8.steamSignal.m_flow = INIT.valve2_HP.m_flow;
  INIT.valve2_HP.h_out = INIT.feedwatertank.tap_in1.h;
  INIT.valve2_HP.outlet.h = INIT.feedwatertank.tap_in1.h;
  INIT.triple8.steamSignal.h = INIT.feedwatertank.tap_in1.h;
  INIT.Turbine_IP1.outlet.m_flow = INIT.Turbine_IP1.m_flow;
  INIT.triple1.steamSignal.m_flow = INIT.Turbine_IP1.m_flow;
  INIT.pressureAnchor_constFlow1_1.inlet.m_flow = INIT.Turbine_IP1.m_flow;
  INIT.Turbine_IP1.outlet.h = INIT.Turbine_IP1.h_out;
  INIT.triple1.steamSignal.h = INIT.Turbine_IP1.h_out;
  INIT.pressureAnchor_constFlow1_1.inlet.h = INIT.Turbine_IP1.h_out;
  INIT.Turbine_LP1.outlet.m_flow = INIT.Turbine_LP1.m_flow;
  INIT.split_LP1.inlet.m_flow = INIT.Turbine_LP1.m_flow;
  INIT.triple5.steamSignal.m_flow = INIT.Turbine_LP1.m_flow;
  INIT.Turbine_LP1.outlet.h = INIT.Turbine_LP1.h_out;
  INIT.split_LP1.inlet.h = INIT.Turbine_LP1.h_out;
  INIT.triple5.steamSignal.h = INIT.Turbine_LP1.h_out;
  INIT.split_LP1.outlet_1.m_flow = INIT.split_LP1.m_flow_2;
  INIT.Turbine_LP2.inlet.m_flow = INIT.split_LP1.m_flow_2;
  INIT.split_LP1.outlet_1.h = INIT.split_LP1.h1;
  INIT.split_LP1.outlet_2.h = INIT.split_LP1.h1;
  INIT.valve_LP1.inlet.h = INIT.split_LP1.h1;
  INIT.Turbine_LP2.inlet.h = INIT.split_LP1.h1;
  INIT.Turbine_LP1.outlet.p = INIT.split_LP1.p;
  INIT.split_LP1.inlet.p = INIT.split_LP1.p;
  INIT.split_LP1.outlet_1.p = INIT.split_LP1.p;
  INIT.triple5.steamSignal.p = INIT.split_LP1.p;
  INIT.Turbine_LP2.inlet.p = INIT.split_LP1.p;
  INIT.valve_IP1.inlet.m_flow = INIT.valve_IP1.m_flow;
  INIT.splitIP2.outlet_2.m_flow = INIT.valve_IP1.m_flow;
  INIT.valve_IP1.h_out = INIT.feedwatertank.tap_in2.h;
  INIT.valve_IP1.outlet.h = INIT.feedwatertank.tap_in2.h;
  INIT.triple20.steamSignal.h = INIT.feedwatertank.tap_in2.h;
  INIT.valve_LP1.p_in = INIT.split_LP1.outlet_2.p;
  INIT.valve_LP1.inlet.p = INIT.split_LP1.outlet_2.p;
  INIT.split_LP1.outlet_2.m_flow = INIT.valve_LP1.m_flow;
  INIT.valve_LP1.inlet.m_flow = INIT.valve_LP1.m_flow;
  INIT.valve_LP1.outlet.h = INIT.valve_LP1.h_out;
  INIT.triple7.steamSignal.h = INIT.valve_LP1.h_out;
  INIT.preheater_LP2.tap_in.h = INIT.valve_LP1.h_out;
  INIT.Turbine_LP4.m_flow = INIT.condenser.inlet.m_flow;
  INIT.Turbine_LP4.outlet.m_flow = INIT.condenser.inlet.m_flow;
  INIT.triple6.steamSignal.m_flow = INIT.condenser.inlet.m_flow;
  INIT.Turbine_LP4.h_out = INIT.condenser.inlet.h;
  INIT.Turbine_LP4.outlet.h = INIT.condenser.inlet.h;
  INIT.triple6.steamSignal.h = INIT.condenser.inlet.h;
  INIT.Turbine_IP2.outlet.m_flow = INIT.Turbine_IP2.m_flow;
  INIT.splitIP2.inlet.m_flow = INIT.Turbine_IP2.m_flow;
  INIT.triple27.steamSignal.m_flow = INIT.Turbine_IP2.m_flow;
  INIT.Turbine_IP2.outlet.h = INIT.Turbine_IP2.h_out;
  INIT.splitIP2.inlet.h = INIT.Turbine_IP2.h_out;
  INIT.triple27.steamSignal.h = INIT.Turbine_IP2.h_out;
  INIT.Turbine_IP3.outlet.m_flow = INIT.Turbine_IP3.m_flow;
  INIT.splitIP3.inlet.m_flow = INIT.Turbine_IP3.m_flow;
  INIT.triple28.steamSignal.m_flow = INIT.Turbine_IP3.m_flow;
  INIT.Turbine_IP3.outlet.h = INIT.Turbine_IP3.h_out;
  INIT.splitIP3.inlet.h = INIT.Turbine_IP3.h_out;
  INIT.triple28.steamSignal.h = INIT.Turbine_IP3.h_out;
  INIT.valve_IP1.inlet.p = INIT.splitIP2.p;
  INIT.Turbine_IP2.outlet.p = INIT.splitIP2.p;
  INIT.Turbine_IP3.inlet.p = INIT.splitIP2.p;
  INIT.splitIP2.inlet.p = INIT.splitIP2.p;
  INIT.splitIP2.outlet_1.p = INIT.splitIP2.p;
  INIT.splitIP2.outlet_2.p = INIT.splitIP2.p;
  INIT.triple27.steamSignal.p = INIT.splitIP2.p;
  INIT.splitIP2.m_flow_2 = INIT.Turbine_IP3.inlet.m_flow;
  INIT.splitIP2.outlet_1.m_flow = INIT.Turbine_IP3.inlet.m_flow;
  INIT.valve_IP1.inlet.h = INIT.splitIP2.h1;
  INIT.Turbine_IP3.inlet.h = INIT.splitIP2.h1;
  INIT.splitIP2.outlet_1.h = INIT.splitIP2.h1;
  INIT.splitIP2.outlet_2.h = INIT.splitIP2.h1;
  INIT.Turbine_LP1.inlet.p = INIT.splitIP3.p;
  INIT.Turbine_IP3.outlet.p = INIT.splitIP3.p;
  INIT.splitIP3.inlet.p = INIT.splitIP3.p;
  INIT.splitIP3.outlet_1.p = INIT.splitIP3.p;
  INIT.splitIP3.outlet_2.p = INIT.splitIP3.p;
  INIT.valve_IP2.inlet.p = INIT.splitIP3.p;
  INIT.triple28.steamSignal.p = INIT.splitIP3.p;
  INIT.splitIP3.m_flow_2 = INIT.Turbine_LP1.inlet.m_flow;
  INIT.splitIP3.outlet_1.m_flow = INIT.Turbine_LP1.inlet.m_flow;
  INIT.Turbine_LP1.inlet.h = INIT.splitIP3.h1;
  INIT.splitIP3.outlet_1.h = INIT.splitIP3.h1;
  INIT.splitIP3.outlet_2.h = INIT.splitIP3.h1;
  INIT.valve_IP2.inlet.h = INIT.splitIP3.h1;
  INIT.Turbine_IP1.outlet.p = INIT.pressureAnchor_constFlow1_1.p;
  INIT.triple1.steamSignal.p = INIT.pressureAnchor_constFlow1_1.p;
  INIT.Turbine_IP2.inlet.p = INIT.pressureAnchor_constFlow1_1.p;
  INIT.pressureAnchor_constFlow1_1.outlet.p = INIT.pressureAnchor_constFlow1_1.p;
  INIT.pressureAnchor_constFlow1_1.inlet.p = INIT.pressureAnchor_constFlow1_1.p;
  INIT.Turbine_IP2.inlet.m_flow = INIT.pressureAnchor_constFlow1_1.m_flow;
  INIT.pressureAnchor_constFlow1_1.outlet.m_flow = INIT.pressureAnchor_constFlow1_1.m_flow;
  INIT.pressureAnchor_constFlow1_1.h_out = INIT.Turbine_IP2.inlet.h;
  INIT.pressureAnchor_constFlow1_1.outlet.h = INIT.Turbine_IP2.inlet.h;
  INIT.Turbine_LP3.outlet.m_flow = INIT.Turbine_LP3.m_flow;
  INIT.split_LP3.inlet.m_flow = INIT.Turbine_LP3.m_flow;
  INIT.triple25.steamSignal.m_flow = INIT.Turbine_LP3.m_flow;
  INIT.Turbine_LP3.outlet.h = INIT.Turbine_LP3.h_out;
  INIT.split_LP3.inlet.h = INIT.Turbine_LP3.h_out;
  INIT.triple25.steamSignal.h = INIT.Turbine_LP3.h_out;
  INIT.Turbine_LP2.outlet.m_flow = INIT.Turbine_LP2.m_flow;
  INIT.split_LP2.inlet.m_flow = INIT.Turbine_LP2.m_flow;
  INIT.triple26.steamSignal.m_flow = INIT.Turbine_LP2.m_flow;
  INIT.Turbine_LP2.outlet.h = INIT.Turbine_LP2.h_out;
  INIT.split_LP2.inlet.h = INIT.Turbine_LP2.h_out;
  INIT.triple26.steamSignal.h = INIT.Turbine_LP2.h_out;
  INIT.valve2.outlet.m_flow = INIT.valve2.m_flow;
  INIT.mixerIP2.inlet_1.m_flow = INIT.valve2.m_flow;
  INIT.triple30.steamSignal.m_flow = INIT.valve2.m_flow;
  INIT.valve2.outlet.h = INIT.valve2.h_out;
  INIT.mixerIP2.inlet_1.h = INIT.valve2.h_out;
  INIT.triple30.steamSignal.h = INIT.valve2.h_out;
  INIT.mixerIP2.inlet_2.m_flow = INIT.mixerIP2.m_flow_2;
  INIT.valve_LP2.outlet.m_flow = INIT.mixerIP2.m_flow_2;
  INIT.triple22.steamSignal.m_flow = INIT.mixerIP2.m_flow_2;
  INIT.mixerIP2.outlet.h = INIT.mixerIP2.h3;
  INIT.preheater_LP3.tap_in.h = INIT.mixerIP2.h3;
  INIT.valve2.outlet.p = INIT.mixerIP2.p;
  INIT.mixerIP2.inlet_1.p = INIT.mixerIP2.p;
  INIT.mixerIP2.inlet_2.p = INIT.mixerIP2.p;
  INIT.valve_LP2.outlet.p = INIT.mixerIP2.p;
  INIT.triple22.steamSignal.p = INIT.mixerIP2.p;
  INIT.triple30.steamSignal.p = INIT.mixerIP2.p;
  INIT.preheater_LP2.cond_in.p = INIT.preheater_LP2.p_cond;
  INIT.join_preheater_LP3.outlet.p = INIT.preheater_LP2.p_cond;
  INIT.preheater_LP1.cond_in.m_flow = INIT.preheater_LP2.m_flow_cond;
  INIT.preheater_LP2.cond_out.m_flow = INIT.preheater_LP2.m_flow_cond;
  INIT.triple14.steamSignal.m_flow = INIT.preheater_LP2.m_flow_cond;
  INIT.valve_LP1.outlet.m_flow = INIT.preheater_LP2.m_flow_tap;
  INIT.triple7.steamSignal.m_flow = INIT.preheater_LP2.m_flow_tap;
  INIT.valve2.inlet.m_flow = INIT.preheater_LP2.m_flow_tap;
  INIT.preheater_LP2.tap_in.m_flow = INIT.preheater_LP2.m_flow_tap;
  INIT.preheater_LP2.tap_out.m_flow = INIT.preheater_LP2.m_flow_tap;
  INIT.valve_LP1.outlet.p = INIT.preheater_LP2.p_tap;
  INIT.triple7.steamSignal.p = INIT.preheater_LP2.p_tap;
  INIT.preheater_LP2.tap_in.p = INIT.preheater_LP2.p_tap;
  INIT.preheater_LP2.p_tap_out = INIT.valve2.inlet.p;
  INIT.preheater_LP2.tap_out.p = INIT.valve2.inlet.p;
  INIT.preheater_LP2.h_tap_out = INIT.valve2.inlet.h;
  INIT.preheater_LP2.tap_out.h = INIT.valve2.inlet.h;
  INIT.preheater_LP2.h_cond_out = INIT.preheater_LP1.cond_in.h;
  INIT.preheater_LP2.cond_out.h = INIT.preheater_LP1.cond_in.h;
  INIT.triple14.steamSignal.h = INIT.preheater_LP1.cond_in.h;
  INIT.preheater_LP3.cond_in.p = INIT.preheater_LP3.p_cond;
  INIT.preheater_LP4.cond_out.p = INIT.preheater_LP3.p_cond;
  INIT.triple24.steamSignal.p = INIT.preheater_LP3.p_cond;
  INIT.preheater_LP3.cond_out.m_flow = INIT.preheater_LP3.m_flow_cond;
  INIT.join_preheater_LP3.inlet_1.m_flow = INIT.preheater_LP3.m_flow_cond;
  INIT.triple21.steamSignal.m_flow = INIT.preheater_LP3.m_flow_cond;
  INIT.mixerIP2.outlet.m_flow = INIT.preheater_LP3.m_flow_tap;
  INIT.preheater_LP3.tap_in.m_flow = INIT.preheater_LP3.m_flow_tap;
  INIT.preheater_LP3.tap_out.m_flow = INIT.preheater_LP3.m_flow_tap;
  INIT.pump_preheater_LP3.inlet.m_flow = INIT.preheater_LP3.m_flow_tap;
  INIT.mixerIP2.outlet.p = INIT.preheater_LP3.p_tap;
  INIT.preheater_LP3.tap_in.p = INIT.preheater_LP3.p_tap;
  INIT.preheater_LP3.tap_out.p = INIT.preheater_LP3.p_tap_out;
  INIT.pump_preheater_LP3.inlet.p = INIT.preheater_LP3.p_tap_out;
  INIT.preheater_LP3.tap_out.h = INIT.preheater_LP3.h_tap_out;
  INIT.pump_preheater_LP3.inlet.h = INIT.preheater_LP3.h_tap_out;
  INIT.preheater_LP3.cond_out.h = INIT.preheater_LP3.h_cond_out;
  INIT.join_preheater_LP3.inlet_1.h = INIT.preheater_LP3.h_cond_out;
  INIT.triple21.steamSignal.h = INIT.preheater_LP3.h_cond_out;
  INIT.Pump_cond.outlet.p = INIT.preheater_LP4.p_cond;
  INIT.triple19.steamSignal.p = INIT.preheater_LP4.p_cond;
  INIT.preheater_LP4.cond_in.p = INIT.preheater_LP4.p_cond;
  INIT.preheater_LP3.cond_in.m_flow = INIT.preheater_LP4.m_flow_cond;
  INIT.preheater_LP4.cond_out.m_flow = INIT.preheater_LP4.m_flow_cond;
  INIT.triple24.steamSignal.m_flow = INIT.preheater_LP4.m_flow_cond;
  INIT.preheater_LP4.tap_in.m_flow = INIT.preheater_LP4.m_flow_tap;
  INIT.preheater_LP4.tap_out.m_flow = INIT.preheater_LP4.m_flow_tap;
  INIT.valve_LP3.outlet.m_flow = INIT.preheater_LP4.m_flow_tap;
  INIT.valve_cutPressureLP4.inlet.m_flow = INIT.preheater_LP4.m_flow_tap;
  INIT.triple23.steamSignal.m_flow = INIT.preheater_LP4.m_flow_tap;
  INIT.preheater_LP4.tap_in.p = INIT.preheater_LP4.p_tap;
  INIT.valve_LP3.outlet.p = INIT.preheater_LP4.p_tap;
  INIT.triple23.steamSignal.p = INIT.preheater_LP4.p_tap;
  INIT.preheater_LP4.tap_out.p = INIT.preheater_LP4.p_tap_out;
  INIT.valve_cutPressureLP4.inlet.p = INIT.preheater_LP4.p_tap_out;
  INIT.preheater_LP4.tap_out.h = INIT.preheater_LP4.h_tap_out;
  INIT.valve_cutPressureLP4.inlet.h = INIT.preheater_LP4.h_tap_out;
  INIT.preheater_LP4.h_cond_out = INIT.preheater_LP3.cond_in.h;
  INIT.preheater_LP4.cond_out.h = INIT.preheater_LP3.cond_in.h;
  INIT.triple24.steamSignal.h = INIT.preheater_LP3.cond_in.h;
  INIT.splitIP3.outlet_2.m_flow = INIT.valve_IP2.m_flow;
  INIT.valve_IP2.inlet.m_flow = INIT.valve_IP2.m_flow;
  INIT.valve_IP2.h_out = INIT.preheater_LP1.tap_in.h;
  INIT.valve_IP2.outlet.h = INIT.preheater_LP1.tap_in.h;
  INIT.triple4.steamSignal.h = INIT.preheater_LP1.tap_in.h;
  INIT.split_LP2.m_flow_2 = INIT.Turbine_LP3.inlet.m_flow;
  INIT.split_LP2.outlet_1.m_flow = INIT.Turbine_LP3.inlet.m_flow;
  INIT.Turbine_LP3.inlet.h = INIT.split_LP2.h1;
  INIT.split_LP2.outlet_1.h = INIT.split_LP2.h1;
  INIT.split_LP2.outlet_2.h = INIT.split_LP2.h1;
  INIT.valve_LP2.inlet.h = INIT.split_LP2.h1;
  INIT.Turbine_LP3.inlet.p = INIT.split_LP2.p;
  INIT.Turbine_LP2.outlet.p = INIT.split_LP2.p;
  INIT.split_LP2.inlet.p = INIT.split_LP2.p;
  INIT.split_LP2.outlet_1.p = INIT.split_LP2.p;
  INIT.triple26.steamSignal.p = INIT.split_LP2.p;
  INIT.split_LP3.m_flow_2 = INIT.Turbine_LP4.inlet.m_flow;
  INIT.split_LP3.outlet_1.m_flow = INIT.Turbine_LP4.inlet.m_flow;
  INIT.Turbine_LP4.inlet.h = INIT.split_LP3.h1;
  INIT.split_LP3.outlet_1.h = INIT.split_LP3.h1;
  INIT.split_LP3.outlet_2.h = INIT.split_LP3.h1;
  INIT.valve_LP3.inlet.h = INIT.split_LP3.h1;
  INIT.Turbine_LP4.inlet.p = INIT.split_LP3.p;
  INIT.Turbine_LP3.outlet.p = INIT.split_LP3.p;
  INIT.split_LP3.inlet.p = INIT.split_LP3.p;
  INIT.split_LP3.outlet_1.p = INIT.split_LP3.p;
  INIT.triple25.steamSignal.p = INIT.split_LP3.p;
  INIT.valve_LP2.p_in = INIT.split_LP2.outlet_2.p;
  INIT.valve_LP2.inlet.p = INIT.split_LP2.outlet_2.p;
  INIT.split_LP2.outlet_2.m_flow = INIT.valve_LP2.m_flow;
  INIT.valve_LP2.inlet.m_flow = INIT.valve_LP2.m_flow;
  INIT.valve_LP2.h_out = INIT.mixerIP2.inlet_2.h;
  INIT.valve_LP2.outlet.h = INIT.mixerIP2.inlet_2.h;
  INIT.triple22.steamSignal.h = INIT.mixerIP2.inlet_2.h;
  INIT.valve_LP3.p_in = INIT.split_LP3.outlet_2.p;
  INIT.valve_LP3.inlet.p = INIT.split_LP3.outlet_2.p;
  INIT.split_LP3.outlet_2.m_flow = INIT.valve_LP3.m_flow;
  INIT.valve_LP3.inlet.m_flow = INIT.valve_LP3.m_flow;
  INIT.valve_LP3.h_out = INIT.preheater_LP4.tap_in.h;
  INIT.valve_LP3.outlet.h = INIT.preheater_LP4.tap_in.h;
  INIT.triple23.steamSignal.h = INIT.preheater_LP4.tap_in.h;
  INIT.pump_preheater_LP3.outlet.m_flow = INIT.pump_preheater_LP3.m_flow;
  INIT.join_preheater_LP3.inlet_2.m_flow = INIT.pump_preheater_LP3.m_flow;
  INIT.triple29.steamSignal.m_flow = INIT.pump_preheater_LP3.m_flow;
  INIT.pump_preheater_LP3.outlet.h = INIT.pump_preheater_LP3.h_out;
  INIT.join_preheater_LP3.inlet_2.h = INIT.pump_preheater_LP3.h_out;
  INIT.triple29.steamSignal.h = INIT.pump_preheater_LP3.h_out;
  INIT.join_preheater_LP3.h3 = INIT.preheater_LP2.cond_in.h;
  INIT.join_preheater_LP3.outlet.h = INIT.preheater_LP2.cond_in.h;
  INIT.join_preheater_LP3.m_flow_3 = INIT.preheater_LP2.cond_in.m_flow;
  INIT.join_preheater_LP3.outlet.m_flow = INIT.preheater_LP2.cond_in.m_flow;
  INIT.preheater_LP3.cond_out.p = INIT.join_preheater_LP3.p;
  INIT.pump_preheater_LP3.outlet.p = INIT.join_preheater_LP3.p;
  INIT.join_preheater_LP3.inlet_1.p = INIT.join_preheater_LP3.p;
  INIT.join_preheater_LP3.inlet_2.p = INIT.join_preheater_LP3.p;
  INIT.triple21.steamSignal.p = INIT.join_preheater_LP3.p;
  INIT.triple29.steamSignal.p = INIT.join_preheater_LP3.p;
  INIT.valve_cutPressureLP4.outlet.m_flow = INIT.valve_cutPressureLP4.m_flow;
  INIT.mixer_condenser.inlet_2.m_flow = INIT.valve_cutPressureLP4.m_flow;
  INIT.triple31.steamSignal.m_flow = INIT.valve_cutPressureLP4.m_flow;
  INIT.valve_cutPressureLP4.outlet.h = INIT.valve_cutPressureLP4.h_out;
  INIT.mixer_condenser.inlet_2.h = INIT.valve_cutPressureLP4.h_out;
  INIT.triple31.steamSignal.h = INIT.valve_cutPressureLP4.h_out;
  INIT.mixer_condenser.h3 = INIT.Pump_cond.inlet.h;
  INIT.mixer_condenser.outlet.h = INIT.Pump_cond.inlet.h;
  INIT.mixer_condenser.m_flow_3 = INIT.Pump_cond.inlet.m_flow;
  INIT.mixer_condenser.outlet.m_flow = INIT.Pump_cond.inlet.m_flow;
  INIT.Pump_cond.inlet.p = INIT.mixer_condenser.p;
  INIT.valve_cutPressureLP4.outlet.p = INIT.mixer_condenser.p;
  INIT.mixer_condenser.inlet_2.p = INIT.mixer_condenser.p;
  INIT.mixer_condenser.outlet.p = INIT.mixer_condenser.p;
  INIT.triple31.steamSignal.p = INIT.mixer_condenser.p;
  INIT.Pump_FW.inlet.m_flow = INIT.downComer_feedWaterTank.m_flow;
  INIT.triple10.steamSignal.m_flow = INIT.downComer_feedWaterTank.m_flow;
  INIT.downComer_feedWaterTank.outlet.m_flow = INIT.downComer_feedWaterTank.m_flow;
  INIT.triple10.steamSignal.p = INIT.Pump_FW.inlet.p;
  INIT.downComer_feedWaterTank.p_out = INIT.Pump_FW.inlet.p;
  INIT.downComer_feedWaterTank.outlet.p = INIT.Pump_FW.inlet.p;
  INIT.Pump_FW.inlet.h = INIT.downComer_feedWaterTank.h_in;
  INIT.triple10.steamSignal.h = INIT.downComer_feedWaterTank.h_in;
  INIT.downComer_feedWaterTank.outlet.h = INIT.downComer_feedWaterTank.h_in;
  PI_preheater1.y_start_I.y = PI_preheater1.I.y_start;
  NOM.condenser.outlet.h = NOM.condenser.h_out;
  NOM.triple9.steamSignal.h = NOM.condenser.h_out;
  NOM.mixer_condenser.inlet_1.h = NOM.condenser.h_out;
  NOM.condenser.outlet.m_flow = NOM.condenser.m_flow_in;
  NOM.triple9.steamSignal.m_flow = NOM.condenser.m_flow_in;
  NOM.mixer_condenser.inlet_1.m_flow = NOM.condenser.m_flow_in;
  NOM.Pump_cond.outlet.m_flow = NOM.Pump_cond.m_flow;
  NOM.triple19.steamSignal.m_flow = NOM.Pump_cond.m_flow;
  NOM.preheater_LP4.cond_in.m_flow = NOM.Pump_cond.m_flow;
  NOM.Pump_cond.outlet.h = NOM.Pump_cond.h_out;
  NOM.triple19.steamSignal.h = NOM.Pump_cond.h_out;
  NOM.preheater_LP4.cond_in.h = NOM.Pump_cond.h_out;
  NOM.preheater_LP1.cond_in.p = NOM.preheater_LP1.p_cond;
  NOM.preheater_LP2.cond_out.p = NOM.preheater_LP1.p_cond;
  NOM.triple14.steamSignal.p = NOM.preheater_LP1.p_cond;
  NOM.preheater_LP1.cond_out.m_flow = NOM.preheater_LP1.m_flow_cond;
  NOM.valvePreFeedWaterTank.inlet.m_flow = NOM.preheater_LP1.m_flow_cond;
  NOM.triple18.steamSignal.m_flow = NOM.preheater_LP1.m_flow_cond;
  NOM.preheater_LP1.tap_in.m_flow = NOM.preheater_LP1.m_flow_tap;
  NOM.preheater_LP1.tap_out.m_flow = NOM.preheater_LP1.m_flow_tap;
  NOM.pump_preheater_LP1.inlet.m_flow = NOM.preheater_LP1.m_flow_tap;
  NOM.triple17.steamSignal.m_flow = NOM.preheater_LP1.m_flow_tap;
  NOM.valve_IP2.outlet.m_flow = NOM.preheater_LP1.m_flow_tap;
  NOM.triple4.steamSignal.m_flow = NOM.preheater_LP1.m_flow_tap;
  NOM.preheater_LP1.tap_in.p = NOM.preheater_LP1.p_tap;
  NOM.valve_IP2.outlet.p = NOM.preheater_LP1.p_tap;
  NOM.triple4.steamSignal.p = NOM.preheater_LP1.p_tap;
  NOM.preheater_LP1.tap_out.p = NOM.preheater_LP1.p_tap_out;
  NOM.pump_preheater_LP1.inlet.p = NOM.preheater_LP1.p_tap_out;
  NOM.triple17.steamSignal.p = NOM.preheater_LP1.p_tap_out;
  NOM.preheater_LP1.tap_out.h = NOM.preheater_LP1.h_tap_out;
  NOM.pump_preheater_LP1.inlet.h = NOM.preheater_LP1.h_tap_out;
  NOM.triple17.steamSignal.h = NOM.preheater_LP1.h_tap_out;
  NOM.preheater_LP1.cond_out.h = NOM.preheater_LP1.h_cond_out;
  NOM.valvePreFeedWaterTank.inlet.h = NOM.preheater_LP1.h_cond_out;
  NOM.triple18.steamSignal.h = NOM.preheater_LP1.h_cond_out;
  NOM.pump_preheater_LP1.outlet.m_flow = NOM.pump_preheater_LP1.m_flow;
  NOM.join_LP_main.inlet_2.m_flow = NOM.pump_preheater_LP1.m_flow;
  NOM.pump_preheater_LP1.outlet.h = NOM.pump_preheater_LP1.h_out;
  NOM.join_LP_main.inlet_2.h = NOM.pump_preheater_LP1.h_out;
  NOM.valvePreFeedWaterTank.p_in = NOM.preheater_LP1.cond_out.p;
  NOM.valvePreFeedWaterTank.inlet.p = NOM.preheater_LP1.cond_out.p;
  NOM.triple18.steamSignal.p = NOM.preheater_LP1.cond_out.p;
  NOM.valvePreFeedWaterTank.outlet.m_flow = NOM.valvePreFeedWaterTank.m_flow;
  NOM.join_LP_main.inlet_1.m_flow = NOM.valvePreFeedWaterTank.m_flow;
  NOM.valvePreFeedWaterTank.outlet.h = NOM.valvePreFeedWaterTank.h_out;
  NOM.join_LP_main.inlet_1.h = NOM.valvePreFeedWaterTank.h_out;
  NOM.feedwatertank.tap_in2.m_flow = NOM.feedwatertank.m_flow_tap2;
  NOM.valve_IP1.outlet.m_flow = NOM.feedwatertank.m_flow_tap2;
  NOM.triple20.steamSignal.m_flow = NOM.feedwatertank.m_flow_tap2;
  NOM.feedwatertank.cond_out.h = NOM.feedwatertank.h_cond_out;
  NOM.downComer_feedWaterTank.inlet.h = NOM.feedwatertank.h_cond_out;
  NOM.join_LP_main.h3 = NOM.feedwatertank.cond_in.h;
  NOM.join_LP_main.outlet.h = NOM.feedwatertank.cond_in.h;
  NOM.triple11.steamSignal.h = NOM.feedwatertank.cond_in.h;
  NOM.join_LP_main.m_flow_3 = NOM.feedwatertank.cond_in.m_flow;
  NOM.join_LP_main.outlet.m_flow = NOM.feedwatertank.cond_in.m_flow;
  NOM.triple11.steamSignal.m_flow = NOM.feedwatertank.cond_in.m_flow;
  NOM.pump_preheater_LP1.outlet.p = NOM.join_LP_main.p;
  NOM.valvePreFeedWaterTank.outlet.p = NOM.join_LP_main.p;
  NOM.join_LP_main.inlet_1.p = NOM.join_LP_main.p;
  NOM.join_LP_main.inlet_2.p = NOM.join_LP_main.p;
  NOM.Pump_FW.outlet.m_flow = NOM.Pump_FW.m_flow;
  NOM.preheater_HP.cond_in.m_flow = NOM.Pump_FW.m_flow;
  NOM.triple12.steamSignal.m_flow = NOM.Pump_FW.m_flow;
  NOM.Pump_FW.outlet.h = NOM.Pump_FW.h_out;
  NOM.preheater_HP.cond_in.h = NOM.Pump_FW.h_out;
  NOM.triple12.steamSignal.h = NOM.Pump_FW.h_out;
  NOM.Pump_FW.outlet.p = NOM.preheater_HP.p_cond;
  NOM.preheater_HP.cond_in.p = NOM.preheater_HP.p_cond;
  NOM.triple12.steamSignal.p = NOM.preheater_HP.p_cond;
  NOM.preheater_HP.cond_out.m_flow = NOM.preheater_HP.m_flow_cond;
  NOM.boiler.feedWater.m_flow = NOM.preheater_HP.m_flow_cond;
  NOM.triple13.steamSignal.m_flow = NOM.preheater_HP.m_flow_cond;
  NOM.preheater_HP.tap_in.m_flow = NOM.preheater_HP.m_flow_tap;
  NOM.preheater_HP.tap_out.m_flow = NOM.preheater_HP.m_flow_tap;
  NOM.valve_HP.outlet.m_flow = NOM.preheater_HP.m_flow_tap;
  NOM.valve2_HP.inlet.m_flow = NOM.preheater_HP.m_flow_tap;
  NOM.triple16.steamSignal.m_flow = NOM.preheater_HP.m_flow_tap;
  NOM.preheater_HP.tap_in.p = NOM.preheater_HP.p_tap;
  NOM.valve_HP.outlet.p = NOM.preheater_HP.p_tap;
  NOM.preheater_HP.tap_out.p = NOM.preheater_HP.p_tap_out;
  NOM.valve2_HP.inlet.p = NOM.preheater_HP.p_tap_out;
  NOM.triple16.steamSignal.p = NOM.preheater_HP.p_tap_out;
  NOM.preheater_HP.tap_out.h = NOM.preheater_HP.h_tap_out;
  NOM.valve2_HP.inlet.h = NOM.preheater_HP.h_tap_out;
  NOM.triple16.steamSignal.h = NOM.preheater_HP.h_tap_out;
  NOM.preheater_HP.cond_out.h = NOM.preheater_HP.h_cond_out;
  NOM.boiler.feedWater.h = NOM.preheater_HP.h_cond_out;
  NOM.triple13.steamSignal.h = NOM.preheater_HP.h_cond_out;
  NOM.boiler.hotReheat.m_flow = NOM.boiler.m_flow_cRH;
  NOM.Turbine_IP1.inlet.m_flow = NOM.boiler.m_flow_cRH;
  NOM.triple3.steamSignal.m_flow = NOM.boiler.m_flow_cRH;
  NOM.boiler.liveSteam.h = NOM.boiler.h_LS_out;
  NOM.Turbine_HP.inlet.h = NOM.boiler.h_LS_out;
  NOM.triple2.steamSignal.h = NOM.boiler.h_LS_out;
  NOM.boiler.hotReheat.h = NOM.boiler.h_RS_out;
  NOM.Turbine_IP1.inlet.h = NOM.boiler.h_RS_out;
  NOM.triple3.steamSignal.h = NOM.boiler.h_RS_out;
  NOM.boiler.p_LS_in = NOM.preheater_HP.cond_out.p;
  NOM.boiler.feedWater.p = NOM.preheater_HP.cond_out.p;
  NOM.triple13.steamSignal.p = NOM.preheater_HP.cond_out.p;
  NOM.boiler.coldReheat.p = NOM.boiler.p_RS_in;
  NOM.valve_cut.outlet.p = NOM.boiler.p_RS_in;
  NOM.triple32.steamSignal.p = NOM.boiler.p_RS_in;
  NOM.Turbine_HP.outlet.m_flow = NOM.Turbine_HP.m_flow;
  NOM.join_HP.inlet.m_flow = NOM.Turbine_HP.m_flow;
  NOM.triple.steamSignal.m_flow = NOM.Turbine_HP.m_flow;
  NOM.Turbine_HP.outlet.h = NOM.Turbine_HP.h_out;
  NOM.join_HP.inlet.h = NOM.Turbine_HP.h_out;
  NOM.triple.steamSignal.h = NOM.Turbine_HP.h_out;
  NOM.join_HP.outlet_1.m_flow = NOM.join_HP.m_flow_2;
  NOM.valve_cut.inlet.m_flow = NOM.join_HP.m_flow_2;
  NOM.join_HP.outlet_1.h = NOM.join_HP.h1;
  NOM.join_HP.outlet_2.h = NOM.join_HP.h1;
  NOM.valve_HP.inlet.h = NOM.join_HP.h1;
  NOM.valve_cut.inlet.h = NOM.join_HP.h1;
  NOM.triple15.steamSignal.h = NOM.join_HP.h1;
  NOM.Turbine_HP.outlet.p = NOM.join_HP.p;
  NOM.join_HP.inlet.p = NOM.join_HP.p;
  NOM.join_HP.outlet_1.p = NOM.join_HP.p;
  NOM.valve_cut.inlet.p = NOM.join_HP.p;
  NOM.triple.steamSignal.p = NOM.join_HP.p;
  NOM.valve_HP.p_in = NOM.join_HP.outlet_2.p;
  NOM.valve_HP.inlet.p = NOM.join_HP.outlet_2.p;
  NOM.triple15.steamSignal.p = NOM.join_HP.outlet_2.p;
  NOM.join_HP.outlet_2.m_flow = NOM.valve_HP.m_flow;
  NOM.valve_HP.inlet.m_flow = NOM.valve_HP.m_flow;
  NOM.triple15.steamSignal.m_flow = NOM.valve_HP.m_flow;
  NOM.valve_HP.h_out = NOM.preheater_HP.tap_in.h;
  NOM.valve_HP.outlet.h = NOM.preheater_HP.tap_in.h;
  NOM.boiler.coldReheat.m_flow = NOM.valve_cut.m_flow;
  NOM.valve_cut.outlet.m_flow = NOM.valve_cut.m_flow;
  NOM.triple32.steamSignal.m_flow = NOM.valve_cut.m_flow;
  NOM.valve_cut.h_out = NOM.boiler.coldReheat.h;
  NOM.valve_cut.outlet.h = NOM.boiler.coldReheat.h;
  NOM.triple32.steamSignal.h = NOM.boiler.coldReheat.h;
  NOM.feedwatertank.tap_in1.m_flow = NOM.valve2_HP.m_flow;
  NOM.valve2_HP.outlet.m_flow = NOM.valve2_HP.m_flow;
  NOM.triple8.steamSignal.m_flow = NOM.valve2_HP.m_flow;
  NOM.valve2_HP.h_out = NOM.feedwatertank.tap_in1.h;
  NOM.valve2_HP.outlet.h = NOM.feedwatertank.tap_in1.h;
  NOM.triple8.steamSignal.h = NOM.feedwatertank.tap_in1.h;
  NOM.Turbine_IP1.outlet.m_flow = NOM.Turbine_IP1.m_flow;
  NOM.triple1.steamSignal.m_flow = NOM.Turbine_IP1.m_flow;
  NOM.pressureAnchor_constFlow1_1.inlet.m_flow = NOM.Turbine_IP1.m_flow;
  NOM.Turbine_IP1.outlet.h = NOM.Turbine_IP1.h_out;
  NOM.triple1.steamSignal.h = NOM.Turbine_IP1.h_out;
  NOM.pressureAnchor_constFlow1_1.inlet.h = NOM.Turbine_IP1.h_out;
  NOM.Turbine_LP1.outlet.m_flow = NOM.Turbine_LP1.m_flow;
  NOM.split_LP1.inlet.m_flow = NOM.Turbine_LP1.m_flow;
  NOM.triple5.steamSignal.m_flow = NOM.Turbine_LP1.m_flow;
  NOM.Turbine_LP1.outlet.h = NOM.Turbine_LP1.h_out;
  NOM.split_LP1.inlet.h = NOM.Turbine_LP1.h_out;
  NOM.triple5.steamSignal.h = NOM.Turbine_LP1.h_out;
  NOM.split_LP1.outlet_1.m_flow = NOM.split_LP1.m_flow_2;
  NOM.Turbine_LP2.inlet.m_flow = NOM.split_LP1.m_flow_2;
  NOM.split_LP1.outlet_1.h = NOM.split_LP1.h1;
  NOM.split_LP1.outlet_2.h = NOM.split_LP1.h1;
  NOM.valve_LP1.inlet.h = NOM.split_LP1.h1;
  NOM.Turbine_LP2.inlet.h = NOM.split_LP1.h1;
  NOM.Turbine_LP1.outlet.p = NOM.split_LP1.p;
  NOM.split_LP1.inlet.p = NOM.split_LP1.p;
  NOM.split_LP1.outlet_1.p = NOM.split_LP1.p;
  NOM.triple5.steamSignal.p = NOM.split_LP1.p;
  NOM.Turbine_LP2.inlet.p = NOM.split_LP1.p;
  NOM.valve_IP1.inlet.m_flow = NOM.valve_IP1.m_flow;
  NOM.splitIP2.outlet_2.m_flow = NOM.valve_IP1.m_flow;
  NOM.valve_IP1.h_out = NOM.feedwatertank.tap_in2.h;
  NOM.valve_IP1.outlet.h = NOM.feedwatertank.tap_in2.h;
  NOM.triple20.steamSignal.h = NOM.feedwatertank.tap_in2.h;
  NOM.valve_LP1.p_in = NOM.split_LP1.outlet_2.p;
  NOM.valve_LP1.inlet.p = NOM.split_LP1.outlet_2.p;
  NOM.split_LP1.outlet_2.m_flow = NOM.valve_LP1.m_flow;
  NOM.valve_LP1.inlet.m_flow = NOM.valve_LP1.m_flow;
  NOM.valve_LP1.outlet.h = NOM.valve_LP1.h_out;
  NOM.triple7.steamSignal.h = NOM.valve_LP1.h_out;
  NOM.preheater_LP2.tap_in.h = NOM.valve_LP1.h_out;
  NOM.Turbine_LP4.m_flow = NOM.condenser.inlet.m_flow;
  NOM.Turbine_LP4.outlet.m_flow = NOM.condenser.inlet.m_flow;
  NOM.triple6.steamSignal.m_flow = NOM.condenser.inlet.m_flow;
  NOM.Turbine_LP4.h_out = NOM.condenser.inlet.h;
  NOM.Turbine_LP4.outlet.h = NOM.condenser.inlet.h;
  NOM.triple6.steamSignal.h = NOM.condenser.inlet.h;
  NOM.Turbine_IP2.outlet.m_flow = NOM.Turbine_IP2.m_flow;
  NOM.splitIP2.inlet.m_flow = NOM.Turbine_IP2.m_flow;
  NOM.triple27.steamSignal.m_flow = NOM.Turbine_IP2.m_flow;
  NOM.Turbine_IP2.outlet.h = NOM.Turbine_IP2.h_out;
  NOM.splitIP2.inlet.h = NOM.Turbine_IP2.h_out;
  NOM.triple27.steamSignal.h = NOM.Turbine_IP2.h_out;
  NOM.Turbine_IP3.outlet.m_flow = NOM.Turbine_IP3.m_flow;
  NOM.splitIP3.inlet.m_flow = NOM.Turbine_IP3.m_flow;
  NOM.triple28.steamSignal.m_flow = NOM.Turbine_IP3.m_flow;
  NOM.Turbine_IP3.outlet.h = NOM.Turbine_IP3.h_out;
  NOM.splitIP3.inlet.h = NOM.Turbine_IP3.h_out;
  NOM.triple28.steamSignal.h = NOM.Turbine_IP3.h_out;
  NOM.valve_IP1.inlet.p = NOM.splitIP2.p;
  NOM.Turbine_IP2.outlet.p = NOM.splitIP2.p;
  NOM.Turbine_IP3.inlet.p = NOM.splitIP2.p;
  NOM.splitIP2.inlet.p = NOM.splitIP2.p;
  NOM.splitIP2.outlet_1.p = NOM.splitIP2.p;
  NOM.splitIP2.outlet_2.p = NOM.splitIP2.p;
  NOM.triple27.steamSignal.p = NOM.splitIP2.p;
  NOM.splitIP2.m_flow_2 = NOM.Turbine_IP3.inlet.m_flow;
  NOM.splitIP2.outlet_1.m_flow = NOM.Turbine_IP3.inlet.m_flow;
  NOM.valve_IP1.inlet.h = NOM.splitIP2.h1;
  NOM.Turbine_IP3.inlet.h = NOM.splitIP2.h1;
  NOM.splitIP2.outlet_1.h = NOM.splitIP2.h1;
  NOM.splitIP2.outlet_2.h = NOM.splitIP2.h1;
  NOM.Turbine_LP1.inlet.p = NOM.splitIP3.p;
  NOM.Turbine_IP3.outlet.p = NOM.splitIP3.p;
  NOM.splitIP3.inlet.p = NOM.splitIP3.p;
  NOM.splitIP3.outlet_1.p = NOM.splitIP3.p;
  NOM.splitIP3.outlet_2.p = NOM.splitIP3.p;
  NOM.valve_IP2.inlet.p = NOM.splitIP3.p;
  NOM.triple28.steamSignal.p = NOM.splitIP3.p;
  NOM.splitIP3.m_flow_2 = NOM.Turbine_LP1.inlet.m_flow;
  NOM.splitIP3.outlet_1.m_flow = NOM.Turbine_LP1.inlet.m_flow;
  NOM.Turbine_LP1.inlet.h = NOM.splitIP3.h1;
  NOM.splitIP3.outlet_1.h = NOM.splitIP3.h1;
  NOM.splitIP3.outlet_2.h = NOM.splitIP3.h1;
  NOM.valve_IP2.inlet.h = NOM.splitIP3.h1;
  NOM.Turbine_IP1.outlet.p = NOM.pressureAnchor_constFlow1_1.p;
  NOM.triple1.steamSignal.p = NOM.pressureAnchor_constFlow1_1.p;
  NOM.Turbine_IP2.inlet.p = NOM.pressureAnchor_constFlow1_1.p;
  NOM.pressureAnchor_constFlow1_1.outlet.p = NOM.pressureAnchor_constFlow1_1.p;
  NOM.pressureAnchor_constFlow1_1.inlet.p = NOM.pressureAnchor_constFlow1_1.p;
  NOM.Turbine_IP2.inlet.m_flow = NOM.pressureAnchor_constFlow1_1.m_flow;
  NOM.pressureAnchor_constFlow1_1.outlet.m_flow = NOM.pressureAnchor_constFlow1_1.m_flow;
  NOM.pressureAnchor_constFlow1_1.h_out = NOM.Turbine_IP2.inlet.h;
  NOM.pressureAnchor_constFlow1_1.outlet.h = NOM.Turbine_IP2.inlet.h;
  NOM.Turbine_LP3.outlet.m_flow = NOM.Turbine_LP3.m_flow;
  NOM.split_LP3.inlet.m_flow = NOM.Turbine_LP3.m_flow;
  NOM.triple25.steamSignal.m_flow = NOM.Turbine_LP3.m_flow;
  NOM.Turbine_LP3.outlet.h = NOM.Turbine_LP3.h_out;
  NOM.split_LP3.inlet.h = NOM.Turbine_LP3.h_out;
  NOM.triple25.steamSignal.h = NOM.Turbine_LP3.h_out;
  NOM.Turbine_LP2.outlet.m_flow = NOM.Turbine_LP2.m_flow;
  NOM.split_LP2.inlet.m_flow = NOM.Turbine_LP2.m_flow;
  NOM.triple26.steamSignal.m_flow = NOM.Turbine_LP2.m_flow;
  NOM.Turbine_LP2.outlet.h = NOM.Turbine_LP2.h_out;
  NOM.split_LP2.inlet.h = NOM.Turbine_LP2.h_out;
  NOM.triple26.steamSignal.h = NOM.Turbine_LP2.h_out;
  NOM.valve2.outlet.m_flow = NOM.valve2.m_flow;
  NOM.mixerIP2.inlet_1.m_flow = NOM.valve2.m_flow;
  NOM.triple30.steamSignal.m_flow = NOM.valve2.m_flow;
  NOM.valve2.outlet.h = NOM.valve2.h_out;
  NOM.mixerIP2.inlet_1.h = NOM.valve2.h_out;
  NOM.triple30.steamSignal.h = NOM.valve2.h_out;
  NOM.mixerIP2.inlet_2.m_flow = NOM.mixerIP2.m_flow_2;
  NOM.valve_LP2.outlet.m_flow = NOM.mixerIP2.m_flow_2;
  NOM.triple22.steamSignal.m_flow = NOM.mixerIP2.m_flow_2;
  NOM.mixerIP2.outlet.h = NOM.mixerIP2.h3;
  NOM.preheater_LP3.tap_in.h = NOM.mixerIP2.h3;
  NOM.valve2.outlet.p = NOM.mixerIP2.p;
  NOM.mixerIP2.inlet_1.p = NOM.mixerIP2.p;
  NOM.mixerIP2.inlet_2.p = NOM.mixerIP2.p;
  NOM.valve_LP2.outlet.p = NOM.mixerIP2.p;
  NOM.triple22.steamSignal.p = NOM.mixerIP2.p;
  NOM.triple30.steamSignal.p = NOM.mixerIP2.p;
  NOM.preheater_LP2.cond_in.p = NOM.preheater_LP2.p_cond;
  NOM.join_preheater_LP3.outlet.p = NOM.preheater_LP2.p_cond;
  NOM.preheater_LP1.cond_in.m_flow = NOM.preheater_LP2.m_flow_cond;
  NOM.preheater_LP2.cond_out.m_flow = NOM.preheater_LP2.m_flow_cond;
  NOM.triple14.steamSignal.m_flow = NOM.preheater_LP2.m_flow_cond;
  NOM.valve_LP1.outlet.m_flow = NOM.preheater_LP2.m_flow_tap;
  NOM.triple7.steamSignal.m_flow = NOM.preheater_LP2.m_flow_tap;
  NOM.valve2.inlet.m_flow = NOM.preheater_LP2.m_flow_tap;
  NOM.preheater_LP2.tap_in.m_flow = NOM.preheater_LP2.m_flow_tap;
  NOM.preheater_LP2.tap_out.m_flow = NOM.preheater_LP2.m_flow_tap;
  NOM.valve_LP1.outlet.p = NOM.preheater_LP2.p_tap;
  NOM.triple7.steamSignal.p = NOM.preheater_LP2.p_tap;
  NOM.preheater_LP2.tap_in.p = NOM.preheater_LP2.p_tap;
  NOM.preheater_LP2.p_tap_out = NOM.valve2.inlet.p;
  NOM.preheater_LP2.tap_out.p = NOM.valve2.inlet.p;
  NOM.preheater_LP2.h_tap_out = NOM.valve2.inlet.h;
  NOM.preheater_LP2.tap_out.h = NOM.valve2.inlet.h;
  NOM.preheater_LP2.h_cond_out = NOM.preheater_LP1.cond_in.h;
  NOM.preheater_LP2.cond_out.h = NOM.preheater_LP1.cond_in.h;
  NOM.triple14.steamSignal.h = NOM.preheater_LP1.cond_in.h;
  NOM.preheater_LP3.cond_in.p = NOM.preheater_LP3.p_cond;
  NOM.preheater_LP4.cond_out.p = NOM.preheater_LP3.p_cond;
  NOM.triple24.steamSignal.p = NOM.preheater_LP3.p_cond;
  NOM.preheater_LP3.cond_out.m_flow = NOM.preheater_LP3.m_flow_cond;
  NOM.join_preheater_LP3.inlet_1.m_flow = NOM.preheater_LP3.m_flow_cond;
  NOM.triple21.steamSignal.m_flow = NOM.preheater_LP3.m_flow_cond;
  NOM.mixerIP2.outlet.m_flow = NOM.preheater_LP3.m_flow_tap;
  NOM.preheater_LP3.tap_in.m_flow = NOM.preheater_LP3.m_flow_tap;
  NOM.preheater_LP3.tap_out.m_flow = NOM.preheater_LP3.m_flow_tap;
  NOM.pump_preheater_LP3.inlet.m_flow = NOM.preheater_LP3.m_flow_tap;
  NOM.mixerIP2.outlet.p = NOM.preheater_LP3.p_tap;
  NOM.preheater_LP3.tap_in.p = NOM.preheater_LP3.p_tap;
  NOM.preheater_LP3.tap_out.p = NOM.preheater_LP3.p_tap_out;
  NOM.pump_preheater_LP3.inlet.p = NOM.preheater_LP3.p_tap_out;
  NOM.preheater_LP3.tap_out.h = NOM.preheater_LP3.h_tap_out;
  NOM.pump_preheater_LP3.inlet.h = NOM.preheater_LP3.h_tap_out;
  NOM.preheater_LP3.cond_out.h = NOM.preheater_LP3.h_cond_out;
  NOM.join_preheater_LP3.inlet_1.h = NOM.preheater_LP3.h_cond_out;
  NOM.triple21.steamSignal.h = NOM.preheater_LP3.h_cond_out;
  NOM.Pump_cond.outlet.p = NOM.preheater_LP4.p_cond;
  NOM.triple19.steamSignal.p = NOM.preheater_LP4.p_cond;
  NOM.preheater_LP4.cond_in.p = NOM.preheater_LP4.p_cond;
  NOM.preheater_LP3.cond_in.m_flow = NOM.preheater_LP4.m_flow_cond;
  NOM.preheater_LP4.cond_out.m_flow = NOM.preheater_LP4.m_flow_cond;
  NOM.triple24.steamSignal.m_flow = NOM.preheater_LP4.m_flow_cond;
  NOM.preheater_LP4.tap_in.m_flow = NOM.preheater_LP4.m_flow_tap;
  NOM.preheater_LP4.tap_out.m_flow = NOM.preheater_LP4.m_flow_tap;
  NOM.valve_LP3.outlet.m_flow = NOM.preheater_LP4.m_flow_tap;
  NOM.valve_cutPressureLP4.inlet.m_flow = NOM.preheater_LP4.m_flow_tap;
  NOM.triple23.steamSignal.m_flow = NOM.preheater_LP4.m_flow_tap;
  NOM.preheater_LP4.tap_in.p = NOM.preheater_LP4.p_tap;
  NOM.valve_LP3.outlet.p = NOM.preheater_LP4.p_tap;
  NOM.triple23.steamSignal.p = NOM.preheater_LP4.p_tap;
  NOM.preheater_LP4.tap_out.p = NOM.preheater_LP4.p_tap_out;
  NOM.valve_cutPressureLP4.inlet.p = NOM.preheater_LP4.p_tap_out;
  NOM.preheater_LP4.tap_out.h = NOM.preheater_LP4.h_tap_out;
  NOM.valve_cutPressureLP4.inlet.h = NOM.preheater_LP4.h_tap_out;
  NOM.preheater_LP4.h_cond_out = NOM.preheater_LP3.cond_in.h;
  NOM.preheater_LP4.cond_out.h = NOM.preheater_LP3.cond_in.h;
  NOM.triple24.steamSignal.h = NOM.preheater_LP3.cond_in.h;
  NOM.splitIP3.outlet_2.m_flow = NOM.valve_IP2.m_flow;
  NOM.valve_IP2.inlet.m_flow = NOM.valve_IP2.m_flow;
  NOM.valve_IP2.h_out = NOM.preheater_LP1.tap_in.h;
  NOM.valve_IP2.outlet.h = NOM.preheater_LP1.tap_in.h;
  NOM.triple4.steamSignal.h = NOM.preheater_LP1.tap_in.h;
  NOM.split_LP2.m_flow_2 = NOM.Turbine_LP3.inlet.m_flow;
  NOM.split_LP2.outlet_1.m_flow = NOM.Turbine_LP3.inlet.m_flow;
  NOM.Turbine_LP3.inlet.h = NOM.split_LP2.h1;
  NOM.split_LP2.outlet_1.h = NOM.split_LP2.h1;
  NOM.split_LP2.outlet_2.h = NOM.split_LP2.h1;
  NOM.valve_LP2.inlet.h = NOM.split_LP2.h1;
  NOM.Turbine_LP3.inlet.p = NOM.split_LP2.p;
  NOM.Turbine_LP2.outlet.p = NOM.split_LP2.p;
  NOM.split_LP2.inlet.p = NOM.split_LP2.p;
  NOM.split_LP2.outlet_1.p = NOM.split_LP2.p;
  NOM.triple26.steamSignal.p = NOM.split_LP2.p;
  NOM.split_LP3.m_flow_2 = NOM.Turbine_LP4.inlet.m_flow;
  NOM.split_LP3.outlet_1.m_flow = NOM.Turbine_LP4.inlet.m_flow;
  NOM.Turbine_LP4.inlet.h = NOM.split_LP3.h1;
  NOM.split_LP3.outlet_1.h = NOM.split_LP3.h1;
  NOM.split_LP3.outlet_2.h = NOM.split_LP3.h1;
  NOM.valve_LP3.inlet.h = NOM.split_LP3.h1;
  NOM.Turbine_LP4.inlet.p = NOM.split_LP3.p;
  NOM.Turbine_LP3.outlet.p = NOM.split_LP3.p;
  NOM.split_LP3.inlet.p = NOM.split_LP3.p;
  NOM.split_LP3.outlet_1.p = NOM.split_LP3.p;
  NOM.triple25.steamSignal.p = NOM.split_LP3.p;
  NOM.valve_LP2.p_in = NOM.split_LP2.outlet_2.p;
  NOM.valve_LP2.inlet.p = NOM.split_LP2.outlet_2.p;
  NOM.split_LP2.outlet_2.m_flow = NOM.valve_LP2.m_flow;
  NOM.valve_LP2.inlet.m_flow = NOM.valve_LP2.m_flow;
  NOM.valve_LP2.h_out = NOM.mixerIP2.inlet_2.h;
  NOM.valve_LP2.outlet.h = NOM.mixerIP2.inlet_2.h;
  NOM.triple22.steamSignal.h = NOM.mixerIP2.inlet_2.h;
  NOM.valve_LP3.p_in = NOM.split_LP3.outlet_2.p;
  NOM.valve_LP3.inlet.p = NOM.split_LP3.outlet_2.p;
  NOM.split_LP3.outlet_2.m_flow = NOM.valve_LP3.m_flow;
  NOM.valve_LP3.inlet.m_flow = NOM.valve_LP3.m_flow;
  NOM.valve_LP3.h_out = NOM.preheater_LP4.tap_in.h;
  NOM.valve_LP3.outlet.h = NOM.preheater_LP4.tap_in.h;
  NOM.triple23.steamSignal.h = NOM.preheater_LP4.tap_in.h;
  NOM.pump_preheater_LP3.outlet.m_flow = NOM.pump_preheater_LP3.m_flow;
  NOM.join_preheater_LP3.inlet_2.m_flow = NOM.pump_preheater_LP3.m_flow;
  NOM.triple29.steamSignal.m_flow = NOM.pump_preheater_LP3.m_flow;
  NOM.pump_preheater_LP3.outlet.h = NOM.pump_preheater_LP3.h_out;
  NOM.join_preheater_LP3.inlet_2.h = NOM.pump_preheater_LP3.h_out;
  NOM.triple29.steamSignal.h = NOM.pump_preheater_LP3.h_out;
  NOM.join_preheater_LP3.h3 = NOM.preheater_LP2.cond_in.h;
  NOM.join_preheater_LP3.outlet.h = NOM.preheater_LP2.cond_in.h;
  NOM.join_preheater_LP3.m_flow_3 = NOM.preheater_LP2.cond_in.m_flow;
  NOM.join_preheater_LP3.outlet.m_flow = NOM.preheater_LP2.cond_in.m_flow;
  NOM.preheater_LP3.cond_out.p = NOM.join_preheater_LP3.p;
  NOM.pump_preheater_LP3.outlet.p = NOM.join_preheater_LP3.p;
  NOM.join_preheater_LP3.inlet_1.p = NOM.join_preheater_LP3.p;
  NOM.join_preheater_LP3.inlet_2.p = NOM.join_preheater_LP3.p;
  NOM.triple21.steamSignal.p = NOM.join_preheater_LP3.p;
  NOM.triple29.steamSignal.p = NOM.join_preheater_LP3.p;
  NOM.valve_cutPressureLP4.outlet.m_flow = NOM.valve_cutPressureLP4.m_flow;
  NOM.mixer_condenser.inlet_2.m_flow = NOM.valve_cutPressureLP4.m_flow;
  NOM.triple31.steamSignal.m_flow = NOM.valve_cutPressureLP4.m_flow;
  NOM.valve_cutPressureLP4.outlet.h = NOM.valve_cutPressureLP4.h_out;
  NOM.mixer_condenser.inlet_2.h = NOM.valve_cutPressureLP4.h_out;
  NOM.triple31.steamSignal.h = NOM.valve_cutPressureLP4.h_out;
  NOM.mixer_condenser.h3 = NOM.Pump_cond.inlet.h;
  NOM.mixer_condenser.outlet.h = NOM.Pump_cond.inlet.h;
  NOM.mixer_condenser.m_flow_3 = NOM.Pump_cond.inlet.m_flow;
  NOM.mixer_condenser.outlet.m_flow = NOM.Pump_cond.inlet.m_flow;
  NOM.Pump_cond.inlet.p = NOM.mixer_condenser.p;
  NOM.valve_cutPressureLP4.outlet.p = NOM.mixer_condenser.p;
  NOM.mixer_condenser.inlet_2.p = NOM.mixer_condenser.p;
  NOM.mixer_condenser.outlet.p = NOM.mixer_condenser.p;
  NOM.triple31.steamSignal.p = NOM.mixer_condenser.p;
  NOM.Pump_FW.inlet.m_flow = NOM.downComer_feedWaterTank.m_flow;
  NOM.triple10.steamSignal.m_flow = NOM.downComer_feedWaterTank.m_flow;
  NOM.downComer_feedWaterTank.outlet.m_flow = NOM.downComer_feedWaterTank.m_flow;
  NOM.triple10.steamSignal.p = NOM.Pump_FW.inlet.p;
  NOM.downComer_feedWaterTank.p_out = NOM.Pump_FW.inlet.p;
  NOM.downComer_feedWaterTank.outlet.p = NOM.Pump_FW.inlet.p;
  NOM.Pump_FW.inlet.h = NOM.downComer_feedWaterTank.h_in;
  NOM.triple10.steamSignal.h = NOM.downComer_feedWaterTank.h_in;
  NOM.downComer_feedWaterTank.outlet.h = NOM.downComer_feedWaterTank.h_in;
  Turbine_IP3.summary.outline.p_nom = Turbine_IP3.p_nom;
  Turbine_IP3.summary.outline.m_flow_nom = Turbine_IP3.m_flow_nom;
  Turbine_IP3.summary.outline.Pi = Turbine_IP3.Pi;
  Turbine_IP3.summary.outline.rho_nom = Turbine_IP3.rho_nom;
  Turbine_IP2.summary.outline.p_nom = Turbine_IP2.p_nom;
  Turbine_IP2.summary.outline.m_flow_nom = Turbine_IP2.m_flow_nom;
  Turbine_IP2.summary.outline.Pi = Turbine_IP2.Pi;
  Turbine_IP2.summary.outline.rho_nom = Turbine_IP2.rho_nom;
  Turbine_LP3.summary.outline.p_nom = Turbine_LP3.p_nom;
  Turbine_LP3.summary.outline.m_flow_nom = Turbine_LP3.m_flow_nom;
  Turbine_LP3.summary.outline.Pi = Turbine_LP3.Pi;
  Turbine_LP3.summary.outline.rho_nom = Turbine_LP3.rho_nom;
  Turbine_LP2.summary.outline.p_nom = Turbine_LP2.p_nom;
  Turbine_LP2.summary.outline.m_flow_nom = Turbine_LP2.m_flow_nom;
  Turbine_LP2.summary.outline.Pi = Turbine_LP2.Pi;
  Turbine_LP2.summary.outline.rho_nom = Turbine_LP2.rho_nom;
  preheater_LP2.tubes.fluidIn.'M_i[1]' = preheater_LP2.tubes.fluidIn.M;
  preheater_LP2.tubes.fluidOut.'M_i[1]' = preheater_LP2.tubes.fluidOut.M;
  preheater_LP2.shell.'fluidIn[1]'.'M_i[1]' = preheater_LP2.shell.'fluidIn[1]'.M;
  preheater_LP2.shell.'fluidIn[2]'.'M_i[1]' = preheater_LP2.shell.'fluidIn[2]'.M;
  preheater_LP2.shell.'fluidIn[3]'.'M_i[1]' = preheater_LP2.shell.'fluidIn[3]'.M;
  preheater_LP2.shell.'fluidOut[1]'.'M_i[1]' = preheater_LP2.shell.'fluidOut[1]'.M;
  preheater_LP3.tubes.fluidIn.'M_i[1]' = preheater_LP3.tubes.fluidIn.M;
  preheater_LP3.tubes.fluidOut.'M_i[1]' = preheater_LP3.tubes.fluidOut.M;
  preheater_LP3.shell.'fluidIn[1]'.'M_i[1]' = preheater_LP3.shell.'fluidIn[1]'.M;
  preheater_LP3.shell.'fluidIn[2]'.'M_i[1]' = preheater_LP3.shell.'fluidIn[2]'.M;
  preheater_LP3.shell.'fluidIn[3]'.'M_i[1]' = preheater_LP3.shell.'fluidIn[3]'.M;
  preheater_LP3.shell.'fluidOut[1]'.'M_i[1]' = preheater_LP3.shell.'fluidOut[1]'.M;
  preheater_LP4.tubes.fluidIn.'M_i[1]' = preheater_LP4.tubes.fluidIn.M;
  preheater_LP4.tubes.fluidOut.'M_i[1]' = preheater_LP4.tubes.fluidOut.M;
  preheater_LP4.shell.'fluidIn[1]'.'M_i[1]' = preheater_LP4.shell.'fluidIn[1]'.M;
  preheater_LP4.shell.'fluidIn[2]'.'M_i[1]' = preheater_LP4.shell.'fluidIn[2]'.M;
  preheater_LP4.shell.'fluidIn[3]'.'M_i[1]' = preheater_LP4.shell.'fluidIn[3]'.M;
  preheater_LP4.shell.'fluidOut[1]'.'M_i[1]' = preheater_LP4.shell.'fluidOut[1]'.M;
  PID_preheaterLP3.y_start_I.y = PID_preheaterLP3.I.y_start;
  steamGenerator.reheat_out.p = steamGenerator.p_IP;
  steamGenerator.reheatedSteam.p = steamGenerator.p_IP;
  Turbine_IP1.p_in = steamGenerator.p_IP;
  Turbine_IP1.inlet.p = steamGenerator.p_IP;
  Turbine_IP1.summary.inlet.p = steamGenerator.p_IP;
  Turbine_HP1.p_in = steamGenerator.p_HP;
  Turbine_HP1.inlet.p = steamGenerator.p_HP;
  Turbine_HP1.summary.inlet.p = steamGenerator.p_HP;
  steamGenerator.livesteam.p = steamGenerator.p_HP;
  steamGenerator.liveSteam.p = steamGenerator.p_HP;
  steamGenerator.heatRelease.y = steamGenerator.heatRelease.'x_scaled[2]';
  steamGenerator.heatRelease.'x[2]' = steamGenerator.heatRelease.'x_scaled[2]';
  steamGenerator.convert2HPFiring.'u[1]' = steamGenerator.heatRelease.'x_scaled[2]';
  steamGenerator.calculateEfficiency.'u[1]' = steamGenerator.heatRelease.'x_scaled[2]';
  condenser.In2.p = condenser.tubes.p;
  condenser.Out2.p = condenser.tubes.p;
  condenser.tubes.inlet.p = condenser.tubes.p;
  condenser.tubes.outlet.p = condenser.tubes.p;
  condenser.tubes.summary.inlet.p = condenser.tubes.p;
  condenser.tubes.summary.outlet.p = condenser.tubes.p;
  condenser.tubes.summary.fluid.p = condenser.tubes.p;
  condenser.tubes.fluidIn.p = condenser.tubes.p;
  condenser.tubes.fluidOut.p = condenser.tubes.p;
  boundaryVLE_Txim_flow.steam_a.p = condenser.tubes.p;
  valveControl_preheater_LP1.inlet.p = condenser.tubes.p;
  valveControl_preheater_LP1.summary.inlet.p = condenser.tubes.p;
  condenser.In2.h_outflow = condenser.tubes.h;
  condenser.Out2.h_outflow = condenser.tubes.h;
  condenser.tubes.inlet.h_outflow = condenser.tubes.h;
  condenser.tubes.outlet.h_outflow = condenser.tubes.h;
  condenser.tubes.summary.fluid.h = condenser.tubes.h;
  condenser.tubes.phaseBorder.h_inflow = condenser.tubes.h;
  condenser.tubes.phaseBorder.h_outflow = condenser.tubes.h;
  valveControl_preheater_LP1.outlet.h_outflow = condenser.tubes.h;
  condenser.shell.summary.fluid.'h[1]' = condenser.shell.h_liq;
  condenser.shell.summary.fluid.'h[2]' = condenser.shell.h_vap;
  condenser.shell.summary.outline.'volume[2]' = condenser.shell.volume_vap;
  condenser.shell.p_liq = condenser.shell.p_vap;
  condenser.shell.summary.fluid.'p[1]' = condenser.shell.p_vap;
  condenser.shell.summary.fluid.'p[2]' = condenser.shell.p_vap;
  condenser.wall.summary.'U[1]' = condenser.wall.'U[1]';
  condenser.wall.summary.'U[2]' = condenser.wall.'U[2]';
  condenser.wall.summary.'U[3]' = condenser.wall.'U[3]';
  feedWaterTank.volume.summary.fluid.'h[1]' = feedWaterTank.volume.h_liq;
  feedWaterTank.volume.summary.fluid.'h[2]' = feedWaterTank.volume.h_vap;
  feedWaterTank.volume.summary.outline.'volume[2]' = feedWaterTank.volume.volume_vap;
  feedWaterTank.volume.p_liq = feedWaterTank.volume.p_vap;
  feedWaterTank.volume.summary.fluid.'p[1]' = feedWaterTank.volume.p_vap;
  feedWaterTank.volume.summary.fluid.'p[2]' = feedWaterTank.volume.p_vap;
  feedWaterTank.wall.summary.'U[1]' = feedWaterTank.wall.'U[1]';
  feedWaterTank.wall.summary.'U[2]' = feedWaterTank.wall.'U[2]';
  feedWaterTank.wall.summary.'U[3]' = feedWaterTank.wall.'U[3]';
  PI_Pump_cond.resetP.u2 = PI_Pump_cond.resetValueP;
  PI_Pump_cond.y_unlocked1.y = PI_Pump_cond.resetValueP;
  PI_Pump_cond.resetPD.u2 = PI_Pump_cond.resetValueID;
  PI_Pump_cond.y_unlocked2.y = PI_Pump_cond.resetValueID;
  PI_Pump_cond.addPID.u3 = PI_Pump_cond.I.y;
  Turbine_LP1.inlet.h_outflow = join_LP1.h;
  join_LP1.summary.fluid.h = join_LP1.h;
  join_LP1.inlet.h_outflow = join_LP1.h;
  join_LP1.outlet1.h_outflow = join_LP1.h;
  join_LP1.outlet2.h_outflow = join_LP1.h;
  Turbine_LP2.summary.inlet.h = join_LP1.h;
  valve_LP1.outlet.h_outflow = join_LP1.h;
  valve_LP1.summary.inlet.h = join_LP1.h;
  valve_LP1.summary.outlet.h = join_LP1.h;
  Turbine_LP1.p_out = join_LP1.p;
  Turbine_LP1.outlet.p = join_LP1.p;
  Turbine_LP1.summary.outlet.p = join_LP1.p;
  join_LP1.summary.inlet.p = join_LP1.p;
  join_LP1.summary.outlet1.p = join_LP1.p;
  join_LP1.summary.outlet2.p = join_LP1.p;
  join_LP1.summary.fluid.p = join_LP1.p;
  join_LP1.inlet.p = join_LP1.p;
  join_LP1.outlet1.p = join_LP1.p;
  join_LP1.outlet2.p = join_LP1.p;
  Turbine_LP2.p_in = join_LP1.p;
  Turbine_LP2.inlet.p = join_LP1.p;
  Turbine_LP2.summary.inlet.p = join_LP1.p;
  valve_LP1.inlet.p = join_LP1.p;
  valve_LP1.summary.inlet.p = join_LP1.p;
  Turbine_HP1.inlet.h_outflow = join_HP.h;
  join_HP.summary.fluid.h = join_HP.h;
  join_HP.inlet.h_outflow = join_HP.h;
  join_HP.outlet1.h_outflow = join_HP.h;
  join_HP.outlet2.h_outflow = join_HP.h;
  valve_HP.outlet.h_outflow = join_HP.h;
  Turbine_HP1.p_out = join_HP.p;
  Turbine_HP1.outlet.p = join_HP.p;
  Turbine_HP1.summary.outlet.p = join_HP.p;
  steamGenerator.reheat_in.p = join_HP.p;
  join_HP.summary.inlet.p = join_HP.p;
  join_HP.summary.outlet1.p = join_HP.p;
  join_HP.summary.outlet2.p = join_HP.p;
  join_HP.summary.fluid.p = join_HP.p;
  join_HP.inlet.p = join_HP.p;
  join_HP.outlet1.p = join_HP.p;
  join_HP.outlet2.p = join_HP.p;
  valve_HP.inlet.p = join_HP.p;
  valve_HP.summary.inlet.p = join_HP.p;
  steamGenerator.feedwater.p = preheater_HP.tubes.p;
  preheater_HP.Out2.p = preheater_HP.tubes.p;
  preheater_HP.tubes.outlet.p = preheater_HP.tubes.p;
  preheater_HP.tubes.summary.outlet.p = preheater_HP.tubes.p;
  preheater_HP.tubes.summary.fluid.p = preheater_HP.tubes.p;
  preheater_HP.tubes.fluidOut.p = preheater_HP.tubes.p;
  statePoint.p = preheater_HP.tubes.p;
  statePoint.port.p = preheater_HP.tubes.p;
  Pump_FW.inlet.h_outflow = preheater_HP.tubes.h;
  preheater_HP.In2.h_outflow = preheater_HP.tubes.h;
  preheater_HP.Out2.h_outflow = preheater_HP.tubes.h;
  preheater_HP.tubes.inlet.h_outflow = preheater_HP.tubes.h;
  preheater_HP.tubes.outlet.h_outflow = preheater_HP.tubes.h;
  preheater_HP.tubes.summary.fluid.h = preheater_HP.tubes.h;
  preheater_HP.tubes.phaseBorder.h_inflow = preheater_HP.tubes.h;
  preheater_HP.tubes.phaseBorder.h_outflow = preheater_HP.tubes.h;
  preheater_HP.shell.summary.fluid.'h[1]' = preheater_HP.shell.h_liq;
  preheater_HP.shell.summary.fluid.'h[2]' = preheater_HP.shell.h_vap;
  preheater_HP.shell.summary.outline.'volume[2]' = preheater_HP.shell.volume_vap;
  preheater_HP.shell.p_liq = preheater_HP.shell.p_vap;
  preheater_HP.shell.summary.fluid.'p[1]' = preheater_HP.shell.p_vap;
  preheater_HP.shell.summary.fluid.'p[2]' = preheater_HP.shell.p_vap;
  preheater_HP.wall.summary.'U[1]' = preheater_HP.wall.'U[1]';
  preheater_HP.wall.summary.'U[2]' = preheater_HP.wall.'U[2]';
  preheater_HP.wall.summary.'U[3]' = preheater_HP.wall.'U[3]';
  preheater_LP1.Out2.p = preheater_LP1.tubes.p;
  preheater_LP1.tubes.outlet.p = preheater_LP1.tubes.p;
  preheater_LP1.tubes.summary.outlet.p = preheater_LP1.tubes.p;
  preheater_LP1.tubes.summary.fluid.p = preheater_LP1.tubes.p;
  preheater_LP1.tubes.fluidOut.p = preheater_LP1.tubes.p;
  valvePreFeedWaterTank.inlet.p = preheater_LP1.tubes.p;
  valvePreFeedWaterTank.summary.inlet.p = preheater_LP1.tubes.p;
  preheater_LP1.In2.h_outflow = preheater_LP1.tubes.h;
  preheater_LP1.Out2.h_outflow = preheater_LP1.tubes.h;
  preheater_LP1.tubes.inlet.h_outflow = preheater_LP1.tubes.h;
  preheater_LP1.tubes.outlet.h_outflow = preheater_LP1.tubes.h;
  preheater_LP1.tubes.summary.fluid.h = preheater_LP1.tubes.h;
  preheater_LP1.tubes.phaseBorder.h_inflow = preheater_LP1.tubes.h;
  preheater_LP1.tubes.phaseBorder.h_outflow = preheater_LP1.tubes.h;
  valvePreFeedWaterTank.outlet.h_outflow = preheater_LP1.tubes.h;
  preheater_LP1.shell.summary.fluid.'h[1]' = preheater_LP1.shell.h_liq;
  preheater_LP1.shell.summary.fluid.'h[2]' = preheater_LP1.shell.h_vap;
  preheater_LP1.shell.summary.outline.'volume[2]' = preheater_LP1.shell.volume_vap;
  preheater_LP1.shell.p_liq = preheater_LP1.shell.p_vap;
  preheater_LP1.shell.summary.fluid.'p[1]' = preheater_LP1.shell.p_vap;
  preheater_LP1.shell.summary.fluid.'p[2]' = preheater_LP1.shell.p_vap;
  preheater_LP1.wall.summary.'U[1]' = preheater_LP1.wall.'U[1]';
  preheater_LP1.wall.summary.'U[2]' = preheater_LP1.wall.'U[2]';
  preheater_LP1.wall.summary.'U[3]' = preheater_LP1.wall.'U[3]';
  PI_valveControl_preheater_HP.resetP.u2 = PI_valveControl_preheater_HP.resetValueP;
  PI_valveControl_preheater_HP.y_unlocked1.y = PI_valveControl_preheater_HP.resetValueP;
  PI_valveControl_preheater_HP.resetPD.u2 = PI_valveControl_preheater_HP.resetValueID;
  PI_valveControl_preheater_HP.y_unlocked2.y = PI_valveControl_preheater_HP.resetValueID;
  PI_valveControl_preheater_HP.addPID.u3 = PI_valveControl_preheater_HP.I.y;
  PI_Pump_cond.u_m = measurement.y;
  PI_Pump_cond.feedback.u2 = measurement.y;
  Pump_preheater_LP1.inlet.h_outflow = join_LP_main.h;
  valvePreFeedWaterTank.inlet.h_outflow = join_LP_main.h;
  join_LP_main.summary.fluid.h = join_LP_main.h;
  join_LP_main.inlet1.h_outflow = join_LP_main.h;
  join_LP_main.outlet.h_outflow = join_LP_main.h;
  join_LP_main.inlet2.h_outflow = join_LP_main.h;
  Pump_preheater_LP1.outlet.p = join_LP_main.p;
  Pump_preheater_LP1.summary.outlet.p = join_LP_main.p;
  valvePreFeedWaterTank.outlet.p = join_LP_main.p;
  valvePreFeedWaterTank.summary.outlet.p = join_LP_main.p;
  join_LP_main.summary.inlet1.p = join_LP_main.p;
  join_LP_main.summary.inlet2.p = join_LP_main.p;
  join_LP_main.summary.fluid.p = join_LP_main.p;
  join_LP_main.inlet1.p = join_LP_main.p;
  join_LP_main.inlet2.p = join_LP_main.p;
  PI_preheater1.resetP.u2 = PI_preheater1.resetValueP;
  PI_preheater1.y_unlocked1.y = PI_preheater1.resetValueP;
  PI_preheater1.resetPD.u2 = PI_preheater1.resetValueID;
  PI_preheater1.y_unlocked2.y = PI_preheater1.resetValueID;
  PI_preheater1.addPID.u3 = PI_preheater1.I.y;
  Turbine_IP1.inlet.h_outflow = split_IP2.h;
  valve_IP1.outlet.h_outflow = split_IP2.h;
  valve_IP1.summary.inlet.h = split_IP2.h;
  valve_IP1.summary.outlet.h = split_IP2.h;
  Turbine_IP3.summary.inlet.h = split_IP2.h;
  Turbine_IP2.inlet.h_outflow = split_IP2.h;
  split_IP2.summary.fluid.h = split_IP2.h;
  split_IP2.inlet.h_outflow = split_IP2.h;
  split_IP2.outlet1.h_outflow = split_IP2.h;
  split_IP2.outlet2.h_outflow = split_IP2.h;
  valve_IP1.inlet.p = split_IP2.p;
  valve_IP1.summary.inlet.p = split_IP2.p;
  Turbine_IP3.p_in = split_IP2.p;
  Turbine_IP3.inlet.p = split_IP2.p;
  Turbine_IP3.summary.inlet.p = split_IP2.p;
  Turbine_IP2.p_out = split_IP2.p;
  Turbine_IP2.outlet.p = split_IP2.p;
  Turbine_IP2.summary.outlet.p = split_IP2.p;
  split_IP2.summary.inlet.p = split_IP2.p;
  split_IP2.summary.outlet1.p = split_IP2.p;
  split_IP2.summary.outlet2.p = split_IP2.p;
  split_IP2.summary.fluid.p = split_IP2.p;
  split_IP2.inlet.p = split_IP2.p;
  split_IP2.outlet1.p = split_IP2.p;
  split_IP2.outlet2.p = split_IP2.p;
  Turbine_LP1.summary.inlet.h = join_IP3.h;
  valve_IP2.outlet.h_outflow = join_IP3.h;
  valve_IP2.summary.inlet.h = join_IP3.h;
  valve_IP2.summary.outlet.h = join_IP3.h;
  Turbine_IP3.inlet.h_outflow = join_IP3.h;
  join_IP3.summary.fluid.h = join_IP3.h;
  join_IP3.inlet.h_outflow = join_IP3.h;
  join_IP3.outlet1.h_outflow = join_IP3.h;
  join_IP3.outlet2.h_outflow = join_IP3.h;
  Turbine_LP1.p_in = join_IP3.p;
  Turbine_LP1.inlet.p = join_IP3.p;
  Turbine_LP1.summary.inlet.p = join_IP3.p;
  valve_IP2.inlet.p = join_IP3.p;
  valve_IP2.summary.inlet.p = join_IP3.p;
  Turbine_IP3.p_out = join_IP3.p;
  Turbine_IP3.outlet.p = join_IP3.p;
  Turbine_IP3.summary.outlet.p = join_IP3.p;
  join_IP3.summary.inlet.p = join_IP3.p;
  join_IP3.summary.outlet1.p = join_IP3.p;
  join_IP3.summary.outlet2.p = join_IP3.p;
  join_IP3.summary.fluid.p = join_IP3.p;
  join_IP3.inlet.p = join_IP3.p;
  join_IP3.outlet1.p = join_IP3.p;
  join_IP3.outlet2.p = join_IP3.p;
  Turbine_LP3.summary.inlet.h = join_LP2.h;
  Turbine_LP2.inlet.h_outflow = join_LP2.h;
  join_LP2.summary.fluid.h = join_LP2.h;
  join_LP2.inlet.h_outflow = join_LP2.h;
  join_LP2.outlet1.h_outflow = join_LP2.h;
  join_LP2.outlet2.h_outflow = join_LP2.h;
  valve_LP2.outlet.h_outflow = join_LP2.h;
  valve_LP2.summary.inlet.h = join_LP2.h;
  valve_LP2.summary.outlet.h = join_LP2.h;
  Turbine_LP3.p_in = join_LP2.p;
  Turbine_LP3.inlet.p = join_LP2.p;
  Turbine_LP3.summary.inlet.p = join_LP2.p;
  Turbine_LP2.p_out = join_LP2.p;
  Turbine_LP2.outlet.p = join_LP2.p;
  Turbine_LP2.summary.outlet.p = join_LP2.p;
  join_LP2.summary.inlet.p = join_LP2.p;
  join_LP2.summary.outlet1.p = join_LP2.p;
  join_LP2.summary.outlet2.p = join_LP2.p;
  join_LP2.summary.fluid.p = join_LP2.p;
  join_LP2.inlet.p = join_LP2.p;
  join_LP2.outlet1.p = join_LP2.p;
  join_LP2.outlet2.p = join_LP2.p;
  valve_LP2.inlet.p = join_LP2.p;
  valve_LP2.summary.inlet.p = join_LP2.p;
  Turbine_LP4.summary.inlet.h = split_LP3.h;
  Turbine_LP3.inlet.h_outflow = split_LP3.h;
  split_LP3.summary.fluid.h = split_LP3.h;
  split_LP3.inlet.h_outflow = split_LP3.h;
  split_LP3.outlet1.h_outflow = split_LP3.h;
  split_LP3.outlet2.h_outflow = split_LP3.h;
  valve_LP3.outlet.h_outflow = split_LP3.h;
  valve_LP3.summary.inlet.h = split_LP3.h;
  valve_LP3.summary.outlet.h = split_LP3.h;
  Turbine_LP4.p_in = split_LP3.p;
  Turbine_LP4.inlet.p = split_LP3.p;
  Turbine_LP4.summary.inlet.p = split_LP3.p;
  Turbine_LP3.p_out = split_LP3.p;
  Turbine_LP3.outlet.p = split_LP3.p;
  Turbine_LP3.summary.outlet.p = split_LP3.p;
  split_LP3.summary.inlet.p = split_LP3.p;
  split_LP3.summary.outlet1.p = split_LP3.p;
  split_LP3.summary.outlet2.p = split_LP3.p;
  split_LP3.summary.fluid.p = split_LP3.p;
  split_LP3.inlet.p = split_LP3.p;
  split_LP3.outlet1.p = split_LP3.p;
  split_LP3.outlet2.p = split_LP3.p;
  valve_LP3.inlet.p = split_LP3.p;
  valve_LP3.summary.inlet.p = split_LP3.p;
  preheater_LP1.In2.p = preheater_LP2.tubes.p;
  preheater_LP1.tubes.inlet.p = preheater_LP2.tubes.p;
  preheater_LP1.tubes.summary.inlet.p = preheater_LP2.tubes.p;
  preheater_LP1.tubes.fluidIn.p = preheater_LP2.tubes.p;
  preheater_LP2.Out2.p = preheater_LP2.tubes.p;
  preheater_LP2.tubes.outlet.p = preheater_LP2.tubes.p;
  preheater_LP2.tubes.summary.outlet.p = preheater_LP2.tubes.p;
  preheater_LP2.tubes.summary.fluid.p = preheater_LP2.tubes.p;
  preheater_LP2.tubes.fluidOut.p = preheater_LP2.tubes.p;
  preheater_LP2.In2.h_outflow = preheater_LP2.tubes.h;
  preheater_LP2.Out2.h_outflow = preheater_LP2.tubes.h;
  preheater_LP2.tubes.inlet.h_outflow = preheater_LP2.tubes.h;
  preheater_LP2.tubes.outlet.h_outflow = preheater_LP2.tubes.h;
  preheater_LP2.tubes.summary.fluid.h = preheater_LP2.tubes.h;
  preheater_LP2.tubes.phaseBorder.h_inflow = preheater_LP2.tubes.h;
  preheater_LP2.tubes.phaseBorder.h_outflow = preheater_LP2.tubes.h;
  preheater_LP2.shell.summary.fluid.'h[1]' = preheater_LP2.shell.h_liq;
  preheater_LP2.shell.summary.fluid.'h[2]' = preheater_LP2.shell.h_vap;
  preheater_LP2.shell.summary.outline.'volume[2]' = preheater_LP2.shell.volume_vap;
  preheater_LP2.shell.p_liq = preheater_LP2.shell.p_vap;
  preheater_LP2.shell.summary.fluid.'p[1]' = preheater_LP2.shell.p_vap;
  preheater_LP2.shell.summary.fluid.'p[2]' = preheater_LP2.shell.p_vap;
  preheater_LP2.wall.summary.'U[1]' = preheater_LP2.wall.'U[1]';
  preheater_LP2.wall.summary.'U[2]' = preheater_LP2.wall.'U[2]';
  preheater_LP2.wall.summary.'U[3]' = preheater_LP2.wall.'U[3]';
  preheater_LP3.Out2.p = preheater_LP3.tubes.p;
  preheater_LP3.tubes.outlet.p = preheater_LP3.tubes.p;
  preheater_LP3.tubes.summary.outlet.p = preheater_LP3.tubes.p;
  preheater_LP3.tubes.summary.fluid.p = preheater_LP3.tubes.p;
  preheater_LP3.tubes.fluidOut.p = preheater_LP3.tubes.p;
  join_preheater_LP3.summary.inlet1.p = preheater_LP3.tubes.p;
  join_preheater_LP3.inlet1.p = preheater_LP3.tubes.p;
  preheater_LP3.In2.h_outflow = preheater_LP3.tubes.h;
  preheater_LP3.Out2.h_outflow = preheater_LP3.tubes.h;
  preheater_LP3.tubes.inlet.h_outflow = preheater_LP3.tubes.h;
  preheater_LP3.tubes.outlet.h_outflow = preheater_LP3.tubes.h;
  preheater_LP3.tubes.summary.fluid.h = preheater_LP3.tubes.h;
  preheater_LP3.tubes.phaseBorder.h_inflow = preheater_LP3.tubes.h;
  preheater_LP3.tubes.phaseBorder.h_outflow = preheater_LP3.tubes.h;
  preheater_LP3.shell.summary.fluid.'h[1]' = preheater_LP3.shell.h_liq;
  preheater_LP3.shell.summary.fluid.'h[2]' = preheater_LP3.shell.h_vap;
  preheater_LP3.shell.summary.outline.'volume[2]' = preheater_LP3.shell.volume_vap;
  preheater_LP3.shell.p_liq = preheater_LP3.shell.p_vap;
  preheater_LP3.shell.summary.fluid.'p[1]' = preheater_LP3.shell.p_vap;
  preheater_LP3.shell.summary.fluid.'p[2]' = preheater_LP3.shell.p_vap;
  preheater_LP3.wall.summary.'U[1]' = preheater_LP3.wall.'U[1]';
  preheater_LP3.wall.summary.'U[2]' = preheater_LP3.wall.'U[2]';
  preheater_LP3.wall.summary.'U[3]' = preheater_LP3.wall.'U[3]';
  preheater_LP3.In2.p = preheater_LP4.tubes.p;
  preheater_LP3.tubes.inlet.p = preheater_LP4.tubes.p;
  preheater_LP3.tubes.summary.inlet.p = preheater_LP4.tubes.p;
  preheater_LP3.tubes.fluidIn.p = preheater_LP4.tubes.p;
  preheater_LP4.Out2.p = preheater_LP4.tubes.p;
  preheater_LP4.tubes.outlet.p = preheater_LP4.tubes.p;
  preheater_LP4.tubes.summary.outlet.p = preheater_LP4.tubes.p;
  preheater_LP4.tubes.summary.fluid.p = preheater_LP4.tubes.p;
  preheater_LP4.tubes.fluidOut.p = preheater_LP4.tubes.p;
  Pump_cond.inlet.h_outflow = preheater_LP4.tubes.h;
  preheater_LP4.In2.h_outflow = preheater_LP4.tubes.h;
  preheater_LP4.Out2.h_outflow = preheater_LP4.tubes.h;
  preheater_LP4.tubes.inlet.h_outflow = preheater_LP4.tubes.h;
  preheater_LP4.tubes.outlet.h_outflow = preheater_LP4.tubes.h;
  preheater_LP4.tubes.summary.fluid.h = preheater_LP4.tubes.h;
  preheater_LP4.tubes.phaseBorder.h_inflow = preheater_LP4.tubes.h;
  preheater_LP4.tubes.phaseBorder.h_outflow = preheater_LP4.tubes.h;
  preheater_LP4.shell.summary.fluid.'h[1]' = preheater_LP4.shell.h_liq;
  preheater_LP4.shell.summary.fluid.'h[2]' = preheater_LP4.shell.h_vap;
  preheater_LP4.shell.summary.outline.'volume[2]' = preheater_LP4.shell.volume_vap;
  preheater_LP4.shell.p_liq = preheater_LP4.shell.p_vap;
  preheater_LP4.shell.summary.fluid.'p[1]' = preheater_LP4.shell.p_vap;
  preheater_LP4.shell.summary.fluid.'p[2]' = preheater_LP4.shell.p_vap;
  preheater_LP4.wall.summary.'U[1]' = preheater_LP4.wall.'U[1]';
  preheater_LP4.wall.summary.'U[2]' = preheater_LP4.wall.'U[2]';
  preheater_LP4.wall.summary.'U[3]' = preheater_LP4.wall.'U[3]';
  Pump_preheater_LP3.inlet.h_outflow = join_preheater_LP3.h;
  valve_afterPumpLP3.inlet.h_outflow = join_preheater_LP3.h;
  join_preheater_LP3.summary.fluid.h = join_preheater_LP3.h;
  join_preheater_LP3.inlet1.h_outflow = join_preheater_LP3.h;
  join_preheater_LP3.outlet.h_outflow = join_preheater_LP3.h;
  join_preheater_LP3.inlet2.h_outflow = join_preheater_LP3.h;
  preheater_LP2.In2.p = join_preheater_LP3.p;
  preheater_LP2.tubes.inlet.p = join_preheater_LP3.p;
  preheater_LP2.tubes.summary.inlet.p = join_preheater_LP3.p;
  preheater_LP2.tubes.fluidIn.p = join_preheater_LP3.p;
  valve_afterPumpLP3.outlet.p = join_preheater_LP3.p;
  valve_afterPumpLP3.summary.outlet.p = join_preheater_LP3.p;
  join_preheater_LP3.summary.inlet2.p = join_preheater_LP3.p;
  join_preheater_LP3.summary.outlet.p = join_preheater_LP3.p;
  join_preheater_LP3.summary.fluid.p = join_preheater_LP3.p;
  join_preheater_LP3.outlet.p = join_preheater_LP3.p;
  join_preheater_LP3.inlet2.p = join_preheater_LP3.p;
  PID_preheaterLP4.resetP.u2 = PID_preheaterLP4.resetValueP;
  PID_preheaterLP4.y_unlocked1.y = PID_preheaterLP4.resetValueP;
  PID_preheaterLP4.resetPD.u2 = PID_preheaterLP4.resetValueID;
  PID_preheaterLP4.y_unlocked2.y = PID_preheaterLP4.resetValueID;
  PID_preheaterLP4.addPID.u3 = PID_preheaterLP4.I.y;
  PID_preheaterLP4.toPU.u = PID_preheaterLP4.smoothPIDInput.y_aux;
  PID_preheaterLP4.smoothPIDInput.y = PID_preheaterLP4.smoothPIDInput.y_aux;
  valveControl_preheater_LP4.opening_in = PID_preheaterLP4.smoothPIDOutput.y_aux;
  valveControl_preheater_LP4.summary.outline.opening_ = PID_preheaterLP4.smoothPIDOutput.y_aux;
  PID_preheaterLP4.y = PID_preheaterLP4.smoothPIDOutput.y_aux;
  PID_preheaterLP4.smoothPIDOutput.y = PID_preheaterLP4.smoothPIDOutput.y_aux;
  valveControl_preheater_LP4_display.x1 = PID_preheaterLP4.smoothPIDOutput.y_aux;
  valveControl_preheater_LP4_display.u_aux = PID_preheaterLP4.smoothPIDOutput.y_aux;
  PID_preheaterLP3.resetP.u2 = PID_preheaterLP3.resetValueP;
  PID_preheaterLP3.y_unlocked1.y = PID_preheaterLP3.resetValueP;
  PID_preheaterLP3.resetPD.u2 = PID_preheaterLP3.resetValueID;
  PID_preheaterLP3.y_unlocked2.y = PID_preheaterLP3.resetValueID;
  PID_preheaterLP3.addPID.u3 = PID_preheaterLP3.I.y;
  PID_preheaterLP3.toPU.u = PID_preheaterLP3.smoothPIDInput.y_aux;
  PID_preheaterLP3.smoothPIDInput.y = PID_preheaterLP3.smoothPIDInput.y_aux;
  Pump_preheater_LP3.P_drive = PID_preheaterLP3.smoothPIDOutput.y_aux;
  Pump_preheater_LP3.connected2SimCenter.powerAux = PID_preheaterLP3.smoothPIDOutput.y_aux;
  Pump_preheater_LP3.connected2SimCenter.cycleSumModel.cycleSumPort.power_aux = PID_preheaterLP3.smoothPIDOutput.y_aux;
  PID_preheaterLP3.y = PID_preheaterLP3.smoothPIDOutput.y_aux;
  PID_preheaterLP3.smoothPIDOutput.y = PID_preheaterLP3.smoothPIDOutput.y_aux;
  PID_NDVW3.resetP.u2 = PID_NDVW3.resetValueP;
  PID_NDVW3.y_unlocked1.y = PID_NDVW3.resetValueP;
  PID_NDVW3.resetPD.u2 = PID_NDVW3.resetValueID;
  PID_NDVW3.y_unlocked2.y = PID_NDVW3.resetValueID;
  PID_NDVW3.addPID.u3 = PID_NDVW3.I.y;
  PID_NDVW3.toPU.u = PID_NDVW3.smoothPIDInput.y_aux;
  PID_NDVW3.smoothPIDInput.y = PID_NDVW3.smoothPIDInput.y_aux;
  valveControl_preheater_LP2.opening_in = PID_NDVW3.smoothPIDOutput.y_aux;
  valveControl_preheater_LP2.summary.outline.opening_ = PID_NDVW3.smoothPIDOutput.y_aux;
  PID_NDVW3.y = PID_NDVW3.smoothPIDOutput.y_aux;
  PID_NDVW3.smoothPIDOutput.y = PID_NDVW3.smoothPIDOutput.y_aux;
  valveControl_preheater_LP2_display2.x1 = PID_NDVW3.smoothPIDOutput.y_aux;
  valveControl_preheater_LP2_display2.u_aux = PID_NDVW3.smoothPIDOutput.y_aux;
  Turbine_HP1.shaft_a.phi = inertia.phi;
  Turbine_HP1.shaft_b.phi = inertia.phi;
  Turbine_IP1.shaft_a.phi = inertia.phi;
  Turbine_IP1.shaft_b.phi = inertia.phi;
  Turbine_LP4.shaft_a.phi = inertia.phi;
  Turbine_LP4.shaft_b.phi = inertia.phi;
  Turbine_LP1.shaft_a.phi = inertia.phi;
  Turbine_LP1.shaft_b.phi = inertia.phi;
  Turbine_IP3.shaft_a.phi = inertia.phi;
  Turbine_IP3.shaft_b.phi = inertia.phi;
  Turbine_IP2.shaft_a.phi = inertia.phi;
  Turbine_IP2.shaft_b.phi = inertia.phi;
  Turbine_LP3.shaft_a.phi = inertia.phi;
  Turbine_LP3.shaft_b.phi = inertia.phi;
  Turbine_LP2.shaft_a.phi = inertia.phi;
  Turbine_LP2.shaft_b.phi = inertia.phi;
  inertia.flange_a.phi = inertia.phi;
  inertia.flange_b.phi = inertia.phi;
  simpleGenerator.shaft.phi = inertia.phi;
  downComer_feedWaterTank.summary.fluid.'h[1]' = downComer_feedWaterTank.'h[1]';
  downComer_feedWaterTank.inlet.h_outflow = downComer_feedWaterTank.'h[1]';
  downComer_feedWaterTank.mechanicalEquilibrium.'h[1]' = downComer_feedWaterTank.'h[1]';
  downComer_feedWaterTank.summary.fluid.'h[2]' = downComer_feedWaterTank.'h[2]';
  downComer_feedWaterTank.mechanicalEquilibrium.'h[2]' = downComer_feedWaterTank.'h[2]';
  downComer_feedWaterTank.summary.fluid.'h[3]' = downComer_feedWaterTank.'h[3]';
  downComer_feedWaterTank.outlet.h_outflow = downComer_feedWaterTank.'h[3]';
  downComer_feedWaterTank.mechanicalEquilibrium.'h[3]' = downComer_feedWaterTank.'h[3]';
  downComer_feedWaterTank.summary.fluid.'p[1]' = downComer_feedWaterTank.'p[1]';
  downComer_feedWaterTank.summary.fluid.'p[2]' = downComer_feedWaterTank.'p[2]';
  Pump_FW.inlet.p = downComer_feedWaterTank.'p[3]';
  Pump_FW.summary.inlet.p = downComer_feedWaterTank.'p[3]';
  downComer_feedWaterTank.summary.outlet.p = downComer_feedWaterTank.'p[3]';
  downComer_feedWaterTank.summary.fluid.'p[3]' = downComer_feedWaterTank.'p[3]';
  downComer_feedWaterTank.outlet.p = downComer_feedWaterTank.'p[3]';
  steamGenerator.heatRelease.u = steamGenerator.QF_setl_;
  Nominal_PowerFeedwaterPump1.u = steamGenerator.QF_setl_;
  feedWaterTank.wall.summary.'Q_flow[3]' = feedWaterTank.wall.'Q_flow[3]';
  Turbine_HP1.iCom.m_flow_in = Turbine_HP1.inlet.m_flow;
  Turbine_HP1.summary.inlet.m_flow = Turbine_HP1.inlet.m_flow;
  Turbine_HP1.summary.outlet.m_flow = Turbine_HP1.inlet.m_flow;
  Turbine_HP1.eye.m_flow = Turbine_HP1.inlet.m_flow;
  Turbine_HP1.'eye_int[1]'.m_flow = Turbine_HP1.inlet.m_flow;
  steamGenerator.eye_LS.m_flow = Turbine_HP1.inlet.m_flow;
  steamGenerator.'eye_intLS[1]'.m_flow = Turbine_HP1.inlet.m_flow;
  quadruple2.m_flow = Turbine_HP1.inlet.m_flow;
  quadruple2.eye.m_flow = Turbine_HP1.inlet.m_flow;
  quadruple4.m_flow = Turbine_HP1.inlet.m_flow;
  quadruple4.eye.m_flow = Turbine_HP1.inlet.m_flow;
  join_HP.summary.inlet.m_flow = Turbine_HP1.inlet.m_flow;
  join_HP.inlet.m_flow = Turbine_HP1.inlet.m_flow;
  steamGenerator.livesteam.m_flow = Turbine_HP1.outlet.m_flow;
  Turbine_HP1.summary.outlet.h = Turbine_HP1.outlet.h_outflow;
  Turbine_HP1.summary.inlet.rho = Turbine_HP1.iCom.rho_in;
  Turbine_HP1.summary.outline.h_isen = Turbine_HP1.h_is;
  Turbine_HP1.summary.outline.eta_isen = Turbine_HP1.eta_is;
  Turbine_HP1.efficiency.eta = Turbine_HP1.eta_is;
  steamGenerator.livesteam.h_outflow = Turbine_HP1.summary.inlet.h;
  steamGenerator.liveSteam.h = Turbine_HP1.summary.inlet.h;
  Turbine_IP1.outlet.m_flow = steamGenerator.reheat_out.m_flow;
  Turbine_IP2.outlet.m_flow = steamGenerator.reheat_out.m_flow;
  steamGenerator.reheat_in.h_outflow = steamGenerator.reheat_out.h_outflow;
  steamGenerator.reheatedSteam.h = steamGenerator.reheat_out.h_outflow;
  Turbine_IP1.summary.inlet.h = steamGenerator.reheat_out.h_outflow;
  preheater_HP.tubes.summary.outlet.m_flow = steamGenerator.feedwater.m_flow;
  preheater_HP.'eye_int2[1]'.m_flow = steamGenerator.feedwater.m_flow;
  preheater_HP.eye2.m_flow = steamGenerator.feedwater.m_flow;
  quadruple25.m_flow = steamGenerator.feedwater.m_flow;
  quadruple25.eye.m_flow = steamGenerator.feedwater.m_flow;
  join_HP.'eye[1]'.m_flow = steamGenerator.reheat_in.m_flow;
  join_HP.summary.outlet1.m_flow = steamGenerator.reheat_in.m_flow;
  Turbine_IP1.outlet.p = Turbine_IP1.p_out;
  Turbine_IP1.summary.outlet.p = Turbine_IP1.p_out;
  Turbine_IP2.p_in = Turbine_IP1.p_out;
  Turbine_IP2.inlet.p = Turbine_IP1.p_out;
  Turbine_IP2.summary.inlet.p = Turbine_IP1.p_out;
  Turbine_IP1.summary.outlet.h = Turbine_IP1.outlet.h_outflow;
  Turbine_IP2.summary.inlet.h = Turbine_IP1.outlet.h_outflow;
  Turbine_IP1.summary.inlet.rho = Turbine_IP1.iCom.rho_in;
  Turbine_IP1.summary.outline.h_isen = Turbine_IP1.h_is;
  Turbine_IP1.summary.outline.eta_isen = Turbine_IP1.eta_is;
  Turbine_IP1.efficiency.eta = Turbine_IP1.eta_is;
  steamGenerator.'eye_intRH[1]'.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP1.inlet.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP1.iCom.m_flow_in = steamGenerator.eye_RH.m_flow;
  Turbine_IP1.summary.inlet.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP1.summary.outlet.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP1.eye.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP1.'eye_int[1]'.m_flow = steamGenerator.eye_RH.m_flow;
  quadruple1.m_flow = steamGenerator.eye_RH.m_flow;
  quadruple1.eye.m_flow = steamGenerator.eye_RH.m_flow;
  quadruple3.m_flow = steamGenerator.eye_RH.m_flow;
  quadruple3.eye.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP2.inlet.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP2.iCom.m_flow_in = steamGenerator.eye_RH.m_flow;
  Turbine_IP2.summary.inlet.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP2.summary.outlet.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP2.eye.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_IP2.'eye_int[1]'.m_flow = steamGenerator.eye_RH.m_flow;
  split_IP2.summary.inlet.m_flow = steamGenerator.eye_RH.m_flow;
  split_IP2.inlet.m_flow = steamGenerator.eye_RH.m_flow;
  quadruple15.m_flow = steamGenerator.eye_RH.m_flow;
  quadruple15.eye.m_flow = steamGenerator.eye_RH.m_flow;
  Turbine_LP4.iCom.m_flow_in = Turbine_LP4.inlet.m_flow;
  Turbine_LP4.summary.inlet.m_flow = Turbine_LP4.inlet.m_flow;
  Turbine_LP4.summary.outlet.m_flow = Turbine_LP4.inlet.m_flow;
  Turbine_LP4.eye.m_flow = Turbine_LP4.inlet.m_flow;
  Turbine_LP4.'eye_int[1]'.m_flow = Turbine_LP4.inlet.m_flow;
  quadruple.m_flow = Turbine_LP4.inlet.m_flow;
  quadruple.eye.m_flow = Turbine_LP4.inlet.m_flow;
  condenser.In1.m_flow = Turbine_LP4.inlet.m_flow;
  condenser.shell.'inlet[1]'.m_flow = Turbine_LP4.inlet.m_flow;
  condenser.shell.summary.'inlet[1]'.m_flow = Turbine_LP4.inlet.m_flow;
  split_LP3.'eye[1]'.m_flow = Turbine_LP4.inlet.m_flow;
  split_LP3.summary.outlet1.m_flow = Turbine_LP4.inlet.m_flow;
  condenser.In1.h_outflow = Turbine_LP4.inlet.h_outflow;
  condenser.shell.'inlet[1]'.h_outflow = Turbine_LP4.inlet.h_outflow;
  split_LP3.outlet1.m_flow = Turbine_LP4.outlet.m_flow;
  Turbine_LP4.outlet.p = Turbine_LP4.p_out;
  Turbine_LP4.summary.outlet.p = Turbine_LP4.p_out;
  condenser.In1.p = Turbine_LP4.p_out;
  condenser.shell.'inlet[1]'.p = Turbine_LP4.p_out;
  condenser.shell.'fluidIn[1]'.p = Turbine_LP4.p_out;
  condenser.shell.summary.'inlet[1]'.p = Turbine_LP4.p_out;
  Turbine_LP4.summary.outlet.h = Turbine_LP4.outlet.h_outflow;
  Turbine_LP4.summary.inlet.rho = Turbine_LP4.iCom.rho_in;
  Turbine_LP4.summary.outline.h_isen = Turbine_LP4.h_is;
  Turbine_LP4.summary.outline.eta_isen = Turbine_LP4.eta_is;
  Turbine_LP4.efficiency.eta = Turbine_LP4.eta_is;
  Pump_FW.summary.outline.Delta_p = Pump_FW.Delta_p;
  Pump_FW.summary.outline.V_flow = Pump_FW.V_flow;
  Pump_FW.summary.outline.P_fluid = Pump_FW.P_fluid;
  Pump_FW.eye.m_flow = Pump_FW.inlet.m_flow;
  Pump_FW.'eye_int[1]'.m_flow = Pump_FW.inlet.m_flow;
  Pump_FW.summary.inlet.m_flow = Pump_FW.inlet.m_flow;
  Pump_FW.summary.outlet.m_flow = Pump_FW.inlet.m_flow;
  preheater_HP.In2.m_flow = Pump_FW.inlet.m_flow;
  preheater_HP.tubes.inlet.m_flow = Pump_FW.inlet.m_flow;
  preheater_HP.tubes.summary.inlet.m_flow = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.summary.outline.'m_flow[4]' = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.summary.outlet.m_flow = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.pressureLoss.'m_flow[4]' = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.heatTransfer.'m_flow[4]' = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.mechanicalEquilibrium.'m_flow[4]' = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.'eye_int[1]'.m_flow = Pump_FW.inlet.m_flow;
  downComer_feedWaterTank.outlet.m_flow = Pump_FW.outlet.m_flow;
  Pump_FW.summary.outlet.p = Pump_FW.outlet.p;
  preheater_HP.In2.p = Pump_FW.outlet.p;
  preheater_HP.tubes.inlet.p = Pump_FW.outlet.p;
  preheater_HP.tubes.summary.inlet.p = Pump_FW.outlet.p;
  preheater_HP.tubes.fluidIn.p = Pump_FW.outlet.p;
  Pump_FW.connected2SimCenter.powerAux = Pump_FW.P_drive;
  Pump_FW.connected2SimCenter.cycleSumModel.cycleSumPort.power_aux = Pump_FW.P_drive;
  Nominal_PowerFeedwaterPump1.y = Pump_FW.P_drive;
  condenser.tubes.outlet.m_flow = condenser.Out2.m_flow;
  boundaryVLE_phxi.eye.m_flow = condenser.Out2.m_flow;
  boundaryVLE_phxi.'eye_int[1]'.m_flow = condenser.Out2.m_flow;
  valveControl_preheater_LP1.outlet.m_flow = condenser.Out2.m_flow;
  condenser.shell.'outlet[1]'.m_flow = condenser.Out1.m_flow;
  Pump_cond.outlet.m_flow = condenser.Out1.m_flow;
  condenser.shell.'outlet[1]'.p = condenser.Out1.p;
  condenser.shell.'fluidOut[1]'.p = condenser.Out1.p;
  condenser.shell.summary.'outlet[1]'.p = condenser.Out1.p;
  Pump_cond.inlet.p = condenser.Out1.p;
  Pump_cond.summary.inlet.p = condenser.Out1.p;
  condenser.shell.'outlet[1]'.h_outflow = condenser.Out1.h_outflow;
  condenser.tubes.fluidIn.T = condenser.tubes.summary.inlet.T;
  condenser.tubes.fluidOut.T = condenser.tubes.summary.outlet.T;
  condenser.tubes.summary.fluid.mass = condenser.tubes.mass;
  condenser.tubes.fluidOut.h = condenser.tubes.summary.outlet.h;
  condenser.tubes.heattransfer.heat.T = condenser.tubes.heat.T;
  condenser.wall.innerPhase.T = condenser.tubes.heat.T;
  condenser.tubes.summary.outline.Q_flow_tot = condenser.tubes.heat.Q_flow;
  condenser.tubes.heattransfer.heat.Q_flow = condenser.tubes.heat.Q_flow;
  condenser.shell.summary.'inlet[1]'.h = condenser.shell.'fluidIn[1]'.h;
  condenser.shell.summary.'inlet[2]'.h = condenser.shell.'fluidIn[2]'.h;
  condenser.shell.summary.'outlet[1]'.h = condenser.shell.'fluidOut[1]'.h;
  condenser.shell.summary.outline.'volume[1]' = condenser.shell.volume_liq;
  condenser.shell.summary.fluid.'mass[1]' = condenser.shell.mass_liq;
  condenser.shell.summary.fluid.'mass[2]' = condenser.shell.mass_vap;
  condenser.shell.'heat[2]'.T = condenser.shell.'heat[1]'.T;
  condenser.shell.heattransfer.'heat[1]'.T = condenser.shell.'heat[1]'.T;
  condenser.shell.heattransfer.'heat[2]'.T = condenser.shell.'heat[1]'.T;
  condenser.wall.outerPhase.T = condenser.shell.'heat[1]'.T;
  condenser.shell.heattransfer.'heat[1]'.Q_flow = condenser.shell.'heat[1]'.Q_flow;
  condenser.shell.summary.outline.'Q_flow[1]' = condenser.shell.'heat[1]'.Q_flow;
  condenser.shell.heattransfer.'heat[2]'.Q_flow = condenser.shell.'heat[2]'.Q_flow;
  condenser.shell.summary.outline.'Q_flow[2]' = condenser.shell.'heat[2]'.Q_flow;
  condenser.shell.summary.outline.level_abs = condenser.shell.phaseBorder.level_abs;
  condenser.summary.outline.level_abs = condenser.shell.phaseBorder.level_abs;
  condenser.wall.'solid[1]'.T = condenser.wall.'T[1]';
  condenser.wall.summary.'T[1]' = condenser.wall.'T[1]';
  condenser.wall.'solid[2]'.T = condenser.wall.'T[2]';
  condenser.wall.summary.'T[2]' = condenser.wall.'T[2]';
  condenser.wall.'solid[3]'.T = condenser.wall.'T[3]';
  condenser.wall.summary.'T[3]' = condenser.wall.'T[3]';
  condenser.wall.innerPhase.Q_flow = condenser.wall.'Q_flow[1]';
  condenser.wall.summary.'Q_flow[1]' = condenser.wall.'Q_flow[1]';
  condenser.wall.summary.'Q_flow[2]' = condenser.wall.'Q_flow[2]';
  condenser.wall.summary.'Q_flow[3]' = condenser.wall.'Q_flow[3]';
  condenser.wall.summary.'Q_flow[4]' = condenser.wall.'Q_flow[4]';
  condenser.shell.summary.'inlet[2]'.m_flow = condenser.shell.'inlet[2]'.m_flow;
  condenser.aux1.m_flow = condenser.shell.'inlet[2]'.m_flow;
  preheater_LP4.shell.summary.'outlet[1]'.m_flow = condenser.shell.'inlet[2]'.m_flow;
  preheater_LP4.eye1.m_flow = condenser.shell.'inlet[2]'.m_flow;
  preheater_LP4.'eye_int1[1]'.m_flow = condenser.shell.'inlet[2]'.m_flow;
  valveControl_preheater_LP4.inlet.m_flow = condenser.shell.'inlet[2]'.m_flow;
  valveControl_preheater_LP4.pressureLoss.m_flow = condenser.shell.'inlet[2]'.m_flow;
  valveControl_preheater_LP4.summary.inlet.m_flow = condenser.shell.'inlet[2]'.m_flow;
  valveControl_preheater_LP4.summary.outlet.m_flow = condenser.shell.'inlet[2]'.m_flow;
  valveControl_preheater_LP4.eye.m_flow = condenser.shell.'inlet[2]'.m_flow;
  valveControl_preheater_LP4.'eye_int[1]'.m_flow = condenser.shell.'inlet[2]'.m_flow;
  condenser.shell.'fluidIn[2]'.p = condenser.shell.'inlet[2]'.p;
  condenser.shell.summary.'inlet[2]'.p = condenser.shell.'inlet[2]'.p;
  condenser.aux1.p = condenser.shell.'inlet[2]'.p;
  valveControl_preheater_LP4.outlet.p = condenser.shell.'inlet[2]'.p;
  valveControl_preheater_LP4.summary.outlet.p = condenser.shell.'inlet[2]'.p;
  condenser.aux1.h_outflow = condenser.shell.'inlet[2]'.h_outflow;
  valveControl_preheater_LP4.inlet.h_outflow = condenser.shell.'inlet[2]'.h_outflow;
  feedWaterTank.volume.'outlet[1]'.m_flow = feedWaterTank.feedwater.m_flow;
  feedWaterTank.summary.feedwater.p = feedWaterTank.feedwater.p;
  feedWaterTank.volume.'outlet[1]'.p = feedWaterTank.feedwater.p;
  feedWaterTank.volume.'fluidOut[1]'.p = feedWaterTank.feedwater.p;
  feedWaterTank.volume.summary.'outlet[1]'.p = feedWaterTank.feedwater.p;
  downComer_feedWaterTank.summary.inlet.p = feedWaterTank.feedwater.p;
  downComer_feedWaterTank.inlet.p = feedWaterTank.feedwater.p;
  feedWaterTank.volume.'outlet[1]'.h_outflow = feedWaterTank.feedwater.h_outflow;
  feedWaterTank.summary.tapping.m_flow = feedWaterTank.heatingSteam.m_flow;
  feedWaterTank.volume.'inlet[1]'.m_flow = feedWaterTank.heatingSteam.m_flow;
  feedWaterTank.volume.summary.'inlet[1]'.m_flow = feedWaterTank.heatingSteam.m_flow;
  valve_IP1.inlet.m_flow = feedWaterTank.heatingSteam.m_flow;
  valve_IP1.pressureLoss.m_flow = feedWaterTank.heatingSteam.m_flow;
  valve_IP1.summary.inlet.m_flow = feedWaterTank.heatingSteam.m_flow;
  valve_IP1.summary.outlet.m_flow = feedWaterTank.heatingSteam.m_flow;
  valve_IP1.eye.m_flow = feedWaterTank.heatingSteam.m_flow;
  valve_IP1.'eye_int[1]'.m_flow = feedWaterTank.heatingSteam.m_flow;
  quadruple8.m_flow = feedWaterTank.heatingSteam.m_flow;
  quadruple8.eye.m_flow = feedWaterTank.heatingSteam.m_flow;
  split_IP2.'eye[2]'.m_flow = feedWaterTank.heatingSteam.m_flow;
  split_IP2.summary.outlet2.m_flow = feedWaterTank.heatingSteam.m_flow;
  feedWaterTank.summary.tapping.p = feedWaterTank.heatingSteam.p;
  feedWaterTank.volume.'inlet[1]'.p = feedWaterTank.heatingSteam.p;
  feedWaterTank.volume.'fluidIn[1]'.p = feedWaterTank.heatingSteam.p;
  feedWaterTank.volume.summary.'inlet[1]'.p = feedWaterTank.heatingSteam.p;
  valve_IP1.outlet.p = feedWaterTank.heatingSteam.p;
  valve_IP1.summary.outlet.p = feedWaterTank.heatingSteam.p;
  feedWaterTank.volume.'inlet[1]'.h_outflow = feedWaterTank.heatingSteam.h_outflow;
  valve_IP1.inlet.h_outflow = feedWaterTank.heatingSteam.h_outflow;
  feedWaterTank.summary.condensate.m_flow = feedWaterTank.condensate.m_flow;
  feedWaterTank.volume.'inlet[2]'.m_flow = feedWaterTank.condensate.m_flow;
  feedWaterTank.volume.summary.'inlet[2]'.m_flow = feedWaterTank.condensate.m_flow;
  join_LP_main.summary.outlet.m_flow = feedWaterTank.condensate.m_flow;
  join_LP_main.pressureLossOut.m_flow = feedWaterTank.condensate.m_flow;
  join_LP_main.eye.m_flow = feedWaterTank.condensate.m_flow;
  join_LP_main.'eye_int[1]'.m_flow = feedWaterTank.condensate.m_flow;
  feedWaterTank.summary.condensate.p = feedWaterTank.condensate.p;
  feedWaterTank.volume.'inlet[2]'.p = feedWaterTank.condensate.p;
  feedWaterTank.volume.'fluidIn[2]'.p = feedWaterTank.condensate.p;
  feedWaterTank.volume.summary.'inlet[2]'.p = feedWaterTank.condensate.p;
  join_LP_main.summary.outlet.p = feedWaterTank.condensate.p;
  join_LP_main.outlet.p = feedWaterTank.condensate.p;
  feedWaterTank.volume.'inlet[2]'.h_outflow = feedWaterTank.condensate.h_outflow;
  feedWaterTank.volume.phaseBorder.level_abs = feedWaterTank.summary.outline.level_abs;
  feedWaterTank.volume.summary.outline.level_abs = feedWaterTank.summary.outline.level_abs;
  feedWaterTank.volume.phaseBorder.level_rel = feedWaterTank.summary.outline.level_rel;
  feedWaterTank.volume.summary.outline.level_rel = feedWaterTank.summary.outline.level_rel;
  feedWaterTank.volume.summary.outline.'yps[1]' = feedWaterTank.summary.outline.level_rel;
  feedWaterTank.volume.summary.'inlet[1]'.h = feedWaterTank.volume.'fluidIn[1]'.h;
  feedWaterTank.volume.summary.'inlet[2]'.h = feedWaterTank.volume.'fluidIn[2]'.h;
  feedWaterTank.volume.summary.'inlet[3]'.h = feedWaterTank.volume.'fluidIn[3]'.h;
  feedWaterTank.volume.summary.'outlet[1]'.h = feedWaterTank.volume.'fluidOut[1]'.h;
  feedWaterTank.volume.summary.outline.'volume[1]' = feedWaterTank.volume.volume_liq;
  feedWaterTank.volume.summary.fluid.'mass[1]' = feedWaterTank.volume.mass_liq;
  feedWaterTank.volume.summary.fluid.'mass[2]' = feedWaterTank.volume.mass_vap;
  feedWaterTank.volume.'heat[2]'.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.volume.heattransfer.'heat[1]'.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.volume.heattransfer.'heat[2]'.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.wall.innerPhase.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.scalar2VectorHeatPort.heatScalar.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.scalar2VectorHeatPort.'heatVector[1]'.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.scalar2VectorHeatPort.'heatVector[2]'.T = feedWaterTank.volume.'heat[1]'.T;
  feedWaterTank.volume.heattransfer.'heat[1]'.Q_flow = feedWaterTank.volume.'heat[1]'.Q_flow;
  feedWaterTank.volume.summary.outline.'Q_flow[1]' = feedWaterTank.volume.'heat[1]'.Q_flow;
  feedWaterTank.volume.heattransfer.'heat[2]'.Q_flow = feedWaterTank.volume.'heat[2]'.Q_flow;
  feedWaterTank.volume.summary.outline.'Q_flow[2]' = feedWaterTank.volume.'heat[2]'.Q_flow;
  feedWaterTank.wall.'T[1]' = feedWaterTank.summary.wall.'T_wall[1]';
  feedWaterTank.wall.'solid[1]'.T = feedWaterTank.summary.wall.'T_wall[1]';
  feedWaterTank.wall.summary.'T[1]' = feedWaterTank.summary.wall.'T_wall[1]';
  feedWaterTank.wall.'T[2]' = feedWaterTank.summary.wall.'T_wall[2]';
  feedWaterTank.wall.'solid[2]'.T = feedWaterTank.summary.wall.'T_wall[2]';
  feedWaterTank.wall.summary.'T[2]' = feedWaterTank.summary.wall.'T_wall[2]';
  feedWaterTank.wall.'T[3]' = feedWaterTank.summary.wall.'T_wall[3]';
  feedWaterTank.wall.'solid[3]'.T = feedWaterTank.summary.wall.'T_wall[3]';
  feedWaterTank.wall.summary.'T[3]' = feedWaterTank.summary.wall.'T_wall[3]';
  feedWaterTank.wall.innerPhase.Q_flow = feedWaterTank.wall.'Q_flow[1]';
  feedWaterTank.wall.summary.'Q_flow[1]' = feedWaterTank.wall.'Q_flow[1]';
  feedWaterTank.wall.summary.'Q_flow[2]' = feedWaterTank.wall.'Q_flow[2]';
  feedWaterTank.volume.'inlet[3]'.m_flow = feedWaterTank.summary.aux.m_flow;
  feedWaterTank.volume.summary.'inlet[3]'.m_flow = feedWaterTank.summary.aux.m_flow;
  feedWaterTank.aux.m_flow = feedWaterTank.summary.aux.m_flow;
  preheater_HP.shell.summary.'outlet[1]'.m_flow = feedWaterTank.summary.aux.m_flow;
  preheater_HP.'eye_int1[1]'.m_flow = feedWaterTank.summary.aux.m_flow;
  preheater_HP.eye1.m_flow = feedWaterTank.summary.aux.m_flow;
  valveControl_preheater_HP.inlet.m_flow = feedWaterTank.summary.aux.m_flow;
  valveControl_preheater_HP.pressureLoss.m_flow = feedWaterTank.summary.aux.m_flow;
  valveControl_preheater_HP.summary.inlet.m_flow = feedWaterTank.summary.aux.m_flow;
  valveControl_preheater_HP.summary.outlet.m_flow = feedWaterTank.summary.aux.m_flow;
  valveControl_preheater_HP.eye.m_flow = feedWaterTank.summary.aux.m_flow;
  valveControl_preheater_HP.'eye_int[1]'.m_flow = feedWaterTank.summary.aux.m_flow;
  quadruple12.m_flow = feedWaterTank.summary.aux.m_flow;
  quadruple12.eye.m_flow = feedWaterTank.summary.aux.m_flow;
  feedWaterTank.volume.'inlet[3]'.p = feedWaterTank.summary.aux.p;
  feedWaterTank.volume.'fluidIn[3]'.p = feedWaterTank.summary.aux.p;
  feedWaterTank.volume.summary.'inlet[3]'.p = feedWaterTank.summary.aux.p;
  feedWaterTank.aux.p = feedWaterTank.summary.aux.p;
  valveControl_preheater_HP.outlet.p = feedWaterTank.summary.aux.p;
  valveControl_preheater_HP.summary.outlet.p = feedWaterTank.summary.aux.p;
  feedWaterTank.aux.h_outflow = feedWaterTank.volume.'inlet[3]'.h_outflow;
  valveControl_preheater_HP.inlet.h_outflow = feedWaterTank.volume.'inlet[3]'.h_outflow;
  Pump_cond.summary.outline.Delta_p = Pump_cond.Delta_p;
  Pump_cond.summary.outline.V_flow = Pump_cond.V_flow;
  Pump_cond.summary.outline.P_fluid = Pump_cond.P_fluid;
  Pump_cond.summary.outlet.p = Pump_cond.outlet.p;
  preheater_LP4.In2.p = Pump_cond.outlet.p;
  preheater_LP4.tubes.inlet.p = Pump_cond.outlet.p;
  preheater_LP4.tubes.summary.inlet.p = Pump_cond.outlet.p;
  preheater_LP4.tubes.fluidIn.p = Pump_cond.outlet.p;
  condenser.'eye_int1[1]'.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  condenser.eye1.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  quadruple5.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  quadruple5.eye.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  Pump_cond.inlet.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  Pump_cond.eye.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  Pump_cond.'eye_int[1]'.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  Pump_cond.summary.inlet.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  Pump_cond.summary.outlet.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  quadruple13.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  quadruple13.eye.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  preheater_LP4.In2.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  preheater_LP4.tubes.inlet.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  preheater_LP4.tubes.summary.inlet.m_flow = condenser.shell.summary.'outlet[1]'.m_flow;
  Pump_cond.connected2SimCenter.powerAux = Pump_cond.P_drive;
  Pump_cond.connected2SimCenter.cycleSumModel.cycleSumPort.power_aux = Pump_cond.P_drive;
  PI_Pump_cond.y = Pump_cond.P_drive;
  PI_Pump_cond.fromPU.y = Pump_cond.P_drive;
  PI_Pump_cond.smoothPIDOutput.u = Pump_cond.P_drive;
  PI_Pump_cond.smoothPIDOutput.y = Pump_cond.P_drive;
  PI_Pump_cond.resetP.y = PI_Pump_cond.P.u;
  PI_Pump_cond.addPID.u1 = PI_Pump_cond.P.y;
  PI_Pump_cond.switch_OnOff_I.y = PI_Pump_cond.I.u;
  PI_Pump_cond.resetPD.u1 = PI_Pump_cond.addPID.y;
  PI_Pump_cond.gainTrack.y = PI_Pump_cond.addI.u2;
  PI_Pump_cond.switch_OnOff_I.u1 = PI_Pump_cond.addI.y;
  PI_Pump_cond.switch_OnOff.y = PI_Pump_cond.limiter.u;
  PI_Pump_cond.addSat.u2 = PI_Pump_cond.limiter.u;
  PI_Pump_cond.smoothPIDOutput1.u = PI_Pump_cond.limiter.u;
  PI_Pump_cond.smoothPIDOutput1.y = PI_Pump_cond.limiter.u;
  PI_Pump_cond.fromPU.u = PI_Pump_cond.limiter.y;
  PI_Pump_cond.addSat.u1 = PI_Pump_cond.limiter.y;
  PI_Pump_cond.toPU.y = PI_Pump_cond.addI.u1;
  PI_Pump_cond.resetP.u1 = PI_Pump_cond.addI.u1;
  PI_Pump_cond.feedback.y = PI_Pump_cond.toPU.u;
  PI_Pump_cond.smoothPIDInput.u = PI_Pump_cond.toPU.u;
  PI_Pump_cond.smoothPIDInput.y = PI_Pump_cond.toPU.u;
  PI_Pump_cond.resetPD.y = PI_Pump_cond.switch_OnOff.u1;
  PI_Pump_cond.addSat.y = PI_Pump_cond.gainTrack.u;
  PI_Pump_cond.I_activation.u = PI_Pump_cond.time_lag_I_activation.y;
  valve_IP1.summary.outline.Delta_p = valve_IP1.pressureLoss.Delta_p;
  Turbine_LP1.iCom.m_flow_in = Turbine_LP1.inlet.m_flow;
  Turbine_LP1.summary.inlet.m_flow = Turbine_LP1.inlet.m_flow;
  Turbine_LP1.summary.outlet.m_flow = Turbine_LP1.inlet.m_flow;
  Turbine_LP1.eye.m_flow = Turbine_LP1.inlet.m_flow;
  Turbine_LP1.'eye_int[1]'.m_flow = Turbine_LP1.inlet.m_flow;
  quadruple7.m_flow = Turbine_LP1.inlet.m_flow;
  quadruple7.eye.m_flow = Turbine_LP1.inlet.m_flow;
  join_LP1.summary.inlet.m_flow = Turbine_LP1.inlet.m_flow;
  join_LP1.inlet.m_flow = Turbine_LP1.inlet.m_flow;
  join_IP3.'eye[1]'.m_flow = Turbine_LP1.inlet.m_flow;
  join_IP3.summary.outlet1.m_flow = Turbine_LP1.inlet.m_flow;
  join_IP3.outlet1.m_flow = Turbine_LP1.outlet.m_flow;
  Turbine_LP1.summary.outlet.h = Turbine_LP1.outlet.h_outflow;
  Turbine_LP1.summary.inlet.rho = Turbine_LP1.iCom.rho_in;
  Turbine_LP1.summary.outline.h_isen = Turbine_LP1.h_is;
  Turbine_LP1.summary.outline.eta_isen = Turbine_LP1.eta_is;
  Turbine_LP1.efficiency.eta = Turbine_LP1.eta_is;
  join_LP1.summary.outlet1.m_flow = join_LP1.'eye[1]'.m_flow;
  Turbine_LP2.inlet.m_flow = join_LP1.'eye[1]'.m_flow;
  Turbine_LP2.iCom.m_flow_in = join_LP1.'eye[1]'.m_flow;
  Turbine_LP2.summary.inlet.m_flow = join_LP1.'eye[1]'.m_flow;
  Turbine_LP2.summary.outlet.m_flow = join_LP1.'eye[1]'.m_flow;
  Turbine_LP2.eye.m_flow = join_LP1.'eye[1]'.m_flow;
  Turbine_LP2.'eye_int[1]'.m_flow = join_LP1.'eye[1]'.m_flow;
  join_LP2.summary.inlet.m_flow = join_LP1.'eye[1]'.m_flow;
  join_LP2.inlet.m_flow = join_LP1.'eye[1]'.m_flow;
  quadruple17.m_flow = join_LP1.'eye[1]'.m_flow;
  quadruple17.eye.m_flow = join_LP1.'eye[1]'.m_flow;
  join_LP1.summary.outlet2.m_flow = join_LP1.'eye[2]'.m_flow;
  valve_LP1.inlet.m_flow = join_LP1.'eye[2]'.m_flow;
  valve_LP1.pressureLoss.m_flow = join_LP1.'eye[2]'.m_flow;
  valve_LP1.summary.inlet.m_flow = join_LP1.'eye[2]'.m_flow;
  valve_LP1.summary.outlet.m_flow = join_LP1.'eye[2]'.m_flow;
  valve_LP1.eye.m_flow = join_LP1.'eye[2]'.m_flow;
  valve_LP1.'eye_int[1]'.m_flow = join_LP1.'eye[2]'.m_flow;
  preheater_LP2.In1.m_flow = join_LP1.'eye[2]'.m_flow;
  preheater_LP2.shell.'inlet[1]'.m_flow = join_LP1.'eye[2]'.m_flow;
  preheater_LP2.shell.summary.'inlet[1]'.m_flow = join_LP1.'eye[2]'.m_flow;
  quadruple19.m_flow = join_LP1.'eye[2]'.m_flow;
  quadruple19.eye.m_flow = join_LP1.'eye[2]'.m_flow;
  join_LP1.summary.fluid.mass = join_LP1.mass;
  valve_LP1.outlet.m_flow = join_LP1.outlet2.m_flow;
  Pump_preheater_LP1.summary.outline.Delta_p = Pump_preheater_LP1.Delta_p;
  Pump_preheater_LP1.summary.outline.V_flow = Pump_preheater_LP1.V_flow;
  Pump_preheater_LP1.summary.outline.P_fluid = Pump_preheater_LP1.P_fluid;
  Pump_preheater_LP1.eye.m_flow = Pump_preheater_LP1.inlet.m_flow;
  Pump_preheater_LP1.'eye_int[1]'.m_flow = Pump_preheater_LP1.inlet.m_flow;
  Pump_preheater_LP1.summary.inlet.m_flow = Pump_preheater_LP1.inlet.m_flow;
  Pump_preheater_LP1.summary.outlet.m_flow = Pump_preheater_LP1.inlet.m_flow;
  preheater_LP1.shell.summary.'outlet[1]'.m_flow = Pump_preheater_LP1.inlet.m_flow;
  preheater_LP1.'eye_int1[1]'.m_flow = Pump_preheater_LP1.inlet.m_flow;
  preheater_LP1.eye1.m_flow = Pump_preheater_LP1.inlet.m_flow;
  join_LP_main.summary.inlet2.m_flow = Pump_preheater_LP1.inlet.m_flow;
  join_LP_main.pressureLossIn2.m_flow = Pump_preheater_LP1.inlet.m_flow;
  join_LP_main.inlet2.m_flow = Pump_preheater_LP1.inlet.m_flow;
  quadruple14.m_flow = Pump_preheater_LP1.inlet.m_flow;
  quadruple14.eye.m_flow = Pump_preheater_LP1.inlet.m_flow;
  Pump_preheater_LP1.summary.inlet.p = Pump_preheater_LP1.inlet.p;
  preheater_LP1.Out1.p = Pump_preheater_LP1.inlet.p;
  preheater_LP1.shell.'outlet[1]'.p = Pump_preheater_LP1.inlet.p;
  preheater_LP1.shell.'fluidOut[1]'.p = Pump_preheater_LP1.inlet.p;
  preheater_LP1.shell.summary.'outlet[1]'.p = Pump_preheater_LP1.inlet.p;
  preheater_LP1.Out1.m_flow = Pump_preheater_LP1.outlet.m_flow;
  preheater_LP1.shell.'outlet[1]'.m_flow = Pump_preheater_LP1.outlet.m_flow;
  Pump_preheater_LP1.connected2SimCenter.powerAux = Pump_preheater_LP1.P_drive;
  Pump_preheater_LP1.connected2SimCenter.cycleSumModel.cycleSumPort.power_aux = Pump_preheater_LP1.P_drive;
  PI_preheater1.y = Pump_preheater_LP1.P_drive;
  PI_preheater1.fromPU.y = Pump_preheater_LP1.P_drive;
  PI_preheater1.smoothPIDOutput.u = Pump_preheater_LP1.P_drive;
  PI_preheater1.smoothPIDOutput.y = Pump_preheater_LP1.P_drive;
  valve_IP2.summary.outlet.p = valve_IP2.outlet.p;
  preheater_LP1.In1.p = valve_IP2.outlet.p;
  preheater_LP1.shell.'inlet[1]'.p = valve_IP2.outlet.p;
  preheater_LP1.shell.'fluidIn[1]'.p = valve_IP2.outlet.p;
  preheater_LP1.shell.summary.'inlet[1]'.p = valve_IP2.outlet.p;
  valve_IP2.pressureLoss.m_flow = valve_IP2.inlet.m_flow;
  valve_IP2.summary.inlet.m_flow = valve_IP2.inlet.m_flow;
  valve_IP2.summary.outlet.m_flow = valve_IP2.inlet.m_flow;
  valve_IP2.eye.m_flow = valve_IP2.inlet.m_flow;
  valve_IP2.'eye_int[1]'.m_flow = valve_IP2.inlet.m_flow;
  preheater_LP1.In1.m_flow = valve_IP2.inlet.m_flow;
  preheater_LP1.shell.'inlet[1]'.m_flow = valve_IP2.inlet.m_flow;
  preheater_LP1.shell.summary.'inlet[1]'.m_flow = valve_IP2.inlet.m_flow;
  quadruple9.m_flow = valve_IP2.inlet.m_flow;
  quadruple9.eye.m_flow = valve_IP2.inlet.m_flow;
  join_IP3.'eye[2]'.m_flow = valve_IP2.inlet.m_flow;
  join_IP3.summary.outlet2.m_flow = valve_IP2.inlet.m_flow;
  preheater_LP1.In1.h_outflow = valve_IP2.inlet.h_outflow;
  preheater_LP1.shell.'inlet[1]'.h_outflow = valve_IP2.inlet.h_outflow;
  valve_IP2.summary.outline.Delta_p = valve_IP2.pressureLoss.Delta_p;
  join_HP.summary.outlet2.m_flow = join_HP.'eye[2]'.m_flow;
  preheater_HP.In1.m_flow = join_HP.'eye[2]'.m_flow;
  preheater_HP.shell.'inlet[1]'.m_flow = join_HP.'eye[2]'.m_flow;
  preheater_HP.shell.summary.'inlet[1]'.m_flow = join_HP.'eye[2]'.m_flow;
  valve_HP.inlet.m_flow = join_HP.'eye[2]'.m_flow;
  valve_HP.pressureLoss.m_flow = join_HP.'eye[2]'.m_flow;
  valve_HP.summary.inlet.m_flow = join_HP.'eye[2]'.m_flow;
  valve_HP.summary.outlet.m_flow = join_HP.'eye[2]'.m_flow;
  valve_HP.eye.m_flow = join_HP.'eye[2]'.m_flow;
  valve_HP.'eye_int[1]'.m_flow = join_HP.'eye[2]'.m_flow;
  quadruple11.m_flow = join_HP.'eye[2]'.m_flow;
  quadruple11.eye.m_flow = join_HP.'eye[2]'.m_flow;
  join_HP.summary.fluid.mass = join_HP.mass;
  valve_HP.outlet.m_flow = join_HP.outlet2.m_flow;
  preheater_HP.tubes.outlet.m_flow = preheater_HP.Out2.m_flow;
  preheater_HP.shell.'outlet[1]'.m_flow = preheater_HP.Out1.m_flow;
  valveControl_preheater_HP.outlet.m_flow = preheater_HP.Out1.m_flow;
  preheater_HP.shell.'outlet[1]'.p = preheater_HP.Out1.p;
  preheater_HP.shell.'fluidOut[1]'.p = preheater_HP.Out1.p;
  preheater_HP.shell.summary.'outlet[1]'.p = preheater_HP.Out1.p;
  valveControl_preheater_HP.inlet.p = preheater_HP.Out1.p;
  valveControl_preheater_HP.summary.inlet.p = preheater_HP.Out1.p;
  preheater_HP.shell.'outlet[1]'.h_outflow = preheater_HP.Out1.h_outflow;
  valveControl_preheater_HP.outlet.h_outflow = preheater_HP.Out1.h_outflow;
  preheater_HP.shell.'inlet[1]'.p = preheater_HP.In1.p;
  preheater_HP.shell.'fluidIn[1]'.p = preheater_HP.In1.p;
  preheater_HP.shell.summary.'inlet[1]'.p = preheater_HP.In1.p;
  valve_HP.outlet.p = preheater_HP.In1.p;
  valve_HP.summary.outlet.p = preheater_HP.In1.p;
  preheater_HP.shell.'inlet[1]'.h_outflow = preheater_HP.In1.h_outflow;
  valve_HP.inlet.h_outflow = preheater_HP.In1.h_outflow;
  preheater_HP.tubes.fluidIn.T = preheater_HP.tubes.summary.inlet.T;
  preheater_HP.tubes.fluidOut.T = preheater_HP.tubes.summary.outlet.T;
  preheater_HP.tubes.summary.fluid.mass = preheater_HP.tubes.mass;
  preheater_HP.tubes.fluidIn.h = preheater_HP.tubes.summary.inlet.h;
  preheater_HP.tubes.fluidOut.h = preheater_HP.tubes.summary.outlet.h;
  preheater_HP.tubes.heattransfer.heat.T = preheater_HP.tubes.heat.T;
  preheater_HP.wall.innerPhase.T = preheater_HP.tubes.heat.T;
  preheater_HP.tubes.summary.outline.Q_flow_tot = preheater_HP.tubes.heat.Q_flow;
  preheater_HP.tubes.heattransfer.heat.Q_flow = preheater_HP.tubes.heat.Q_flow;
  preheater_HP.shell.summary.'inlet[1]'.h = preheater_HP.shell.'fluidIn[1]'.h;
  preheater_HP.shell.summary.'outlet[1]'.h = preheater_HP.shell.'fluidOut[1]'.h;
  preheater_HP.shell.summary.outline.'volume[1]' = preheater_HP.shell.volume_liq;
  preheater_HP.shell.summary.fluid.'mass[1]' = preheater_HP.shell.mass_liq;
  preheater_HP.shell.summary.fluid.'mass[2]' = preheater_HP.shell.mass_vap;
  preheater_HP.shell.'heat[2]'.T = preheater_HP.shell.'heat[1]'.T;
  preheater_HP.shell.heattransfer.'heat[1]'.T = preheater_HP.shell.'heat[1]'.T;
  preheater_HP.shell.heattransfer.'heat[2]'.T = preheater_HP.shell.'heat[1]'.T;
  preheater_HP.wall.outerPhase.T = preheater_HP.shell.'heat[1]'.T;
  preheater_HP.shell.heattransfer.'heat[1]'.Q_flow = preheater_HP.shell.'heat[1]'.Q_flow;
  preheater_HP.shell.summary.outline.'Q_flow[1]' = preheater_HP.shell.'heat[1]'.Q_flow;
  preheater_HP.shell.heattransfer.'heat[2]'.Q_flow = preheater_HP.shell.'heat[2]'.Q_flow;
  preheater_HP.shell.summary.outline.'Q_flow[2]' = preheater_HP.shell.'heat[2]'.Q_flow;
  preheater_HP.shell.summary.outline.level_abs = preheater_HP.shell.phaseBorder.level_abs;
  preheater_HP.summary.outline.level_abs = preheater_HP.shell.phaseBorder.level_abs;
  preheater_HP.wall.'solid[1]'.T = preheater_HP.wall.'T[1]';
  preheater_HP.wall.summary.'T[1]' = preheater_HP.wall.'T[1]';
  preheater_HP.wall.'solid[2]'.T = preheater_HP.wall.'T[2]';
  preheater_HP.wall.summary.'T[2]' = preheater_HP.wall.'T[2]';
  preheater_HP.wall.'solid[3]'.T = preheater_HP.wall.'T[3]';
  preheater_HP.wall.summary.'T[3]' = preheater_HP.wall.'T[3]';
  preheater_HP.wall.innerPhase.Q_flow = preheater_HP.wall.'Q_flow[1]';
  preheater_HP.wall.summary.'Q_flow[1]' = preheater_HP.wall.'Q_flow[1]';
  preheater_HP.wall.summary.'Q_flow[2]' = preheater_HP.wall.'Q_flow[2]';
  preheater_HP.wall.summary.'Q_flow[3]' = preheater_HP.wall.'Q_flow[3]';
  preheater_HP.wall.summary.'Q_flow[4]' = preheater_HP.wall.'Q_flow[4]';
  valve_HP.summary.outline.Delta_p = valve_HP.pressureLoss.Delta_p;
  valveControl_preheater_HP.summary.outline.opening_ = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.y = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.limiter.y = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.fromPU.u = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.fromPU.y = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.smoothPIDOutput.u = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.smoothPIDOutput.y = valveControl_preheater_HP.opening_in;
  PI_valveControl_preheater_HP.addSat.u1 = valveControl_preheater_HP.opening_in;
  valveControl_preheater_HP_display.x1 = valveControl_preheater_HP.opening_in;
  valveControl_preheater_HP_display.u_aux = valveControl_preheater_HP.opening_in;
  valveControl_preheater_HP.summary.outline.Delta_p = valveControl_preheater_HP.pressureLoss.Delta_p;
  preheater_LP1.tubes.inlet.m_flow = preheater_LP1.In2.m_flow;
  preheater_LP1.tubes.summary.inlet.m_flow = preheater_LP1.In2.m_flow;
  preheater_LP2.tubes.summary.outlet.m_flow = preheater_LP1.In2.m_flow;
  preheater_LP2.'eye_int2[1]'.m_flow = preheater_LP1.In2.m_flow;
  preheater_LP2.eye2.m_flow = preheater_LP1.In2.m_flow;
  quadruple22.m_flow = preheater_LP1.In2.m_flow;
  quadruple22.eye.m_flow = preheater_LP1.In2.m_flow;
  preheater_LP1.tubes.outlet.m_flow = preheater_LP1.Out2.m_flow;
  valvePreFeedWaterTank.outlet.m_flow = preheater_LP1.Out2.m_flow;
  preheater_LP1.shell.'outlet[1]'.h_outflow = preheater_LP1.Out1.h_outflow;
  preheater_LP1.tubes.fluidIn.T = preheater_LP1.tubes.summary.inlet.T;
  preheater_LP1.tubes.fluidOut.T = preheater_LP1.tubes.summary.outlet.T;
  preheater_LP1.tubes.summary.fluid.mass = preheater_LP1.tubes.mass;
  preheater_LP1.tubes.fluidIn.h = preheater_LP1.tubes.summary.inlet.h;
  preheater_LP1.tubes.fluidOut.h = preheater_LP1.tubes.summary.outlet.h;
  preheater_LP1.tubes.heattransfer.heat.T = preheater_LP1.tubes.heat.T;
  preheater_LP1.wall.innerPhase.T = preheater_LP1.tubes.heat.T;
  preheater_LP1.tubes.summary.outline.Q_flow_tot = preheater_LP1.tubes.heat.Q_flow;
  preheater_LP1.tubes.heattransfer.heat.Q_flow = preheater_LP1.tubes.heat.Q_flow;
  preheater_LP1.shell.summary.'inlet[1]'.h = preheater_LP1.shell.'fluidIn[1]'.h;
  preheater_LP1.shell.summary.'outlet[1]'.h = preheater_LP1.shell.'fluidOut[1]'.h;
  preheater_LP1.shell.summary.outline.'volume[1]' = preheater_LP1.shell.volume_liq;
  preheater_LP1.shell.summary.fluid.'mass[1]' = preheater_LP1.shell.mass_liq;
  preheater_LP1.shell.summary.fluid.'mass[2]' = preheater_LP1.shell.mass_vap;
  preheater_LP1.shell.'heat[2]'.T = preheater_LP1.shell.'heat[1]'.T;
  preheater_LP1.shell.heattransfer.'heat[1]'.T = preheater_LP1.shell.'heat[1]'.T;
  preheater_LP1.shell.heattransfer.'heat[2]'.T = preheater_LP1.shell.'heat[1]'.T;
  preheater_LP1.wall.outerPhase.T = preheater_LP1.shell.'heat[1]'.T;
  preheater_LP1.shell.heattransfer.'heat[1]'.Q_flow = preheater_LP1.shell.'heat[1]'.Q_flow;
  preheater_LP1.shell.summary.outline.'Q_flow[1]' = preheater_LP1.shell.'heat[1]'.Q_flow;
  preheater_LP1.shell.heattransfer.'heat[2]'.Q_flow = preheater_LP1.shell.'heat[2]'.Q_flow;
  preheater_LP1.shell.summary.outline.'Q_flow[2]' = preheater_LP1.shell.'heat[2]'.Q_flow;
  preheater_LP1.shell.summary.outline.level_abs = preheater_LP1.shell.phaseBorder.level_abs;
  preheater_LP1.summary.outline.level_abs = preheater_LP1.shell.phaseBorder.level_abs;
  preheater_LP1.wall.'solid[1]'.T = preheater_LP1.wall.'T[1]';
  preheater_LP1.wall.summary.'T[1]' = preheater_LP1.wall.'T[1]';
  preheater_LP1.wall.'solid[2]'.T = preheater_LP1.wall.'T[2]';
  preheater_LP1.wall.summary.'T[2]' = preheater_LP1.wall.'T[2]';
  preheater_LP1.wall.'solid[3]'.T = preheater_LP1.wall.'T[3]';
  preheater_LP1.wall.summary.'T[3]' = preheater_LP1.wall.'T[3]';
  preheater_LP1.wall.innerPhase.Q_flow = preheater_LP1.wall.'Q_flow[1]';
  preheater_LP1.wall.summary.'Q_flow[1]' = preheater_LP1.wall.'Q_flow[1]';
  preheater_LP1.wall.summary.'Q_flow[2]' = preheater_LP1.wall.'Q_flow[2]';
  preheater_LP1.wall.summary.'Q_flow[3]' = preheater_LP1.wall.'Q_flow[3]';
  preheater_LP1.wall.summary.'Q_flow[4]' = preheater_LP1.wall.'Q_flow[4]';
  preheater_HP.shell.phaseBorder.level_rel = preheater_HP.level;
  preheater_HP.shell.summary.outline.level_rel = preheater_HP.level;
  preheater_HP.shell.summary.outline.'yps[1]' = preheater_HP.level;
  preheater_HP.summary.outline.level_rel = preheater_HP.level;
  PI_valveControl_preheater_HP.u_s = preheater_HP.level;
  PI_valveControl_preheater_HP.feedback.u1 = preheater_HP.level;
  fillingLevel_preheater_HP.u_in = preheater_HP.level;
  fillingLevel_preheater_HP.u_int = preheater_HP.level;
  PI_valveControl_preheater_HP.resetP.y = PI_valveControl_preheater_HP.P.u;
  PI_valveControl_preheater_HP.addPID.u1 = PI_valveControl_preheater_HP.P.y;
  PI_valveControl_preheater_HP.switch_OnOff_I.y = PI_valveControl_preheater_HP.I.u;
  PI_valveControl_preheater_HP.resetPD.u1 = PI_valveControl_preheater_HP.addPID.y;
  PI_valveControl_preheater_HP.gainTrack.y = PI_valveControl_preheater_HP.addI.u2;
  PI_valveControl_preheater_HP.switch_OnOff_I.u1 = PI_valveControl_preheater_HP.addI.y;
  PI_valveControl_preheater_HP.switch_OnOff.y = PI_valveControl_preheater_HP.limiter.u;
  PI_valveControl_preheater_HP.addSat.u2 = PI_valveControl_preheater_HP.limiter.u;
  PI_valveControl_preheater_HP.smoothPIDOutput1.u = PI_valveControl_preheater_HP.limiter.u;
  PI_valveControl_preheater_HP.smoothPIDOutput1.y = PI_valveControl_preheater_HP.limiter.u;
  PI_valveControl_preheater_HP.toPU.u = PI_valveControl_preheater_HP.addI.u1;
  PI_valveControl_preheater_HP.toPU.y = PI_valveControl_preheater_HP.addI.u1;
  PI_valveControl_preheater_HP.feedback.y = PI_valveControl_preheater_HP.addI.u1;
  PI_valveControl_preheater_HP.smoothPIDInput.u = PI_valveControl_preheater_HP.addI.u1;
  PI_valveControl_preheater_HP.smoothPIDInput.y = PI_valveControl_preheater_HP.addI.u1;
  PI_valveControl_preheater_HP.resetP.u1 = PI_valveControl_preheater_HP.addI.u1;
  PI_valveControl_preheater_HP.resetPD.y = PI_valveControl_preheater_HP.switch_OnOff.u1;
  PI_valveControl_preheater_HP.addSat.y = PI_valveControl_preheater_HP.gainTrack.u;
  PI_valveControl_preheater_HP.I_activation.u = PI_valveControl_preheater_HP.time_lag_I_activation.y;
  condenser.shell.phaseBorder.level_rel = condenser.level;
  condenser.shell.summary.outline.level_rel = condenser.level;
  condenser.shell.summary.outline.'yps[1]' = condenser.level;
  condenser.summary.outline.level_rel = condenser.level;
  measurement.u = condenser.level;
  fillingLevel_condenser.u_in = condenser.level;
  fillingLevel_condenser.u_int = condenser.level;
  valvePreFeedWaterTank.summary.outline.Delta_p = valvePreFeedWaterTank.pressureLoss.Delta_p;
  join_LP_main.summary.fluid.mass = join_LP_main.mass;
  preheater_LP1.'eye_int2[1]'.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  preheater_LP1.eye2.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  valvePreFeedWaterTank.inlet.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  valvePreFeedWaterTank.pressureLoss.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  valvePreFeedWaterTank.summary.inlet.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  valvePreFeedWaterTank.summary.outlet.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  valvePreFeedWaterTank.eye.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  valvePreFeedWaterTank.'eye_int[1]'.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  join_LP_main.summary.inlet1.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  join_LP_main.pressureLossIn1.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  join_LP_main.inlet1.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  quadruple10.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  quadruple10.eye.m_flow = preheater_LP1.tubes.summary.outlet.m_flow;
  preheater_LP1.shell.phaseBorder.level_rel = preheater_LP1.level;
  preheater_LP1.shell.summary.outline.level_rel = preheater_LP1.level;
  preheater_LP1.shell.summary.outline.'yps[1]' = preheater_LP1.level;
  preheater_LP1.summary.outline.level_rel = preheater_LP1.level;
  PI_preheater1.u_m = preheater_LP1.level;
  PI_preheater1.feedback.u2 = preheater_LP1.level;
  fillingLevel_preheater_LP1.u_in = preheater_LP1.level;
  fillingLevel_preheater_LP1.u_int = preheater_LP1.level;
  PI_preheater1.resetP.y = PI_preheater1.P.u;
  PI_preheater1.addPID.u1 = PI_preheater1.P.y;
  PI_preheater1.switch_OnOff_I.y = PI_preheater1.I.u;
  PI_preheater1.resetPD.u1 = PI_preheater1.addPID.y;
  PI_preheater1.gainTrack.y = PI_preheater1.addI.u2;
  PI_preheater1.switch_OnOff_I.u1 = PI_preheater1.addI.y;
  PI_preheater1.switch_OnOff.y = PI_preheater1.limiter.u;
  PI_preheater1.addSat.u2 = PI_preheater1.limiter.u;
  PI_preheater1.smoothPIDOutput1.u = PI_preheater1.limiter.u;
  PI_preheater1.smoothPIDOutput1.y = PI_preheater1.limiter.u;
  PI_preheater1.fromPU.u = PI_preheater1.limiter.y;
  PI_preheater1.addSat.u1 = PI_preheater1.limiter.y;
  PI_preheater1.toPU.y = PI_preheater1.addI.u1;
  PI_preheater1.resetP.u1 = PI_preheater1.addI.u1;
  PI_preheater1.feedback.y = PI_preheater1.toPU.u;
  PI_preheater1.smoothPIDInput.u = PI_preheater1.toPU.u;
  PI_preheater1.smoothPIDInput.y = PI_preheater1.toPU.u;
  PI_preheater1.resetPD.y = PI_preheater1.switch_OnOff.u1;
  PI_preheater1.addSat.y = PI_preheater1.gainTrack.u;
  PI_preheater1.I_activation.u = PI_preheater1.time_lag_I_activation.y;
  Turbine_IP3.iCom.m_flow_in = Turbine_IP3.inlet.m_flow;
  Turbine_IP3.summary.inlet.m_flow = Turbine_IP3.inlet.m_flow;
  Turbine_IP3.summary.outlet.m_flow = Turbine_IP3.inlet.m_flow;
  Turbine_IP3.eye.m_flow = Turbine_IP3.inlet.m_flow;
  Turbine_IP3.'eye_int[1]'.m_flow = Turbine_IP3.inlet.m_flow;
  split_IP2.'eye[1]'.m_flow = Turbine_IP3.inlet.m_flow;
  split_IP2.summary.outlet1.m_flow = Turbine_IP3.inlet.m_flow;
  join_IP3.summary.inlet.m_flow = Turbine_IP3.inlet.m_flow;
  join_IP3.inlet.m_flow = Turbine_IP3.inlet.m_flow;
  quadruple16.m_flow = Turbine_IP3.inlet.m_flow;
  quadruple16.eye.m_flow = Turbine_IP3.inlet.m_flow;
  split_IP2.outlet1.m_flow = Turbine_IP3.outlet.m_flow;
  Turbine_IP3.summary.outlet.h = Turbine_IP3.outlet.h_outflow;
  Turbine_IP3.summary.inlet.rho = Turbine_IP3.iCom.rho_in;
  Turbine_IP3.summary.outline.h_isen = Turbine_IP3.h_is;
  Turbine_IP3.summary.outline.eta_isen = Turbine_IP3.eta_is;
  Turbine_IP3.efficiency.eta = Turbine_IP3.eta_is;
  Turbine_IP2.summary.outlet.h = Turbine_IP2.outlet.h_outflow;
  Turbine_IP2.summary.inlet.rho = Turbine_IP2.iCom.rho_in;
  Turbine_IP2.summary.outline.h_isen = Turbine_IP2.h_is;
  Turbine_IP2.summary.outline.eta_isen = Turbine_IP2.eta_is;
  Turbine_IP2.efficiency.eta = Turbine_IP2.eta_is;
  split_IP2.summary.fluid.mass = split_IP2.mass;
  split_IP2.outlet2.m_flow = valve_IP1.outlet.m_flow;
  join_IP3.summary.fluid.mass = join_IP3.mass;
  join_IP3.outlet2.m_flow = valve_IP2.outlet.m_flow;
  Turbine_LP3.iCom.m_flow_in = Turbine_LP3.inlet.m_flow;
  Turbine_LP3.summary.inlet.m_flow = Turbine_LP3.inlet.m_flow;
  Turbine_LP3.summary.outlet.m_flow = Turbine_LP3.inlet.m_flow;
  Turbine_LP3.eye.m_flow = Turbine_LP3.inlet.m_flow;
  Turbine_LP3.'eye_int[1]'.m_flow = Turbine_LP3.inlet.m_flow;
  join_LP2.'eye[1]'.m_flow = Turbine_LP3.inlet.m_flow;
  join_LP2.summary.outlet1.m_flow = Turbine_LP3.inlet.m_flow;
  split_LP3.summary.inlet.m_flow = Turbine_LP3.inlet.m_flow;
  split_LP3.inlet.m_flow = Turbine_LP3.inlet.m_flow;
  quadruple18.m_flow = Turbine_LP3.inlet.m_flow;
  quadruple18.eye.m_flow = Turbine_LP3.inlet.m_flow;
  join_LP2.outlet1.m_flow = Turbine_LP3.outlet.m_flow;
  Turbine_LP3.summary.outlet.h = Turbine_LP3.outlet.h_outflow;
  Turbine_LP3.summary.inlet.rho = Turbine_LP3.iCom.rho_in;
  Turbine_LP3.summary.outline.h_isen = Turbine_LP3.h_is;
  Turbine_LP3.summary.outline.eta_isen = Turbine_LP3.eta_is;
  Turbine_LP3.efficiency.eta = Turbine_LP3.eta_is;
  Turbine_LP2.outlet.m_flow = join_LP1.outlet1.m_flow;
  Turbine_LP2.summary.outlet.h = Turbine_LP2.outlet.h_outflow;
  Turbine_LP2.summary.inlet.rho = Turbine_LP2.iCom.rho_in;
  Turbine_LP2.summary.outline.h_isen = Turbine_LP2.h_is;
  Turbine_LP2.summary.outline.eta_isen = Turbine_LP2.eta_is;
  Turbine_LP2.efficiency.eta = Turbine_LP2.eta_is;
  join_LP2.summary.outlet2.m_flow = join_LP2.'eye[2]'.m_flow;
  preheater_LP3.In1.m_flow = join_LP2.'eye[2]'.m_flow;
  preheater_LP3.shell.'inlet[1]'.m_flow = join_LP2.'eye[2]'.m_flow;
  preheater_LP3.shell.summary.'inlet[1]'.m_flow = join_LP2.'eye[2]'.m_flow;
  valve_LP2.inlet.m_flow = join_LP2.'eye[2]'.m_flow;
  valve_LP2.pressureLoss.m_flow = join_LP2.'eye[2]'.m_flow;
  valve_LP2.summary.inlet.m_flow = join_LP2.'eye[2]'.m_flow;
  valve_LP2.summary.outlet.m_flow = join_LP2.'eye[2]'.m_flow;
  valve_LP2.eye.m_flow = join_LP2.'eye[2]'.m_flow;
  valve_LP2.'eye_int[1]'.m_flow = join_LP2.'eye[2]'.m_flow;
  quadruple20.m_flow = join_LP2.'eye[2]'.m_flow;
  quadruple20.eye.m_flow = join_LP2.'eye[2]'.m_flow;
  join_LP2.summary.fluid.mass = join_LP2.mass;
  valve_LP2.outlet.m_flow = join_LP2.outlet2.m_flow;
  split_LP3.summary.outlet2.m_flow = split_LP3.'eye[2]'.m_flow;
  preheater_LP4.In1.m_flow = split_LP3.'eye[2]'.m_flow;
  preheater_LP4.shell.'inlet[1]'.m_flow = split_LP3.'eye[2]'.m_flow;
  preheater_LP4.shell.summary.'inlet[1]'.m_flow = split_LP3.'eye[2]'.m_flow;
  valve_LP3.inlet.m_flow = split_LP3.'eye[2]'.m_flow;
  valve_LP3.pressureLoss.m_flow = split_LP3.'eye[2]'.m_flow;
  valve_LP3.summary.inlet.m_flow = split_LP3.'eye[2]'.m_flow;
  valve_LP3.summary.outlet.m_flow = split_LP3.'eye[2]'.m_flow;
  valve_LP3.eye.m_flow = split_LP3.'eye[2]'.m_flow;
  valve_LP3.'eye_int[1]'.m_flow = split_LP3.'eye[2]'.m_flow;
  quadruple21.m_flow = split_LP3.'eye[2]'.m_flow;
  quadruple21.eye.m_flow = split_LP3.'eye[2]'.m_flow;
  split_LP3.summary.fluid.mass = split_LP3.mass;
  valve_LP3.outlet.m_flow = split_LP3.outlet2.m_flow;
  valve_LP1.summary.outlet.p = valve_LP1.outlet.p;
  preheater_LP2.In1.p = valve_LP1.outlet.p;
  preheater_LP2.shell.'inlet[1]'.p = valve_LP1.outlet.p;
  preheater_LP2.shell.'fluidIn[1]'.p = valve_LP1.outlet.p;
  preheater_LP2.shell.summary.'inlet[1]'.p = valve_LP1.outlet.p;
  preheater_LP2.In1.h_outflow = valve_LP1.inlet.h_outflow;
  preheater_LP2.shell.'inlet[1]'.h_outflow = valve_LP1.inlet.h_outflow;
  valve_LP1.summary.outline.Delta_p = valve_LP1.pressureLoss.Delta_p;
  preheater_LP2.tubes.inlet.m_flow = preheater_LP2.In2.m_flow;
  preheater_LP2.tubes.summary.inlet.m_flow = preheater_LP2.In2.m_flow;
  join_preheater_LP3.summary.outlet.m_flow = preheater_LP2.In2.m_flow;
  join_preheater_LP3.pressureLossOut.m_flow = preheater_LP2.In2.m_flow;
  join_preheater_LP3.eye.m_flow = preheater_LP2.In2.m_flow;
  join_preheater_LP3.'eye_int[1]'.m_flow = preheater_LP2.In2.m_flow;
  preheater_LP2.tubes.outlet.m_flow = preheater_LP2.Out2.m_flow;
  preheater_LP2.shell.'outlet[1]'.m_flow = preheater_LP2.Out1.m_flow;
  valveControl_preheater_LP2.outlet.m_flow = preheater_LP2.Out1.m_flow;
  preheater_LP2.shell.'outlet[1]'.p = preheater_LP2.Out1.p;
  preheater_LP2.shell.'fluidOut[1]'.p = preheater_LP2.Out1.p;
  preheater_LP2.shell.summary.'outlet[1]'.p = preheater_LP2.Out1.p;
  valveControl_preheater_LP2.inlet.p = preheater_LP2.Out1.p;
  valveControl_preheater_LP2.summary.inlet.p = preheater_LP2.Out1.p;
  preheater_LP2.shell.'outlet[1]'.h_outflow = preheater_LP2.Out1.h_outflow;
  valveControl_preheater_LP2.outlet.h_outflow = preheater_LP2.Out1.h_outflow;
  valveControl_preheater_LP2.summary.inlet.h = preheater_LP2.Out1.h_outflow;
  valveControl_preheater_LP2.summary.outlet.h = preheater_LP2.Out1.h_outflow;
  preheater_LP2.tubes.fluidIn.T = preheater_LP2.tubes.summary.inlet.T;
  preheater_LP2.tubes.fluidOut.T = preheater_LP2.tubes.summary.outlet.T;
  preheater_LP2.tubes.summary.fluid.mass = preheater_LP2.tubes.mass;
  preheater_LP2.tubes.fluidIn.h = preheater_LP2.tubes.summary.inlet.h;
  preheater_LP2.tubes.fluidOut.h = preheater_LP2.tubes.summary.outlet.h;
  preheater_LP2.tubes.heattransfer.heat.T = preheater_LP2.tubes.heat.T;
  preheater_LP2.wall.innerPhase.T = preheater_LP2.tubes.heat.T;
  preheater_LP2.tubes.summary.outline.Q_flow_tot = preheater_LP2.tubes.heat.Q_flow;
  preheater_LP2.tubes.heattransfer.heat.Q_flow = preheater_LP2.tubes.heat.Q_flow;
  preheater_LP2.shell.summary.'inlet[1]'.h = preheater_LP2.shell.'fluidIn[1]'.h;
  preheater_LP2.shell.summary.'outlet[1]'.h = preheater_LP2.shell.'fluidOut[1]'.h;
  preheater_LP2.shell.summary.outline.'volume[1]' = preheater_LP2.shell.volume_liq;
  preheater_LP2.shell.summary.fluid.'mass[1]' = preheater_LP2.shell.mass_liq;
  preheater_LP2.shell.summary.fluid.'mass[2]' = preheater_LP2.shell.mass_vap;
  preheater_LP2.shell.'heat[2]'.T = preheater_LP2.shell.'heat[1]'.T;
  preheater_LP2.shell.heattransfer.'heat[1]'.T = preheater_LP2.shell.'heat[1]'.T;
  preheater_LP2.shell.heattransfer.'heat[2]'.T = preheater_LP2.shell.'heat[1]'.T;
  preheater_LP2.wall.outerPhase.T = preheater_LP2.shell.'heat[1]'.T;
  preheater_LP2.shell.heattransfer.'heat[1]'.Q_flow = preheater_LP2.shell.'heat[1]'.Q_flow;
  preheater_LP2.shell.summary.outline.'Q_flow[1]' = preheater_LP2.shell.'heat[1]'.Q_flow;
  preheater_LP2.shell.heattransfer.'heat[2]'.Q_flow = preheater_LP2.shell.'heat[2]'.Q_flow;
  preheater_LP2.shell.summary.outline.'Q_flow[2]' = preheater_LP2.shell.'heat[2]'.Q_flow;
  preheater_LP2.shell.summary.outline.level_abs = preheater_LP2.shell.phaseBorder.level_abs;
  preheater_LP2.summary.outline.level_abs = preheater_LP2.shell.phaseBorder.level_abs;
  preheater_LP2.wall.'solid[1]'.T = preheater_LP2.wall.'T[1]';
  preheater_LP2.wall.summary.'T[1]' = preheater_LP2.wall.'T[1]';
  preheater_LP2.wall.'solid[2]'.T = preheater_LP2.wall.'T[2]';
  preheater_LP2.wall.summary.'T[2]' = preheater_LP2.wall.'T[2]';
  preheater_LP2.wall.'solid[3]'.T = preheater_LP2.wall.'T[3]';
  preheater_LP2.wall.summary.'T[3]' = preheater_LP2.wall.'T[3]';
  preheater_LP2.wall.innerPhase.Q_flow = preheater_LP2.wall.'Q_flow[1]';
  preheater_LP2.wall.summary.'Q_flow[1]' = preheater_LP2.wall.'Q_flow[1]';
  preheater_LP2.wall.summary.'Q_flow[2]' = preheater_LP2.wall.'Q_flow[2]';
  preheater_LP2.wall.summary.'Q_flow[3]' = preheater_LP2.wall.'Q_flow[3]';
  preheater_LP2.wall.summary.'Q_flow[4]' = preheater_LP2.wall.'Q_flow[4]';
  preheater_LP2.'eye_int1[1]'.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  preheater_LP2.eye1.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  preheater_LP3.aux1.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  preheater_LP3.shell.'inlet[2]'.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  preheater_LP3.shell.summary.'inlet[2]'.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  valveControl_preheater_LP2.inlet.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  valveControl_preheater_LP2.pressureLoss.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  valveControl_preheater_LP2.summary.inlet.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  valveControl_preheater_LP2.summary.outlet.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  valveControl_preheater_LP2.eye.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  valveControl_preheater_LP2.'eye_int[1]'.m_flow = preheater_LP2.shell.summary.'outlet[1]'.m_flow;
  preheater_LP3.tubes.inlet.m_flow = preheater_LP3.In2.m_flow;
  preheater_LP3.tubes.summary.inlet.m_flow = preheater_LP3.In2.m_flow;
  preheater_LP4.tubes.summary.outlet.m_flow = preheater_LP3.In2.m_flow;
  preheater_LP4.eye2.m_flow = preheater_LP3.In2.m_flow;
  preheater_LP4.'eye_int2[1]'.m_flow = preheater_LP3.In2.m_flow;
  quadruple24.m_flow = preheater_LP3.In2.m_flow;
  quadruple24.eye.m_flow = preheater_LP3.In2.m_flow;
  preheater_LP3.tubes.outlet.m_flow = preheater_LP3.Out2.m_flow;
  preheater_LP3.shell.'outlet[1]'.m_flow = preheater_LP3.Out1.m_flow;
  Pump_preheater_LP3.outlet.m_flow = preheater_LP3.Out1.m_flow;
  valve_afterPumpLP3.outlet.m_flow = preheater_LP3.Out1.m_flow;
  preheater_LP3.shell.'outlet[1]'.p = preheater_LP3.Out1.p;
  preheater_LP3.shell.'fluidOut[1]'.p = preheater_LP3.Out1.p;
  preheater_LP3.shell.summary.'outlet[1]'.p = preheater_LP3.Out1.p;
  Pump_preheater_LP3.inlet.p = preheater_LP3.Out1.p;
  Pump_preheater_LP3.summary.inlet.p = preheater_LP3.Out1.p;
  preheater_LP3.shell.'outlet[1]'.h_outflow = preheater_LP3.Out1.h_outflow;
  preheater_LP3.shell.'inlet[1]'.p = preheater_LP3.In1.p;
  preheater_LP3.shell.'fluidIn[1]'.p = preheater_LP3.In1.p;
  preheater_LP3.shell.summary.'inlet[1]'.p = preheater_LP3.In1.p;
  valve_LP2.outlet.p = preheater_LP3.In1.p;
  valve_LP2.summary.outlet.p = preheater_LP3.In1.p;
  preheater_LP3.shell.'inlet[1]'.h_outflow = preheater_LP3.In1.h_outflow;
  valve_LP2.inlet.h_outflow = preheater_LP3.In1.h_outflow;
  preheater_LP3.shell.'inlet[2]'.p = preheater_LP3.aux1.p;
  preheater_LP3.shell.'fluidIn[2]'.p = preheater_LP3.aux1.p;
  preheater_LP3.shell.summary.'inlet[2]'.p = preheater_LP3.aux1.p;
  valveControl_preheater_LP2.outlet.p = preheater_LP3.aux1.p;
  valveControl_preheater_LP2.summary.outlet.p = preheater_LP3.aux1.p;
  preheater_LP3.shell.'inlet[2]'.h_outflow = preheater_LP3.aux1.h_outflow;
  valveControl_preheater_LP2.inlet.h_outflow = preheater_LP3.aux1.h_outflow;
  preheater_LP3.reallocateHeatFlows.'heatVector[1]'.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.reallocateHeatFlows.'heatVector[2]'.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.shell.'heat[1]'.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.shell.'heat[2]'.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.shell.heattransfer.'heat[1]'.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.shell.heattransfer.'heat[2]'.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.wall.outerPhase.T = preheater_LP3.reallocateHeatFlows.heatScalar.T;
  preheater_LP3.wall.'Q_flow[4]' = preheater_LP3.reallocateHeatFlows.heatScalar.Q_flow;
  preheater_LP3.wall.summary.'Q_flow[4]' = preheater_LP3.reallocateHeatFlows.heatScalar.Q_flow;
  preheater_LP3.tubes.fluidIn.T = preheater_LP3.tubes.summary.inlet.T;
  preheater_LP3.tubes.fluidOut.T = preheater_LP3.tubes.summary.outlet.T;
  preheater_LP3.tubes.summary.fluid.mass = preheater_LP3.tubes.mass;
  preheater_LP3.tubes.fluidIn.h = preheater_LP3.tubes.summary.inlet.h;
  preheater_LP3.tubes.fluidOut.h = preheater_LP3.tubes.summary.outlet.h;
  preheater_LP3.tubes.heattransfer.heat.T = preheater_LP3.tubes.heat.T;
  preheater_LP3.wall.innerPhase.T = preheater_LP3.tubes.heat.T;
  preheater_LP3.tubes.summary.outline.Q_flow_tot = preheater_LP3.tubes.heat.Q_flow;
  preheater_LP3.tubes.heattransfer.heat.Q_flow = preheater_LP3.tubes.heat.Q_flow;
  preheater_LP3.shell.summary.'inlet[1]'.h = preheater_LP3.shell.'fluidIn[1]'.h;
  preheater_LP3.shell.summary.'inlet[2]'.h = preheater_LP3.shell.'fluidIn[2]'.h;
  preheater_LP3.shell.summary.'outlet[1]'.h = preheater_LP3.shell.'fluidOut[1]'.h;
  preheater_LP3.shell.summary.outline.'volume[1]' = preheater_LP3.shell.volume_liq;
  preheater_LP3.shell.summary.fluid.'mass[1]' = preheater_LP3.shell.mass_liq;
  preheater_LP3.shell.summary.fluid.'mass[2]' = preheater_LP3.shell.mass_vap;
  preheater_LP3.shell.heattransfer.'heat[1]'.Q_flow = preheater_LP3.shell.'heat[1]'.Q_flow;
  preheater_LP3.shell.summary.outline.'Q_flow[1]' = preheater_LP3.shell.'heat[1]'.Q_flow;
  preheater_LP3.shell.heattransfer.'heat[2]'.Q_flow = preheater_LP3.shell.'heat[2]'.Q_flow;
  preheater_LP3.shell.summary.outline.'Q_flow[2]' = preheater_LP3.shell.'heat[2]'.Q_flow;
  preheater_LP3.shell.summary.outline.level_abs = preheater_LP3.shell.phaseBorder.level_abs;
  preheater_LP3.summary.outline.level_abs = preheater_LP3.shell.phaseBorder.level_abs;
  preheater_LP3.wall.'solid[1]'.T = preheater_LP3.wall.'T[1]';
  preheater_LP3.wall.summary.'T[1]' = preheater_LP3.wall.'T[1]';
  preheater_LP3.wall.'solid[2]'.T = preheater_LP3.wall.'T[2]';
  preheater_LP3.wall.summary.'T[2]' = preheater_LP3.wall.'T[2]';
  preheater_LP3.wall.'solid[3]'.T = preheater_LP3.wall.'T[3]';
  preheater_LP3.wall.summary.'T[3]' = preheater_LP3.wall.'T[3]';
  preheater_LP3.wall.innerPhase.Q_flow = preheater_LP3.wall.'Q_flow[1]';
  preheater_LP3.wall.summary.'Q_flow[1]' = preheater_LP3.wall.'Q_flow[1]';
  preheater_LP3.wall.summary.'Q_flow[2]' = preheater_LP3.wall.'Q_flow[2]';
  preheater_LP3.wall.summary.'Q_flow[3]' = preheater_LP3.wall.'Q_flow[3]';
  preheater_LP4.tubes.outlet.m_flow = preheater_LP4.Out2.m_flow;
  preheater_LP4.shell.'outlet[1]'.m_flow = preheater_LP4.Out1.m_flow;
  valveControl_preheater_LP4.outlet.m_flow = preheater_LP4.Out1.m_flow;
  preheater_LP4.shell.'outlet[1]'.p = preheater_LP4.Out1.p;
  preheater_LP4.shell.'fluidOut[1]'.p = preheater_LP4.Out1.p;
  preheater_LP4.shell.summary.'outlet[1]'.p = preheater_LP4.Out1.p;
  valveControl_preheater_LP4.inlet.p = preheater_LP4.Out1.p;
  valveControl_preheater_LP4.summary.inlet.p = preheater_LP4.Out1.p;
  preheater_LP4.shell.'outlet[1]'.h_outflow = preheater_LP4.Out1.h_outflow;
  valveControl_preheater_LP4.outlet.h_outflow = preheater_LP4.Out1.h_outflow;
  valveControl_preheater_LP4.summary.inlet.h = preheater_LP4.Out1.h_outflow;
  valveControl_preheater_LP4.summary.outlet.h = preheater_LP4.Out1.h_outflow;
  preheater_LP4.shell.'inlet[1]'.p = preheater_LP4.In1.p;
  preheater_LP4.shell.'fluidIn[1]'.p = preheater_LP4.In1.p;
  preheater_LP4.shell.summary.'inlet[1]'.p = preheater_LP4.In1.p;
  valve_LP3.outlet.p = preheater_LP4.In1.p;
  valve_LP3.summary.outlet.p = preheater_LP4.In1.p;
  preheater_LP4.shell.'inlet[1]'.h_outflow = preheater_LP4.In1.h_outflow;
  valve_LP3.inlet.h_outflow = preheater_LP4.In1.h_outflow;
  preheater_LP4.reallocateHeatFlows.'heatVector[1]'.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.reallocateHeatFlows.'heatVector[2]'.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.shell.'heat[1]'.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.shell.'heat[2]'.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.shell.heattransfer.'heat[1]'.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.shell.heattransfer.'heat[2]'.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.wall.outerPhase.T = preheater_LP4.reallocateHeatFlows.heatScalar.T;
  preheater_LP4.wall.'Q_flow[4]' = preheater_LP4.reallocateHeatFlows.heatScalar.Q_flow;
  preheater_LP4.wall.summary.'Q_flow[4]' = preheater_LP4.reallocateHeatFlows.heatScalar.Q_flow;
  preheater_LP4.tubes.fluidIn.T = preheater_LP4.tubes.summary.inlet.T;
  preheater_LP4.tubes.fluidOut.T = preheater_LP4.tubes.summary.outlet.T;
  preheater_LP4.tubes.summary.fluid.mass = preheater_LP4.tubes.mass;
  preheater_LP4.tubes.fluidIn.h = preheater_LP4.tubes.summary.inlet.h;
  preheater_LP4.tubes.fluidOut.h = preheater_LP4.tubes.summary.outlet.h;
  preheater_LP4.tubes.heattransfer.heat.T = preheater_LP4.tubes.heat.T;
  preheater_LP4.wall.innerPhase.T = preheater_LP4.tubes.heat.T;
  preheater_LP4.tubes.summary.outline.Q_flow_tot = preheater_LP4.tubes.heat.Q_flow;
  preheater_LP4.tubes.heattransfer.heat.Q_flow = preheater_LP4.tubes.heat.Q_flow;
  preheater_LP4.shell.summary.'inlet[1]'.h = preheater_LP4.shell.'fluidIn[1]'.h;
  preheater_LP4.shell.summary.'outlet[1]'.h = preheater_LP4.shell.'fluidOut[1]'.h;
  preheater_LP4.shell.summary.outline.'volume[1]' = preheater_LP4.shell.volume_liq;
  preheater_LP4.shell.summary.fluid.'mass[1]' = preheater_LP4.shell.mass_liq;
  preheater_LP4.shell.summary.fluid.'mass[2]' = preheater_LP4.shell.mass_vap;
  preheater_LP4.shell.heattransfer.'heat[1]'.Q_flow = preheater_LP4.shell.'heat[1]'.Q_flow;
  preheater_LP4.shell.summary.outline.'Q_flow[1]' = preheater_LP4.shell.'heat[1]'.Q_flow;
  preheater_LP4.shell.heattransfer.'heat[2]'.Q_flow = preheater_LP4.shell.'heat[2]'.Q_flow;
  preheater_LP4.shell.summary.outline.'Q_flow[2]' = preheater_LP4.shell.'heat[2]'.Q_flow;
  preheater_LP4.shell.summary.outline.level_abs = preheater_LP4.shell.phaseBorder.level_abs;
  preheater_LP4.summary.outline.level_abs = preheater_LP4.shell.phaseBorder.level_abs;
  preheater_LP4.wall.'solid[1]'.T = preheater_LP4.wall.'T[1]';
  preheater_LP4.wall.summary.'T[1]' = preheater_LP4.wall.'T[1]';
  preheater_LP4.wall.'solid[2]'.T = preheater_LP4.wall.'T[2]';
  preheater_LP4.wall.summary.'T[2]' = preheater_LP4.wall.'T[2]';
  preheater_LP4.wall.'solid[3]'.T = preheater_LP4.wall.'T[3]';
  preheater_LP4.wall.summary.'T[3]' = preheater_LP4.wall.'T[3]';
  preheater_LP4.wall.innerPhase.Q_flow = preheater_LP4.wall.'Q_flow[1]';
  preheater_LP4.wall.summary.'Q_flow[1]' = preheater_LP4.wall.'Q_flow[1]';
  preheater_LP4.wall.summary.'Q_flow[2]' = preheater_LP4.wall.'Q_flow[2]';
  preheater_LP4.wall.summary.'Q_flow[3]' = preheater_LP4.wall.'Q_flow[3]';
  Pump_preheater_LP3.summary.outline.Delta_p = Pump_preheater_LP3.Delta_p;
  Pump_preheater_LP3.summary.outline.V_flow = Pump_preheater_LP3.V_flow;
  Pump_preheater_LP3.summary.outline.P_fluid = Pump_preheater_LP3.P_fluid;
  Pump_preheater_LP3.summary.outlet.p = Pump_preheater_LP3.outlet.p;
  valve_afterPumpLP3.inlet.p = Pump_preheater_LP3.outlet.p;
  valve_afterPumpLP3.summary.inlet.p = Pump_preheater_LP3.outlet.p;
  valve_afterPumpLP3.outlet.h_outflow = Pump_preheater_LP3.outlet.h_outflow;
  preheater_LP3.eye1.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  preheater_LP3.'eye_int1[1]'.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  Pump_preheater_LP3.inlet.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  Pump_preheater_LP3.eye.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  Pump_preheater_LP3.'eye_int[1]'.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  Pump_preheater_LP3.summary.inlet.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  Pump_preheater_LP3.summary.outlet.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.inlet.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.pressureLoss.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.summary.inlet.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.summary.outlet.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.eye.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.'eye_int[1]'.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  join_preheater_LP3.summary.inlet2.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  join_preheater_LP3.pressureLossIn2.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  join_preheater_LP3.inlet2.m_flow = preheater_LP3.shell.summary.'outlet[1]'.m_flow;
  valve_afterPumpLP3.summary.outline.Delta_p = valve_afterPumpLP3.pressureLoss.Delta_p;
  valveControl_preheater_LP2.summary.outline.Delta_p = valveControl_preheater_LP2.pressureLoss.Delta_p;
  join_preheater_LP3.summary.fluid.mass = join_preheater_LP3.mass;
  preheater_LP3.eye2.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  preheater_LP3.'eye_int2[1]'.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  join_preheater_LP3.summary.inlet1.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  join_preheater_LP3.pressureLossIn1.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  join_preheater_LP3.inlet1.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  quadruple23.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  quadruple23.eye.m_flow = preheater_LP3.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP4.summary.outline.Delta_p = valveControl_preheater_LP4.pressureLoss.Delta_p;
  valve_LP2.summary.outline.Delta_p = valve_LP2.pressureLoss.Delta_p;
  valve_LP3.summary.outline.Delta_p = valve_LP3.pressureLoss.Delta_p;
  condenser.tubes.fluidIn.h = condenser.tubes.summary.inlet.h;
  boundaryVLE_Txim_flow.steam_a.h_outflow = condenser.tubes.summary.inlet.h;
  condenser.'eye_int2[1]'.m_flow = condenser.tubes.summary.outlet.m_flow;
  condenser.eye2.m_flow = condenser.tubes.summary.outlet.m_flow;
  boundaryVLE_phxi.steam_a.m_flow = condenser.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP1.inlet.m_flow = condenser.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP1.pressureLoss.m_flow = condenser.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP1.summary.inlet.m_flow = condenser.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP1.summary.outlet.m_flow = condenser.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP1.eye.m_flow = condenser.tubes.summary.outlet.m_flow;
  valveControl_preheater_LP1.'eye_int[1]'.m_flow = condenser.tubes.summary.outlet.m_flow;
  preheater_LP4.shell.phaseBorder.level_rel = preheater_LP4.level;
  preheater_LP4.shell.summary.outline.level_rel = preheater_LP4.level;
  preheater_LP4.shell.summary.outline.'yps[1]' = preheater_LP4.level;
  preheater_LP4.summary.outline.level_rel = preheater_LP4.level;
  PID_preheaterLP4.u_m = preheater_LP4.level;
  PID_preheaterLP4.feedback.u2 = preheater_LP4.level;
  fillingLevel_preheater_LP4.u_in = preheater_LP4.level;
  fillingLevel_preheater_LP4.u_int = preheater_LP4.level;
  PID_preheaterLP4.resetP.y = PID_preheaterLP4.P.u;
  PID_preheaterLP4.addPID.u1 = PID_preheaterLP4.P.y;
  PID_preheaterLP4.switch_OnOff_I.y = PID_preheaterLP4.I.u;
  PID_preheaterLP4.resetPD.u1 = PID_preheaterLP4.addPID.y;
  PID_preheaterLP4.gainTrack.y = PID_preheaterLP4.addI.u2;
  PID_preheaterLP4.switch_OnOff_I.u1 = PID_preheaterLP4.addI.y;
  PID_preheaterLP4.switch_OnOff.y = PID_preheaterLP4.limiter.u;
  PID_preheaterLP4.addSat.u2 = PID_preheaterLP4.limiter.u;
  PID_preheaterLP4.smoothPIDOutput1.u = PID_preheaterLP4.limiter.u;
  PID_preheaterLP4.smoothPIDOutput1.y = PID_preheaterLP4.limiter.u;
  PID_preheaterLP4.fromPU.u = PID_preheaterLP4.limiter.y;
  PID_preheaterLP4.fromPU.y = PID_preheaterLP4.limiter.y;
  PID_preheaterLP4.smoothPIDOutput.u = PID_preheaterLP4.limiter.y;
  PID_preheaterLP4.addSat.u1 = PID_preheaterLP4.limiter.y;
  PID_preheaterLP4.toPU.y = PID_preheaterLP4.addI.u1;
  PID_preheaterLP4.resetP.u1 = PID_preheaterLP4.addI.u1;
  PID_preheaterLP4.smoothPIDInput.u = PID_preheaterLP4.feedback.y;
  PID_preheaterLP4.resetPD.y = PID_preheaterLP4.switch_OnOff.u1;
  PID_preheaterLP4.addSat.y = PID_preheaterLP4.gainTrack.u;
  PID_preheaterLP4.I_activation.u = PID_preheaterLP4.time_lag_I_activation.y;
  preheater_LP3.shell.phaseBorder.level_rel = preheater_LP3.level;
  preheater_LP3.shell.summary.outline.level_rel = preheater_LP3.level;
  preheater_LP3.shell.summary.outline.'yps[1]' = preheater_LP3.level;
  preheater_LP3.summary.outline.level_rel = preheater_LP3.level;
  PID_preheaterLP3.u_m = preheater_LP3.level;
  PID_preheaterLP3.feedback.u2 = preheater_LP3.level;
  fillingLevel_preheater_LP3.u_in = preheater_LP3.level;
  fillingLevel_preheater_LP3.u_int = preheater_LP3.level;
  PID_preheaterLP3.P.y = PID_preheaterLP3.P.u;
  PID_preheaterLP3.addPID.u1 = PID_preheaterLP3.P.u;
  PID_preheaterLP3.resetP.y = PID_preheaterLP3.P.u;
  PID_preheaterLP3.switch_OnOff_I.y = PID_preheaterLP3.I.u;
  PID_preheaterLP3.resetPD.u1 = PID_preheaterLP3.addPID.y;
  PID_preheaterLP3.gainTrack.y = PID_preheaterLP3.addI.u2;
  PID_preheaterLP3.switch_OnOff_I.u1 = PID_preheaterLP3.addI.y;
  PID_preheaterLP3.switch_OnOff.y = PID_preheaterLP3.limiter.u;
  PID_preheaterLP3.addSat.u2 = PID_preheaterLP3.limiter.u;
  PID_preheaterLP3.smoothPIDOutput1.u = PID_preheaterLP3.limiter.u;
  PID_preheaterLP3.smoothPIDOutput1.y = PID_preheaterLP3.limiter.u;
  PID_preheaterLP3.fromPU.u = PID_preheaterLP3.limiter.y;
  PID_preheaterLP3.addSat.u1 = PID_preheaterLP3.limiter.y;
  PID_preheaterLP3.toPU.y = PID_preheaterLP3.addI.u1;
  PID_preheaterLP3.resetP.u1 = PID_preheaterLP3.addI.u1;
  PID_preheaterLP3.smoothPIDInput.u = PID_preheaterLP3.feedback.y;
  PID_preheaterLP3.smoothPIDOutput.u = PID_preheaterLP3.fromPU.y;
  PID_preheaterLP3.resetPD.y = PID_preheaterLP3.switch_OnOff.u1;
  PID_preheaterLP3.addSat.y = PID_preheaterLP3.gainTrack.u;
  PID_preheaterLP3.I_activation.u = PID_preheaterLP3.time_lag_I_activation.y;
  preheater_LP2.shell.phaseBorder.level_rel = preheater_LP2.level;
  preheater_LP2.shell.summary.outline.level_rel = preheater_LP2.level;
  preheater_LP2.shell.summary.outline.'yps[1]' = preheater_LP2.level;
  preheater_LP2.summary.outline.level_rel = preheater_LP2.level;
  PID_NDVW3.u_m = preheater_LP2.level;
  PID_NDVW3.feedback.u2 = preheater_LP2.level;
  fillingLevel_preheater_LP2.u_in = preheater_LP2.level;
  fillingLevel_preheater_LP2.u_int = preheater_LP2.level;
  PID_NDVW3.resetP.y = PID_NDVW3.P.u;
  PID_NDVW3.addPID.u1 = PID_NDVW3.P.y;
  PID_NDVW3.switch_OnOff_I.y = PID_NDVW3.I.u;
  PID_NDVW3.resetPD.u1 = PID_NDVW3.addPID.y;
  PID_NDVW3.gainTrack.y = PID_NDVW3.addI.u2;
  PID_NDVW3.switch_OnOff_I.u1 = PID_NDVW3.addI.y;
  PID_NDVW3.switch_OnOff.y = PID_NDVW3.limiter.u;
  PID_NDVW3.addSat.u2 = PID_NDVW3.limiter.u;
  PID_NDVW3.smoothPIDOutput1.u = PID_NDVW3.limiter.u;
  PID_NDVW3.smoothPIDOutput1.y = PID_NDVW3.limiter.u;
  PID_NDVW3.fromPU.u = PID_NDVW3.limiter.y;
  PID_NDVW3.fromPU.y = PID_NDVW3.limiter.y;
  PID_NDVW3.smoothPIDOutput.u = PID_NDVW3.limiter.y;
  PID_NDVW3.addSat.u1 = PID_NDVW3.limiter.y;
  PID_NDVW3.toPU.y = PID_NDVW3.addI.u1;
  PID_NDVW3.resetP.u1 = PID_NDVW3.addI.u1;
  PID_NDVW3.smoothPIDInput.u = PID_NDVW3.feedback.y;
  PID_NDVW3.resetPD.y = PID_NDVW3.switch_OnOff.u1;
  PID_NDVW3.addSat.y = PID_NDVW3.gainTrack.u;
  PID_NDVW3.I_activation.u = PID_NDVW3.time_lag_I_activation.y;
  downComer_feedWaterTank.summary.fluid.'mass[1]' = downComer_feedWaterTank.summary.outline.'mass[1]';
  downComer_feedWaterTank.summary.fluid.'mass[2]' = downComer_feedWaterTank.summary.outline.'mass[2]';
  downComer_feedWaterTank.summary.fluid.'mass[3]' = downComer_feedWaterTank.summary.outline.'mass[3]';
  downComer_feedWaterTank.pressureLoss.'m_flow[2]' = downComer_feedWaterTank.summary.outline.'m_flow[2]';
  downComer_feedWaterTank.heatTransfer.'m_flow[2]' = downComer_feedWaterTank.summary.outline.'m_flow[2]';
  downComer_feedWaterTank.mechanicalEquilibrium.'m_flow[2]' = downComer_feedWaterTank.summary.outline.'m_flow[2]';
  downComer_feedWaterTank.pressureLoss.'m_flow[3]' = downComer_feedWaterTank.summary.outline.'m_flow[3]';
  downComer_feedWaterTank.heatTransfer.'m_flow[3]' = downComer_feedWaterTank.summary.outline.'m_flow[3]';
  downComer_feedWaterTank.mechanicalEquilibrium.'m_flow[3]' = downComer_feedWaterTank.summary.outline.'m_flow[3]';
  feedWaterTank.'eye_int[1]'.m_flow = feedWaterTank.eye.m_flow;
  feedWaterTank.summary.feedwater.m_flow = feedWaterTank.eye.m_flow;
  feedWaterTank.volume.summary.'outlet[1]'.m_flow = feedWaterTank.eye.m_flow;
  quadruple6.m_flow = feedWaterTank.eye.m_flow;
  quadruple6.eye.m_flow = feedWaterTank.eye.m_flow;
  downComer_feedWaterTank.summary.outline.'m_flow[1]' = feedWaterTank.eye.m_flow;
  downComer_feedWaterTank.summary.inlet.m_flow = feedWaterTank.eye.m_flow;
  downComer_feedWaterTank.inlet.m_flow = feedWaterTank.eye.m_flow;
  downComer_feedWaterTank.pressureLoss.'m_flow[1]' = feedWaterTank.eye.m_flow;
  downComer_feedWaterTank.heatTransfer.'m_flow[1]' = feedWaterTank.eye.m_flow;
  downComer_feedWaterTank.mechanicalEquilibrium.'m_flow[1]' = feedWaterTank.eye.m_flow;
  valveControl_preheater_LP1.summary.outline.Delta_p = valveControl_preheater_LP1.pressureLoss.Delta_p;
  simpleGenerator.powerConnection.P = simCenter.cycleSumPort.power_out_elMech;
  Turbine_HP1.iCom.rpm = Turbine_HP1.rpm;
  Turbine_HP1.summary.outline.rpm = Turbine_HP1.rpm;
  Turbine_HP1.'eye_int[1]'.p = Turbine_HP1.eye.p;
  quadruple4.p = Turbine_HP1.eye.p;
  quadruple4.eye.p = Turbine_HP1.eye.p;
  Turbine_HP1.'eye_int[1]'.h = Turbine_HP1.eye.h;
  quadruple4.h = Turbine_HP1.eye.h;
  quadruple4.eye.h = Turbine_HP1.eye.h;
  Turbine_HP1.'eye_int[1]'.T = Turbine_HP1.eye.T;
  quadruple4.T = Turbine_HP1.eye.T;
  quadruple4.eye.T = Turbine_HP1.eye.T;
  Turbine_HP1.'eye_int[1]'.s = Turbine_HP1.eye.s;
  quadruple4.s = Turbine_HP1.eye.s;
  quadruple4.eye.s = Turbine_HP1.eye.s;
  steamGenerator.'eye_intLS[1]'.p = steamGenerator.eye_LS.p;
  quadruple2.p = steamGenerator.eye_LS.p;
  quadruple2.eye.p = steamGenerator.eye_LS.p;
  steamGenerator.'eye_intLS[1]'.h = steamGenerator.eye_LS.h;
  quadruple2.h = steamGenerator.eye_LS.h;
  quadruple2.eye.h = steamGenerator.eye_LS.h;
  steamGenerator.'eye_intLS[1]'.T = steamGenerator.eye_LS.T;
  quadruple2.T = steamGenerator.eye_LS.T;
  quadruple2.eye.T = steamGenerator.eye_LS.T;
  steamGenerator.'eye_intLS[1]'.s = steamGenerator.eye_LS.s;
  quadruple2.s = steamGenerator.eye_LS.s;
  quadruple2.eye.s = steamGenerator.eye_LS.s;
  steamGenerator.'eye_intRH[1]'.p = steamGenerator.eye_RH.p;
  quadruple1.p = steamGenerator.eye_RH.p;
  quadruple1.eye.p = steamGenerator.eye_RH.p;
  steamGenerator.'eye_intRH[1]'.h = steamGenerator.eye_RH.h;
  quadruple1.h = steamGenerator.eye_RH.h;
  quadruple1.eye.h = steamGenerator.eye_RH.h;
  steamGenerator.'eye_intRH[1]'.T = steamGenerator.eye_RH.T;
  quadruple1.T = steamGenerator.eye_RH.T;
  quadruple1.eye.T = steamGenerator.eye_RH.T;
  steamGenerator.'eye_intRH[1]'.s = steamGenerator.eye_RH.s;
  quadruple1.s = steamGenerator.eye_RH.s;
  quadruple1.eye.s = steamGenerator.eye_RH.s;
  steamGenerator.connected2SimCenter.cycleSumModel.cycleSumPort.power_in = steamGenerator.connected2SimCenter.powerIn;
  Turbine_IP1.iCom.rpm = Turbine_IP1.rpm;
  Turbine_IP1.summary.outline.rpm = Turbine_IP1.rpm;
  Turbine_IP1.'eye_int[1]'.p = Turbine_IP1.eye.p;
  quadruple3.p = Turbine_IP1.eye.p;
  quadruple3.eye.p = Turbine_IP1.eye.p;
  Turbine_IP1.'eye_int[1]'.h = Turbine_IP1.eye.h;
  quadruple3.h = Turbine_IP1.eye.h;
  quadruple3.eye.h = Turbine_IP1.eye.h;
  Turbine_IP1.'eye_int[1]'.T = Turbine_IP1.eye.T;
  quadruple3.T = Turbine_IP1.eye.T;
  quadruple3.eye.T = Turbine_IP1.eye.T;
  Turbine_IP1.'eye_int[1]'.s = Turbine_IP1.eye.s;
  quadruple3.s = Turbine_IP1.eye.s;
  quadruple3.eye.s = Turbine_IP1.eye.s;
  Turbine_LP4.iCom.rpm = Turbine_LP4.rpm;
  Turbine_LP4.summary.outline.rpm = Turbine_LP4.rpm;
  Turbine_LP4.'eye_int[1]'.p = Turbine_LP4.eye.p;
  quadruple.p = Turbine_LP4.eye.p;
  quadruple.eye.p = Turbine_LP4.eye.p;
  Turbine_LP4.'eye_int[1]'.h = Turbine_LP4.eye.h;
  quadruple.h = Turbine_LP4.eye.h;
  quadruple.eye.h = Turbine_LP4.eye.h;
  Turbine_LP4.'eye_int[1]'.T = Turbine_LP4.eye.T;
  quadruple.T = Turbine_LP4.eye.T;
  quadruple.eye.T = Turbine_LP4.eye.T;
  Turbine_LP4.'eye_int[1]'.s = Turbine_LP4.eye.s;
  quadruple.s = Turbine_LP4.eye.s;
  quadruple.eye.s = Turbine_LP4.eye.s;
  Pump_FW.'eye_int[1]'.p = Pump_FW.eye.p;
  Pump_FW.'eye_int[1]'.h = Pump_FW.eye.h;
  Pump_FW.'eye_int[1]'.T = Pump_FW.eye.T;
  Pump_FW.'eye_int[1]'.s = Pump_FW.eye.s;
  condenser.tubes.fluidIn.d = condenser.tubes.summary.inlet.rho;
  condenser.tubes.fluidIn.s = condenser.tubes.summary.inlet.s;
  condenser.tubes.fluidIn.q = condenser.tubes.summary.inlet.steamQuality;
  condenser.tubes.fluidOut.d = condenser.tubes.summary.outlet.rho;
  condenser.tubes.fluidOut.s = condenser.tubes.summary.outlet.s;
  condenser.tubes.fluidOut.q = condenser.tubes.summary.outlet.steamQuality;
  condenser.shell.summary.'inlet[1]'.T = condenser.shell.'fluidIn[1]'.T;
  condenser.shell.summary.'inlet[2]'.T = condenser.shell.'fluidIn[2]'.T;
  condenser.shell.summary.'inlet[3]'.T = condenser.shell.'fluidIn[3]'.T;
  condenser.shell.summary.'outlet[1]'.T = condenser.shell.'fluidOut[1]'.T;
  condenser.shell.summary.'inlet[1]'.rho = condenser.shell.'fluidIn[1]'.d;
  condenser.shell.summary.'inlet[1]'.s = condenser.shell.'fluidIn[1]'.s;
  condenser.shell.summary.'inlet[1]'.steamQuality = condenser.shell.'fluidIn[1]'.q;
  condenser.shell.summary.'inlet[2]'.rho = condenser.shell.'fluidIn[2]'.d;
  condenser.shell.summary.'inlet[2]'.s = condenser.shell.'fluidIn[2]'.s;
  condenser.shell.summary.'inlet[2]'.steamQuality = condenser.shell.'fluidIn[2]'.q;
  condenser.shell.summary.'inlet[3]'.rho = condenser.shell.'fluidIn[3]'.d;
  condenser.shell.summary.'inlet[3]'.s = condenser.shell.'fluidIn[3]'.s;
  condenser.shell.summary.'inlet[3]'.steamQuality = condenser.shell.'fluidIn[3]'.q;
  condenser.shell.summary.'outlet[1]'.rho = condenser.shell.'fluidOut[1]'.d;
  condenser.shell.summary.'outlet[1]'.s = condenser.shell.'fluidOut[1]'.s;
  condenser.shell.summary.'outlet[1]'.steamQuality = condenser.shell.'fluidOut[1]'.q;
  condenser.eye2.p = condenser.'eye_int2[1]'.p;
  condenser.eye2.h = condenser.'eye_int2[1]'.h;
  condenser.eye2.T = condenser.'eye_int2[1]'.T;
  condenser.eye2.s = condenser.'eye_int2[1]'.s;
  condenser.eye1.p = condenser.'eye_int1[1]'.p;
  quadruple5.p = condenser.'eye_int1[1]'.p;
  quadruple5.eye.p = condenser.'eye_int1[1]'.p;
  condenser.eye1.h = condenser.'eye_int1[1]'.h;
  quadruple5.h = condenser.'eye_int1[1]'.h;
  quadruple5.eye.h = condenser.'eye_int1[1]'.h;
  condenser.eye1.T = condenser.'eye_int1[1]'.T;
  quadruple5.T = condenser.'eye_int1[1]'.T;
  quadruple5.eye.T = condenser.'eye_int1[1]'.T;
  condenser.eye1.s = condenser.'eye_int1[1]'.s;
  quadruple5.s = condenser.'eye_int1[1]'.s;
  quadruple5.eye.s = condenser.'eye_int1[1]'.s;
  condenser.shell.'fluidIn[3]'.p = condenser.shell.'inlet[3]'.p;
  condenser.shell.summary.'inlet[3]'.p = condenser.shell.'inlet[3]'.p;
  condenser.aux2.p = condenser.shell.'inlet[3]'.p;
  condenser.shell.'fluidIn[3]'.h = condenser.shell.'inlet[3]'.h_outflow;
  condenser.shell.summary.'inlet[3]'.h = condenser.shell.'inlet[3]'.h_outflow;
  condenser.aux2.h_outflow = condenser.shell.'inlet[3]'.h_outflow;
  feedWaterTank.'eye_int[1]'.p = feedWaterTank.eye.p;
  quadruple6.p = feedWaterTank.eye.p;
  quadruple6.eye.p = feedWaterTank.eye.p;
  feedWaterTank.'eye_int[1]'.h = feedWaterTank.eye.h;
  quadruple6.h = feedWaterTank.eye.h;
  quadruple6.eye.h = feedWaterTank.eye.h;
  feedWaterTank.'eye_int[1]'.T = feedWaterTank.eye.T;
  quadruple6.T = feedWaterTank.eye.T;
  quadruple6.eye.T = feedWaterTank.eye.T;
  feedWaterTank.'eye_int[1]'.s = feedWaterTank.eye.s;
  quadruple6.s = feedWaterTank.eye.s;
  quadruple6.eye.s = feedWaterTank.eye.s;
  feedWaterTank.volume.summary.'inlet[1]'.T = feedWaterTank.volume.'fluidIn[1]'.T;
  feedWaterTank.volume.summary.'inlet[2]'.T = feedWaterTank.volume.'fluidIn[2]'.T;
  feedWaterTank.volume.summary.'inlet[3]'.T = feedWaterTank.volume.'fluidIn[3]'.T;
  feedWaterTank.volume.summary.'outlet[1]'.T = feedWaterTank.volume.'fluidOut[1]'.T;
  feedWaterTank.volume.'fluidOut[2]'.T = feedWaterTank.summary.vent.T;
  feedWaterTank.volume.summary.'outlet[2]'.T = feedWaterTank.summary.vent.T;
  feedWaterTank.volume.summary.'inlet[1]'.rho = feedWaterTank.volume.'fluidIn[1]'.d;
  feedWaterTank.volume.summary.'inlet[1]'.s = feedWaterTank.volume.'fluidIn[1]'.s;
  feedWaterTank.volume.summary.'inlet[1]'.steamQuality = feedWaterTank.volume.'fluidIn[1]'.q;
  feedWaterTank.volume.summary.'inlet[2]'.rho = feedWaterTank.volume.'fluidIn[2]'.d;
  feedWaterTank.volume.summary.'inlet[2]'.s = feedWaterTank.volume.'fluidIn[2]'.s;
  feedWaterTank.volume.summary.'inlet[2]'.steamQuality = feedWaterTank.volume.'fluidIn[2]'.q;
  feedWaterTank.volume.summary.'inlet[3]'.rho = feedWaterTank.volume.'fluidIn[3]'.d;
  feedWaterTank.volume.summary.'inlet[3]'.s = feedWaterTank.volume.'fluidIn[3]'.s;
  feedWaterTank.volume.summary.'inlet[3]'.steamQuality = feedWaterTank.volume.'fluidIn[3]'.q;
  feedWaterTank.volume.summary.'outlet[1]'.rho = feedWaterTank.volume.'fluidOut[1]'.d;
  feedWaterTank.volume.summary.'outlet[1]'.s = feedWaterTank.volume.'fluidOut[1]'.s;
  feedWaterTank.volume.summary.'outlet[1]'.steamQuality = feedWaterTank.volume.'fluidOut[1]'.q;
  feedWaterTank.volume.'fluidOut[2]'.d = feedWaterTank.summary.vent.rho;
  feedWaterTank.volume.summary.'outlet[2]'.rho = feedWaterTank.summary.vent.rho;
  feedWaterTank.volume.'fluidOut[2]'.s = feedWaterTank.summary.vent.s;
  feedWaterTank.volume.summary.'outlet[2]'.s = feedWaterTank.summary.vent.s;
  feedWaterTank.volume.'fluidOut[2]'.q = feedWaterTank.summary.vent.steamQuality;
  feedWaterTank.volume.summary.'outlet[2]'.steamQuality = feedWaterTank.summary.vent.steamQuality;
  feedWaterTank.volume.'outlet[2]'.p = feedWaterTank.summary.vent.p;
  feedWaterTank.volume.'fluidOut[2]'.p = feedWaterTank.summary.vent.p;
  feedWaterTank.volume.summary.'outlet[2]'.p = feedWaterTank.summary.vent.p;
  feedWaterTank.vent.p = feedWaterTank.summary.vent.p;
  feedWaterTank.volume.'outlet[2]'.h_outflow = feedWaterTank.summary.vent.h;
  feedWaterTank.volume.'fluidOut[2]'.h = feedWaterTank.summary.vent.h;
  feedWaterTank.volume.summary.'outlet[2]'.h = feedWaterTank.summary.vent.h;
  feedWaterTank.vent.h_outflow = feedWaterTank.summary.vent.h;
  feedWaterTank.'eye_int1[1]'.p = feedWaterTank.eye_sat.p;
  feedWaterTank.'eye_int1[1]'.h = feedWaterTank.eye_sat.h;
  feedWaterTank.'eye_int1[1]'.T = feedWaterTank.eye_sat.T;
  feedWaterTank.'eye_int1[1]'.s = feedWaterTank.eye_sat.s;
  Pump_cond.'eye_int[1]'.p = Pump_cond.eye.p;
  quadruple13.p = Pump_cond.eye.p;
  quadruple13.eye.p = Pump_cond.eye.p;
  Pump_cond.'eye_int[1]'.h = Pump_cond.eye.h;
  quadruple13.h = Pump_cond.eye.h;
  quadruple13.eye.h = Pump_cond.eye.h;
  Pump_cond.'eye_int[1]'.T = Pump_cond.eye.T;
  quadruple13.T = Pump_cond.eye.T;
  quadruple13.eye.T = Pump_cond.eye.T;
  Pump_cond.'eye_int[1]'.s = Pump_cond.eye.s;
  quadruple13.s = Pump_cond.eye.s;
  quadruple13.eye.s = Pump_cond.eye.s;
  valve_IP1.'eye_int[1]'.p = valve_IP1.eye.p;
  quadruple8.p = valve_IP1.eye.p;
  quadruple8.eye.p = valve_IP1.eye.p;
  valve_IP1.'eye_int[1]'.h = valve_IP1.eye.h;
  quadruple8.h = valve_IP1.eye.h;
  quadruple8.eye.h = valve_IP1.eye.h;
  valve_IP1.'eye_int[1]'.T = valve_IP1.eye.T;
  quadruple8.T = valve_IP1.eye.T;
  quadruple8.eye.T = valve_IP1.eye.T;
  valve_IP1.'eye_int[1]'.s = valve_IP1.eye.s;
  quadruple8.s = valve_IP1.eye.s;
  quadruple8.eye.s = valve_IP1.eye.s;
  Turbine_LP1.iCom.rpm = Turbine_LP1.rpm;
  Turbine_LP1.summary.outline.rpm = Turbine_LP1.rpm;
  Turbine_LP1.'eye_int[1]'.p = Turbine_LP1.eye.p;
  quadruple7.p = Turbine_LP1.eye.p;
  quadruple7.eye.p = Turbine_LP1.eye.p;
  Turbine_LP1.'eye_int[1]'.h = Turbine_LP1.eye.h;
  quadruple7.h = Turbine_LP1.eye.h;
  quadruple7.eye.h = Turbine_LP1.eye.h;
  Turbine_LP1.'eye_int[1]'.T = Turbine_LP1.eye.T;
  quadruple7.T = Turbine_LP1.eye.T;
  quadruple7.eye.T = Turbine_LP1.eye.T;
  Turbine_LP1.'eye_int[1]'.s = Turbine_LP1.eye.s;
  quadruple7.s = Turbine_LP1.eye.s;
  quadruple7.eye.s = Turbine_LP1.eye.s;
  Pump_preheater_LP1.'eye_int[1]'.p = Pump_preheater_LP1.eye.p;
  quadruple14.p = Pump_preheater_LP1.eye.p;
  quadruple14.eye.p = Pump_preheater_LP1.eye.p;
  Pump_preheater_LP1.'eye_int[1]'.h = Pump_preheater_LP1.eye.h;
  quadruple14.h = Pump_preheater_LP1.eye.h;
  quadruple14.eye.h = Pump_preheater_LP1.eye.h;
  Pump_preheater_LP1.'eye_int[1]'.T = Pump_preheater_LP1.eye.T;
  quadruple14.T = Pump_preheater_LP1.eye.T;
  quadruple14.eye.T = Pump_preheater_LP1.eye.T;
  Pump_preheater_LP1.'eye_int[1]'.s = Pump_preheater_LP1.eye.s;
  quadruple14.s = Pump_preheater_LP1.eye.s;
  quadruple14.eye.s = Pump_preheater_LP1.eye.s;
  valve_IP2.summary.outline.flowIsChoked = valve_IP2.pressureLoss.flowIsChoked;
  valve_IP2.summary.outline.PR_choked = valve_IP2.pressureLoss.PR_choked;
  valve_IP2.'eye_int[1]'.p = valve_IP2.eye.p;
  quadruple9.p = valve_IP2.eye.p;
  quadruple9.eye.p = valve_IP2.eye.p;
  valve_IP2.'eye_int[1]'.h = valve_IP2.eye.h;
  quadruple9.h = valve_IP2.eye.h;
  quadruple9.eye.h = valve_IP2.eye.h;
  valve_IP2.'eye_int[1]'.T = valve_IP2.eye.T;
  quadruple9.T = valve_IP2.eye.T;
  quadruple9.eye.T = valve_IP2.eye.T;
  valve_IP2.'eye_int[1]'.s = valve_IP2.eye.s;
  quadruple9.s = valve_IP2.eye.s;
  quadruple9.eye.s = valve_IP2.eye.s;
  preheater_HP.tubes.fluidIn.d = preheater_HP.tubes.summary.inlet.rho;
  preheater_HP.tubes.fluidIn.s = preheater_HP.tubes.summary.inlet.s;
  preheater_HP.tubes.fluidIn.q = preheater_HP.tubes.summary.inlet.steamQuality;
  preheater_HP.tubes.fluidOut.d = preheater_HP.tubes.summary.outlet.rho;
  preheater_HP.tubes.fluidOut.s = preheater_HP.tubes.summary.outlet.s;
  preheater_HP.tubes.fluidOut.q = preheater_HP.tubes.summary.outlet.steamQuality;
  preheater_HP.shell.summary.'inlet[1]'.T = preheater_HP.shell.'fluidIn[1]'.T;
  preheater_HP.shell.summary.'inlet[2]'.T = preheater_HP.shell.'fluidIn[2]'.T;
  preheater_HP.shell.summary.'inlet[3]'.T = preheater_HP.shell.'fluidIn[3]'.T;
  preheater_HP.shell.summary.'outlet[1]'.T = preheater_HP.shell.'fluidOut[1]'.T;
  preheater_HP.shell.summary.'inlet[1]'.rho = preheater_HP.shell.'fluidIn[1]'.d;
  preheater_HP.shell.summary.'inlet[1]'.s = preheater_HP.shell.'fluidIn[1]'.s;
  preheater_HP.shell.summary.'inlet[1]'.steamQuality = preheater_HP.shell.'fluidIn[1]'.q;
  preheater_HP.shell.summary.'inlet[2]'.rho = preheater_HP.shell.'fluidIn[2]'.d;
  preheater_HP.shell.summary.'inlet[2]'.s = preheater_HP.shell.'fluidIn[2]'.s;
  preheater_HP.shell.summary.'inlet[2]'.steamQuality = preheater_HP.shell.'fluidIn[2]'.q;
  preheater_HP.shell.summary.'inlet[3]'.rho = preheater_HP.shell.'fluidIn[3]'.d;
  preheater_HP.shell.summary.'inlet[3]'.s = preheater_HP.shell.'fluidIn[3]'.s;
  preheater_HP.shell.summary.'inlet[3]'.steamQuality = preheater_HP.shell.'fluidIn[3]'.q;
  preheater_HP.shell.summary.'outlet[1]'.rho = preheater_HP.shell.'fluidOut[1]'.d;
  preheater_HP.shell.summary.'outlet[1]'.s = preheater_HP.shell.'fluidOut[1]'.s;
  preheater_HP.shell.summary.'outlet[1]'.steamQuality = preheater_HP.shell.'fluidOut[1]'.q;
  preheater_HP.eye2.p = preheater_HP.'eye_int2[1]'.p;
  quadruple25.p = preheater_HP.'eye_int2[1]'.p;
  quadruple25.eye.p = preheater_HP.'eye_int2[1]'.p;
  preheater_HP.eye2.h = preheater_HP.'eye_int2[1]'.h;
  quadruple25.h = preheater_HP.'eye_int2[1]'.h;
  quadruple25.eye.h = preheater_HP.'eye_int2[1]'.h;
  preheater_HP.eye2.T = preheater_HP.'eye_int2[1]'.T;
  quadruple25.T = preheater_HP.'eye_int2[1]'.T;
  quadruple25.eye.T = preheater_HP.'eye_int2[1]'.T;
  preheater_HP.eye2.s = preheater_HP.'eye_int2[1]'.s;
  quadruple25.s = preheater_HP.'eye_int2[1]'.s;
  quadruple25.eye.s = preheater_HP.'eye_int2[1]'.s;
  preheater_HP.eye1.p = preheater_HP.'eye_int1[1]'.p;
  preheater_HP.eye1.h = preheater_HP.'eye_int1[1]'.h;
  preheater_HP.eye1.T = preheater_HP.'eye_int1[1]'.T;
  preheater_HP.eye1.s = preheater_HP.'eye_int1[1]'.s;
  preheater_HP.shell.'fluidIn[2]'.p = preheater_HP.shell.'inlet[2]'.p;
  preheater_HP.shell.summary.'inlet[2]'.p = preheater_HP.shell.'inlet[2]'.p;
  preheater_HP.aux1.p = preheater_HP.shell.'inlet[2]'.p;
  preheater_HP.shell.'fluidIn[2]'.h = preheater_HP.shell.'inlet[2]'.h_outflow;
  preheater_HP.shell.summary.'inlet[2]'.h = preheater_HP.shell.'inlet[2]'.h_outflow;
  preheater_HP.aux1.h_outflow = preheater_HP.shell.'inlet[2]'.h_outflow;
  preheater_HP.shell.'fluidIn[3]'.p = preheater_HP.shell.'inlet[3]'.p;
  preheater_HP.shell.summary.'inlet[3]'.p = preheater_HP.shell.'inlet[3]'.p;
  preheater_HP.aux2.p = preheater_HP.shell.'inlet[3]'.p;
  preheater_HP.shell.'fluidIn[3]'.h = preheater_HP.shell.'inlet[3]'.h_outflow;
  preheater_HP.shell.summary.'inlet[3]'.h = preheater_HP.shell.'inlet[3]'.h_outflow;
  preheater_HP.aux2.h_outflow = preheater_HP.shell.'inlet[3]'.h_outflow;
  valve_HP.summary.outline.flowIsChoked = valve_HP.pressureLoss.flowIsChoked;
  valve_HP.summary.outline.PR_choked = valve_HP.pressureLoss.PR_choked;
  valve_HP.'eye_int[1]'.p = valve_HP.eye.p;
  quadruple11.p = valve_HP.eye.p;
  quadruple11.eye.p = valve_HP.eye.p;
  valve_HP.'eye_int[1]'.h = valve_HP.eye.h;
  quadruple11.h = valve_HP.eye.h;
  quadruple11.eye.h = valve_HP.eye.h;
  valve_HP.'eye_int[1]'.T = valve_HP.eye.T;
  quadruple11.T = valve_HP.eye.T;
  quadruple11.eye.T = valve_HP.eye.T;
  valve_HP.'eye_int[1]'.s = valve_HP.eye.s;
  quadruple11.s = valve_HP.eye.s;
  quadruple11.eye.s = valve_HP.eye.s;
  valveControl_preheater_HP.summary.outline.flowIsChoked = valveControl_preheater_HP.pressureLoss.flowIsChoked;
  valveControl_preheater_HP.summary.outline.PR_choked = valveControl_preheater_HP.pressureLoss.PR_choked;
  valveControl_preheater_HP.'eye_int[1]'.p = valveControl_preheater_HP.eye.p;
  quadruple12.p = valveControl_preheater_HP.eye.p;
  quadruple12.eye.p = valveControl_preheater_HP.eye.p;
  valveControl_preheater_HP.'eye_int[1]'.h = valveControl_preheater_HP.eye.h;
  quadruple12.h = valveControl_preheater_HP.eye.h;
  quadruple12.eye.h = valveControl_preheater_HP.eye.h;
  valveControl_preheater_HP.'eye_int[1]'.T = valveControl_preheater_HP.eye.T;
  quadruple12.T = valveControl_preheater_HP.eye.T;
  quadruple12.eye.T = valveControl_preheater_HP.eye.T;
  valveControl_preheater_HP.'eye_int[1]'.s = valveControl_preheater_HP.eye.s;
  quadruple12.s = valveControl_preheater_HP.eye.s;
  quadruple12.eye.s = valveControl_preheater_HP.eye.s;
  preheater_LP1.tubes.fluidIn.d = preheater_LP1.tubes.summary.inlet.rho;
  preheater_LP1.tubes.fluidIn.s = preheater_LP1.tubes.summary.inlet.s;
  preheater_LP1.tubes.fluidIn.q = preheater_LP1.tubes.summary.inlet.steamQuality;
  preheater_LP1.tubes.fluidOut.d = preheater_LP1.tubes.summary.outlet.rho;
  preheater_LP1.tubes.fluidOut.s = preheater_LP1.tubes.summary.outlet.s;
  preheater_LP1.tubes.fluidOut.q = preheater_LP1.tubes.summary.outlet.steamQuality;
  preheater_LP1.shell.summary.'inlet[1]'.T = preheater_LP1.shell.'fluidIn[1]'.T;
  preheater_LP1.shell.summary.'inlet[2]'.T = preheater_LP1.shell.'fluidIn[2]'.T;
  preheater_LP1.shell.summary.'inlet[3]'.T = preheater_LP1.shell.'fluidIn[3]'.T;
  preheater_LP1.shell.summary.'outlet[1]'.T = preheater_LP1.shell.'fluidOut[1]'.T;
  preheater_LP1.shell.summary.'inlet[1]'.rho = preheater_LP1.shell.'fluidIn[1]'.d;
  preheater_LP1.shell.summary.'inlet[1]'.s = preheater_LP1.shell.'fluidIn[1]'.s;
  preheater_LP1.shell.summary.'inlet[1]'.steamQuality = preheater_LP1.shell.'fluidIn[1]'.q;
  preheater_LP1.shell.summary.'inlet[2]'.rho = preheater_LP1.shell.'fluidIn[2]'.d;
  preheater_LP1.shell.summary.'inlet[2]'.s = preheater_LP1.shell.'fluidIn[2]'.s;
  preheater_LP1.shell.summary.'inlet[2]'.steamQuality = preheater_LP1.shell.'fluidIn[2]'.q;
  preheater_LP1.shell.summary.'inlet[3]'.rho = preheater_LP1.shell.'fluidIn[3]'.d;
  preheater_LP1.shell.summary.'inlet[3]'.s = preheater_LP1.shell.'fluidIn[3]'.s;
  preheater_LP1.shell.summary.'inlet[3]'.steamQuality = preheater_LP1.shell.'fluidIn[3]'.q;
  preheater_LP1.shell.summary.'outlet[1]'.rho = preheater_LP1.shell.'fluidOut[1]'.d;
  preheater_LP1.shell.summary.'outlet[1]'.s = preheater_LP1.shell.'fluidOut[1]'.s;
  preheater_LP1.shell.summary.'outlet[1]'.steamQuality = preheater_LP1.shell.'fluidOut[1]'.q;
  preheater_LP1.eye2.p = preheater_LP1.'eye_int2[1]'.p;
  quadruple10.p = preheater_LP1.'eye_int2[1]'.p;
  quadruple10.eye.p = preheater_LP1.'eye_int2[1]'.p;
  preheater_LP1.eye2.h = preheater_LP1.'eye_int2[1]'.h;
  quadruple10.h = preheater_LP1.'eye_int2[1]'.h;
  quadruple10.eye.h = preheater_LP1.'eye_int2[1]'.h;
  preheater_LP1.eye2.T = preheater_LP1.'eye_int2[1]'.T;
  quadruple10.T = preheater_LP1.'eye_int2[1]'.T;
  quadruple10.eye.T = preheater_LP1.'eye_int2[1]'.T;
  preheater_LP1.eye2.s = preheater_LP1.'eye_int2[1]'.s;
  quadruple10.s = preheater_LP1.'eye_int2[1]'.s;
  quadruple10.eye.s = preheater_LP1.'eye_int2[1]'.s;
  preheater_LP1.eye1.p = preheater_LP1.'eye_int1[1]'.p;
  preheater_LP1.eye1.h = preheater_LP1.'eye_int1[1]'.h;
  preheater_LP1.eye1.T = preheater_LP1.'eye_int1[1]'.T;
  preheater_LP1.eye1.s = preheater_LP1.'eye_int1[1]'.s;
  preheater_LP1.shell.'fluidIn[2]'.p = preheater_LP1.shell.'inlet[2]'.p;
  preheater_LP1.shell.summary.'inlet[2]'.p = preheater_LP1.shell.'inlet[2]'.p;
  preheater_LP1.aux1.p = preheater_LP1.shell.'inlet[2]'.p;
  preheater_LP1.shell.'fluidIn[2]'.h = preheater_LP1.shell.'inlet[2]'.h_outflow;
  preheater_LP1.shell.summary.'inlet[2]'.h = preheater_LP1.shell.'inlet[2]'.h_outflow;
  preheater_LP1.aux1.h_outflow = preheater_LP1.shell.'inlet[2]'.h_outflow;
  preheater_LP1.shell.'fluidIn[3]'.p = preheater_LP1.shell.'inlet[3]'.p;
  preheater_LP1.shell.summary.'inlet[3]'.p = preheater_LP1.shell.'inlet[3]'.p;
  preheater_LP1.aux2.p = preheater_LP1.shell.'inlet[3]'.p;
  preheater_LP1.shell.'fluidIn[3]'.h = preheater_LP1.shell.'inlet[3]'.h_outflow;
  preheater_LP1.shell.summary.'inlet[3]'.h = preheater_LP1.shell.'inlet[3]'.h_outflow;
  preheater_LP1.aux2.h_outflow = preheater_LP1.shell.'inlet[3]'.h_outflow;
  valvePreFeedWaterTank.'eye_int[1]'.p = valvePreFeedWaterTank.eye.p;
  valvePreFeedWaterTank.'eye_int[1]'.h = valvePreFeedWaterTank.eye.h;
  valvePreFeedWaterTank.'eye_int[1]'.T = valvePreFeedWaterTank.eye.T;
  valvePreFeedWaterTank.'eye_int[1]'.s = valvePreFeedWaterTank.eye.s;
  join_LP_main.'eye_int[1]'.p = join_LP_main.eye.p;
  join_LP_main.'eye_int[1]'.h = join_LP_main.eye.h;
  join_LP_main.'eye_int[1]'.T = join_LP_main.eye.T;
  join_LP_main.'eye_int[1]'.s = join_LP_main.eye.s;
  electricalPower.u_aux = electricalPower.x1;
  Turbine_IP3.iCom.rpm = Turbine_IP3.rpm;
  Turbine_IP3.summary.outline.rpm = Turbine_IP3.rpm;
  Turbine_IP3.'eye_int[1]'.p = Turbine_IP3.eye.p;
  quadruple16.p = Turbine_IP3.eye.p;
  quadruple16.eye.p = Turbine_IP3.eye.p;
  Turbine_IP3.'eye_int[1]'.h = Turbine_IP3.eye.h;
  quadruple16.h = Turbine_IP3.eye.h;
  quadruple16.eye.h = Turbine_IP3.eye.h;
  Turbine_IP3.'eye_int[1]'.T = Turbine_IP3.eye.T;
  quadruple16.T = Turbine_IP3.eye.T;
  quadruple16.eye.T = Turbine_IP3.eye.T;
  Turbine_IP3.'eye_int[1]'.s = Turbine_IP3.eye.s;
  quadruple16.s = Turbine_IP3.eye.s;
  quadruple16.eye.s = Turbine_IP3.eye.s;
  Turbine_IP2.iCom.rpm = Turbine_IP2.rpm;
  Turbine_IP2.summary.outline.rpm = Turbine_IP2.rpm;
  Turbine_IP2.'eye_int[1]'.p = Turbine_IP2.eye.p;
  quadruple15.p = Turbine_IP2.eye.p;
  quadruple15.eye.p = Turbine_IP2.eye.p;
  Turbine_IP2.'eye_int[1]'.h = Turbine_IP2.eye.h;
  quadruple15.h = Turbine_IP2.eye.h;
  quadruple15.eye.h = Turbine_IP2.eye.h;
  Turbine_IP2.'eye_int[1]'.T = Turbine_IP2.eye.T;
  quadruple15.T = Turbine_IP2.eye.T;
  quadruple15.eye.T = Turbine_IP2.eye.T;
  Turbine_IP2.'eye_int[1]'.s = Turbine_IP2.eye.s;
  quadruple15.s = Turbine_IP2.eye.s;
  quadruple15.eye.s = Turbine_IP2.eye.s;
  Turbine_LP3.iCom.rpm = Turbine_LP3.rpm;
  Turbine_LP3.summary.outline.rpm = Turbine_LP3.rpm;
  Turbine_LP3.'eye_int[1]'.p = Turbine_LP3.eye.p;
  quadruple18.p = Turbine_LP3.eye.p;
  quadruple18.eye.p = Turbine_LP3.eye.p;
  Turbine_LP3.'eye_int[1]'.h = Turbine_LP3.eye.h;
  quadruple18.h = Turbine_LP3.eye.h;
  quadruple18.eye.h = Turbine_LP3.eye.h;
  Turbine_LP3.'eye_int[1]'.T = Turbine_LP3.eye.T;
  quadruple18.T = Turbine_LP3.eye.T;
  quadruple18.eye.T = Turbine_LP3.eye.T;
  Turbine_LP3.'eye_int[1]'.s = Turbine_LP3.eye.s;
  quadruple18.s = Turbine_LP3.eye.s;
  quadruple18.eye.s = Turbine_LP3.eye.s;
  Turbine_LP2.iCom.rpm = Turbine_LP2.rpm;
  Turbine_LP2.summary.outline.rpm = Turbine_LP2.rpm;
  Turbine_LP2.'eye_int[1]'.p = Turbine_LP2.eye.p;
  quadruple17.p = Turbine_LP2.eye.p;
  quadruple17.eye.p = Turbine_LP2.eye.p;
  Turbine_LP2.'eye_int[1]'.h = Turbine_LP2.eye.h;
  quadruple17.h = Turbine_LP2.eye.h;
  quadruple17.eye.h = Turbine_LP2.eye.h;
  Turbine_LP2.'eye_int[1]'.T = Turbine_LP2.eye.T;
  quadruple17.T = Turbine_LP2.eye.T;
  quadruple17.eye.T = Turbine_LP2.eye.T;
  Turbine_LP2.'eye_int[1]'.s = Turbine_LP2.eye.s;
  quadruple17.s = Turbine_LP2.eye.s;
  quadruple17.eye.s = Turbine_LP2.eye.s;
  valve_LP1.'eye_int[1]'.p = valve_LP1.eye.p;
  quadruple19.p = valve_LP1.eye.p;
  quadruple19.eye.p = valve_LP1.eye.p;
  valve_LP1.'eye_int[1]'.h = valve_LP1.eye.h;
  quadruple19.h = valve_LP1.eye.h;
  quadruple19.eye.h = valve_LP1.eye.h;
  valve_LP1.'eye_int[1]'.T = valve_LP1.eye.T;
  quadruple19.T = valve_LP1.eye.T;
  quadruple19.eye.T = valve_LP1.eye.T;
  valve_LP1.'eye_int[1]'.s = valve_LP1.eye.s;
  quadruple19.s = valve_LP1.eye.s;
  quadruple19.eye.s = valve_LP1.eye.s;
  preheater_LP2.tubes.fluidIn.d = preheater_LP2.tubes.summary.inlet.rho;
  preheater_LP2.tubes.fluidIn.s = preheater_LP2.tubes.summary.inlet.s;
  preheater_LP2.tubes.fluidIn.q = preheater_LP2.tubes.summary.inlet.steamQuality;
  preheater_LP2.tubes.fluidOut.d = preheater_LP2.tubes.summary.outlet.rho;
  preheater_LP2.tubes.fluidOut.s = preheater_LP2.tubes.summary.outlet.s;
  preheater_LP2.tubes.fluidOut.q = preheater_LP2.tubes.summary.outlet.steamQuality;
  preheater_LP2.shell.summary.'inlet[1]'.T = preheater_LP2.shell.'fluidIn[1]'.T;
  preheater_LP2.shell.summary.'inlet[2]'.T = preheater_LP2.shell.'fluidIn[2]'.T;
  preheater_LP2.shell.summary.'inlet[3]'.T = preheater_LP2.shell.'fluidIn[3]'.T;
  preheater_LP2.shell.summary.'outlet[1]'.T = preheater_LP2.shell.'fluidOut[1]'.T;
  preheater_LP2.shell.summary.'inlet[1]'.rho = preheater_LP2.shell.'fluidIn[1]'.d;
  preheater_LP2.shell.summary.'inlet[1]'.s = preheater_LP2.shell.'fluidIn[1]'.s;
  preheater_LP2.shell.summary.'inlet[1]'.steamQuality = preheater_LP2.shell.'fluidIn[1]'.q;
  preheater_LP2.shell.summary.'inlet[2]'.rho = preheater_LP2.shell.'fluidIn[2]'.d;
  preheater_LP2.shell.summary.'inlet[2]'.s = preheater_LP2.shell.'fluidIn[2]'.s;
  preheater_LP2.shell.summary.'inlet[2]'.steamQuality = preheater_LP2.shell.'fluidIn[2]'.q;
  preheater_LP2.shell.summary.'inlet[3]'.rho = preheater_LP2.shell.'fluidIn[3]'.d;
  preheater_LP2.shell.summary.'inlet[3]'.s = preheater_LP2.shell.'fluidIn[3]'.s;
  preheater_LP2.shell.summary.'inlet[3]'.steamQuality = preheater_LP2.shell.'fluidIn[3]'.q;
  preheater_LP2.shell.summary.'outlet[1]'.rho = preheater_LP2.shell.'fluidOut[1]'.d;
  preheater_LP2.shell.summary.'outlet[1]'.s = preheater_LP2.shell.'fluidOut[1]'.s;
  preheater_LP2.shell.summary.'outlet[1]'.steamQuality = preheater_LP2.shell.'fluidOut[1]'.q;
  preheater_LP2.eye2.p = preheater_LP2.'eye_int2[1]'.p;
  quadruple22.p = preheater_LP2.'eye_int2[1]'.p;
  quadruple22.eye.p = preheater_LP2.'eye_int2[1]'.p;
  preheater_LP2.eye2.h = preheater_LP2.'eye_int2[1]'.h;
  quadruple22.h = preheater_LP2.'eye_int2[1]'.h;
  quadruple22.eye.h = preheater_LP2.'eye_int2[1]'.h;
  preheater_LP2.eye2.T = preheater_LP2.'eye_int2[1]'.T;
  quadruple22.T = preheater_LP2.'eye_int2[1]'.T;
  quadruple22.eye.T = preheater_LP2.'eye_int2[1]'.T;
  preheater_LP2.eye2.s = preheater_LP2.'eye_int2[1]'.s;
  quadruple22.s = preheater_LP2.'eye_int2[1]'.s;
  quadruple22.eye.s = preheater_LP2.'eye_int2[1]'.s;
  preheater_LP2.eye1.p = preheater_LP2.'eye_int1[1]'.p;
  preheater_LP2.eye1.h = preheater_LP2.'eye_int1[1]'.h;
  preheater_LP2.eye1.T = preheater_LP2.'eye_int1[1]'.T;
  preheater_LP2.eye1.s = preheater_LP2.'eye_int1[1]'.s;
  preheater_LP2.shell.'fluidIn[2]'.p = preheater_LP2.shell.'inlet[2]'.p;
  preheater_LP2.shell.summary.'inlet[2]'.p = preheater_LP2.shell.'inlet[2]'.p;
  preheater_LP2.aux1.p = preheater_LP2.shell.'inlet[2]'.p;
  preheater_LP2.shell.'fluidIn[2]'.h = preheater_LP2.shell.'inlet[2]'.h_outflow;
  preheater_LP2.shell.summary.'inlet[2]'.h = preheater_LP2.shell.'inlet[2]'.h_outflow;
  preheater_LP2.aux1.h_outflow = preheater_LP2.shell.'inlet[2]'.h_outflow;
  preheater_LP2.shell.'fluidIn[3]'.p = preheater_LP2.shell.'inlet[3]'.p;
  preheater_LP2.shell.summary.'inlet[3]'.p = preheater_LP2.shell.'inlet[3]'.p;
  preheater_LP2.aux2.p = preheater_LP2.shell.'inlet[3]'.p;
  preheater_LP2.shell.'fluidIn[3]'.h = preheater_LP2.shell.'inlet[3]'.h_outflow;
  preheater_LP2.shell.summary.'inlet[3]'.h = preheater_LP2.shell.'inlet[3]'.h_outflow;
  preheater_LP2.aux2.h_outflow = preheater_LP2.shell.'inlet[3]'.h_outflow;
  preheater_LP3.shell.'inlet[3]'.p = preheater_LP3.aux2.p;
  preheater_LP3.shell.'fluidIn[3]'.p = preheater_LP3.aux2.p;
  preheater_LP3.shell.summary.'inlet[3]'.p = preheater_LP3.aux2.p;
  preheater_LP3.shell.'inlet[3]'.h_outflow = preheater_LP3.aux2.h_outflow;
  preheater_LP3.shell.'fluidIn[3]'.h = preheater_LP3.aux2.h_outflow;
  preheater_LP3.shell.summary.'inlet[3]'.h = preheater_LP3.aux2.h_outflow;
  preheater_LP3.tubes.fluidIn.d = preheater_LP3.tubes.summary.inlet.rho;
  preheater_LP3.tubes.fluidIn.s = preheater_LP3.tubes.summary.inlet.s;
  preheater_LP3.tubes.fluidIn.q = preheater_LP3.tubes.summary.inlet.steamQuality;
  preheater_LP3.tubes.fluidOut.d = preheater_LP3.tubes.summary.outlet.rho;
  preheater_LP3.tubes.fluidOut.s = preheater_LP3.tubes.summary.outlet.s;
  preheater_LP3.tubes.fluidOut.q = preheater_LP3.tubes.summary.outlet.steamQuality;
  preheater_LP3.shell.summary.'inlet[1]'.T = preheater_LP3.shell.'fluidIn[1]'.T;
  preheater_LP3.shell.summary.'inlet[2]'.T = preheater_LP3.shell.'fluidIn[2]'.T;
  preheater_LP3.shell.summary.'inlet[3]'.T = preheater_LP3.shell.'fluidIn[3]'.T;
  preheater_LP3.shell.summary.'outlet[1]'.T = preheater_LP3.shell.'fluidOut[1]'.T;
  preheater_LP3.shell.summary.'inlet[1]'.rho = preheater_LP3.shell.'fluidIn[1]'.d;
  preheater_LP3.shell.summary.'inlet[1]'.s = preheater_LP3.shell.'fluidIn[1]'.s;
  preheater_LP3.shell.summary.'inlet[1]'.steamQuality = preheater_LP3.shell.'fluidIn[1]'.q;
  preheater_LP3.shell.summary.'inlet[2]'.rho = preheater_LP3.shell.'fluidIn[2]'.d;
  preheater_LP3.shell.summary.'inlet[2]'.s = preheater_LP3.shell.'fluidIn[2]'.s;
  preheater_LP3.shell.summary.'inlet[2]'.steamQuality = preheater_LP3.shell.'fluidIn[2]'.q;
  preheater_LP3.shell.summary.'inlet[3]'.rho = preheater_LP3.shell.'fluidIn[3]'.d;
  preheater_LP3.shell.summary.'inlet[3]'.s = preheater_LP3.shell.'fluidIn[3]'.s;
  preheater_LP3.shell.summary.'inlet[3]'.steamQuality = preheater_LP3.shell.'fluidIn[3]'.q;
  preheater_LP3.shell.summary.'outlet[1]'.rho = preheater_LP3.shell.'fluidOut[1]'.d;
  preheater_LP3.shell.summary.'outlet[1]'.s = preheater_LP3.shell.'fluidOut[1]'.s;
  preheater_LP3.shell.summary.'outlet[1]'.steamQuality = preheater_LP3.shell.'fluidOut[1]'.q;
  preheater_LP3.'eye_int1[1]'.p = preheater_LP3.eye1.p;
  preheater_LP3.'eye_int1[1]'.h = preheater_LP3.eye1.h;
  preheater_LP3.'eye_int1[1]'.T = preheater_LP3.eye1.T;
  preheater_LP3.'eye_int1[1]'.s = preheater_LP3.eye1.s;
  preheater_LP3.'eye_int2[1]'.p = preheater_LP3.eye2.p;
  quadruple23.p = preheater_LP3.eye2.p;
  quadruple23.eye.p = preheater_LP3.eye2.p;
  preheater_LP3.'eye_int2[1]'.h = preheater_LP3.eye2.h;
  quadruple23.h = preheater_LP3.eye2.h;
  quadruple23.eye.h = preheater_LP3.eye2.h;
  preheater_LP3.'eye_int2[1]'.T = preheater_LP3.eye2.T;
  quadruple23.T = preheater_LP3.eye2.T;
  quadruple23.eye.T = preheater_LP3.eye2.T;
  preheater_LP3.'eye_int2[1]'.s = preheater_LP3.eye2.s;
  quadruple23.s = preheater_LP3.eye2.s;
  quadruple23.eye.s = preheater_LP3.eye2.s;
  preheater_LP4.shell.'inlet[2]'.p = preheater_LP4.aux1.p;
  preheater_LP4.shell.'fluidIn[2]'.p = preheater_LP4.aux1.p;
  preheater_LP4.shell.summary.'inlet[2]'.p = preheater_LP4.aux1.p;
  preheater_LP4.shell.'inlet[2]'.h_outflow = preheater_LP4.aux1.h_outflow;
  preheater_LP4.shell.'fluidIn[2]'.h = preheater_LP4.aux1.h_outflow;
  preheater_LP4.shell.summary.'inlet[2]'.h = preheater_LP4.aux1.h_outflow;
  preheater_LP4.shell.'inlet[3]'.p = preheater_LP4.aux2.p;
  preheater_LP4.shell.'fluidIn[3]'.p = preheater_LP4.aux2.p;
  preheater_LP4.shell.summary.'inlet[3]'.p = preheater_LP4.aux2.p;
  preheater_LP4.shell.'inlet[3]'.h_outflow = preheater_LP4.aux2.h_outflow;
  preheater_LP4.shell.'fluidIn[3]'.h = preheater_LP4.aux2.h_outflow;
  preheater_LP4.shell.summary.'inlet[3]'.h = preheater_LP4.aux2.h_outflow;
  preheater_LP4.tubes.fluidIn.d = preheater_LP4.tubes.summary.inlet.rho;
  preheater_LP4.tubes.fluidIn.s = preheater_LP4.tubes.summary.inlet.s;
  preheater_LP4.tubes.fluidIn.q = preheater_LP4.tubes.summary.inlet.steamQuality;
  preheater_LP4.tubes.fluidOut.d = preheater_LP4.tubes.summary.outlet.rho;
  preheater_LP4.tubes.fluidOut.s = preheater_LP4.tubes.summary.outlet.s;
  preheater_LP4.tubes.fluidOut.q = preheater_LP4.tubes.summary.outlet.steamQuality;
  preheater_LP4.shell.summary.'inlet[1]'.T = preheater_LP4.shell.'fluidIn[1]'.T;
  preheater_LP4.shell.summary.'inlet[2]'.T = preheater_LP4.shell.'fluidIn[2]'.T;
  preheater_LP4.shell.summary.'inlet[3]'.T = preheater_LP4.shell.'fluidIn[3]'.T;
  preheater_LP4.shell.summary.'outlet[1]'.T = preheater_LP4.shell.'fluidOut[1]'.T;
  preheater_LP4.shell.summary.'inlet[1]'.rho = preheater_LP4.shell.'fluidIn[1]'.d;
  preheater_LP4.shell.summary.'inlet[1]'.s = preheater_LP4.shell.'fluidIn[1]'.s;
  preheater_LP4.shell.summary.'inlet[1]'.steamQuality = preheater_LP4.shell.'fluidIn[1]'.q;
  preheater_LP4.shell.summary.'inlet[2]'.rho = preheater_LP4.shell.'fluidIn[2]'.d;
  preheater_LP4.shell.summary.'inlet[2]'.s = preheater_LP4.shell.'fluidIn[2]'.s;
  preheater_LP4.shell.summary.'inlet[2]'.steamQuality = preheater_LP4.shell.'fluidIn[2]'.q;
  preheater_LP4.shell.summary.'inlet[3]'.rho = preheater_LP4.shell.'fluidIn[3]'.d;
  preheater_LP4.shell.summary.'inlet[3]'.s = preheater_LP4.shell.'fluidIn[3]'.s;
  preheater_LP4.shell.summary.'inlet[3]'.steamQuality = preheater_LP4.shell.'fluidIn[3]'.q;
  preheater_LP4.shell.summary.'outlet[1]'.rho = preheater_LP4.shell.'fluidOut[1]'.d;
  preheater_LP4.shell.summary.'outlet[1]'.s = preheater_LP4.shell.'fluidOut[1]'.s;
  preheater_LP4.shell.summary.'outlet[1]'.steamQuality = preheater_LP4.shell.'fluidOut[1]'.q;
  preheater_LP4.'eye_int1[1]'.p = preheater_LP4.eye1.p;
  preheater_LP4.'eye_int1[1]'.h = preheater_LP4.eye1.h;
  preheater_LP4.'eye_int1[1]'.T = preheater_LP4.eye1.T;
  preheater_LP4.'eye_int1[1]'.s = preheater_LP4.eye1.s;
  preheater_LP4.'eye_int2[1]'.p = preheater_LP4.eye2.p;
  quadruple24.p = preheater_LP4.eye2.p;
  quadruple24.eye.p = preheater_LP4.eye2.p;
  preheater_LP4.'eye_int2[1]'.h = preheater_LP4.eye2.h;
  quadruple24.h = preheater_LP4.eye2.h;
  quadruple24.eye.h = preheater_LP4.eye2.h;
  preheater_LP4.'eye_int2[1]'.T = preheater_LP4.eye2.T;
  quadruple24.T = preheater_LP4.eye2.T;
  quadruple24.eye.T = preheater_LP4.eye2.T;
  preheater_LP4.'eye_int2[1]'.s = preheater_LP4.eye2.s;
  quadruple24.s = preheater_LP4.eye2.s;
  quadruple24.eye.s = preheater_LP4.eye2.s;
  Pump_preheater_LP3.'eye_int[1]'.p = Pump_preheater_LP3.eye.p;
  Pump_preheater_LP3.'eye_int[1]'.h = Pump_preheater_LP3.eye.h;
  Pump_preheater_LP3.'eye_int[1]'.T = Pump_preheater_LP3.eye.T;
  Pump_preheater_LP3.'eye_int[1]'.s = Pump_preheater_LP3.eye.s;
  valve_afterPumpLP3.'eye_int[1]'.p = valve_afterPumpLP3.eye.p;
  valve_afterPumpLP3.'eye_int[1]'.h = valve_afterPumpLP3.eye.h;
  valve_afterPumpLP3.'eye_int[1]'.T = valve_afterPumpLP3.eye.T;
  valve_afterPumpLP3.'eye_int[1]'.s = valve_afterPumpLP3.eye.s;
  valveControl_preheater_LP2.'eye_int[1]'.p = valveControl_preheater_LP2.eye.p;
  valveControl_preheater_LP2.'eye_int[1]'.h = valveControl_preheater_LP2.eye.h;
  valveControl_preheater_LP2.'eye_int[1]'.T = valveControl_preheater_LP2.eye.T;
  valveControl_preheater_LP2.'eye_int[1]'.s = valveControl_preheater_LP2.eye.s;
  join_preheater_LP3.'eye_int[1]'.p = join_preheater_LP3.eye.p;
  join_preheater_LP3.'eye_int[1]'.h = join_preheater_LP3.eye.h;
  join_preheater_LP3.'eye_int[1]'.T = join_preheater_LP3.eye.T;
  join_preheater_LP3.'eye_int[1]'.s = join_preheater_LP3.eye.s;
  valveControl_preheater_LP4.'eye_int[1]'.p = valveControl_preheater_LP4.eye.p;
  valveControl_preheater_LP4.'eye_int[1]'.h = valveControl_preheater_LP4.eye.h;
  valveControl_preheater_LP4.'eye_int[1]'.T = valveControl_preheater_LP4.eye.T;
  valveControl_preheater_LP4.'eye_int[1]'.s = valveControl_preheater_LP4.eye.s;
  valve_LP2.'eye_int[1]'.p = valve_LP2.eye.p;
  quadruple20.p = valve_LP2.eye.p;
  quadruple20.eye.p = valve_LP2.eye.p;
  valve_LP2.'eye_int[1]'.h = valve_LP2.eye.h;
  quadruple20.h = valve_LP2.eye.h;
  quadruple20.eye.h = valve_LP2.eye.h;
  valve_LP2.'eye_int[1]'.T = valve_LP2.eye.T;
  quadruple20.T = valve_LP2.eye.T;
  quadruple20.eye.T = valve_LP2.eye.T;
  valve_LP2.'eye_int[1]'.s = valve_LP2.eye.s;
  quadruple20.s = valve_LP2.eye.s;
  quadruple20.eye.s = valve_LP2.eye.s;
  valve_LP3.'eye_int[1]'.p = valve_LP3.eye.p;
  quadruple21.p = valve_LP3.eye.p;
  quadruple21.eye.p = valve_LP3.eye.p;
  valve_LP3.'eye_int[1]'.h = valve_LP3.eye.h;
  quadruple21.h = valve_LP3.eye.h;
  quadruple21.eye.h = valve_LP3.eye.h;
  valve_LP3.'eye_int[1]'.T = valve_LP3.eye.T;
  quadruple21.T = valve_LP3.eye.T;
  quadruple21.eye.T = valve_LP3.eye.T;
  valve_LP3.'eye_int[1]'.s = valve_LP3.eye.s;
  quadruple21.s = valve_LP3.eye.s;
  quadruple21.eye.s = valve_LP3.eye.s;
  boundaryVLE_Txim_flow.'eye_int[1]'.p = boundaryVLE_Txim_flow.eye.p;
  boundaryVLE_Txim_flow.'eye_int[1]'.h = boundaryVLE_Txim_flow.eye.h;
  boundaryVLE_Txim_flow.'eye_int[1]'.s = boundaryVLE_Txim_flow.eye.s;
  boundaryVLE_phxi.'eye_int[1]'.h = boundaryVLE_phxi.eye.h;
  boundaryVLE_phxi.'eye_int[1]'.T = boundaryVLE_phxi.eye.T;
  boundaryVLE_phxi.'eye_int[1]'.s = boundaryVLE_phxi.eye.s;
  simpleGenerator.connected2SimCenter.powerOut_elMech = simpleGenerator.summary.P_el;
  simpleGenerator.connected2SimCenter.cycleSumModel.cycleSumPort.power_out_elMech = simpleGenerator.summary.P_el;
  boundaryElectricFrequency.electricPortIn.P = simpleGenerator.summary.P_el;
  downComer_feedWaterTank.heatTransfer.'T_mean[1]' = downComer_feedWaterTank.summary.fluid.'T[1]';
  downComer_feedWaterTank.heatTransfer.'T_mean[2]' = downComer_feedWaterTank.summary.fluid.'T[2]';
  downComer_feedWaterTank.heatTransfer.'T_mean[3]' = downComer_feedWaterTank.summary.fluid.'T[3]';
  downComer_feedWaterTank.heatTransfer.'heat[1]'.T = downComer_feedWaterTank.summary.wall.'T[1]';
  downComer_feedWaterTank.'heat[1]'.T = downComer_feedWaterTank.summary.wall.'T[1]';
  downComer_feedWaterTank.heatTransfer.'heat[2]'.T = downComer_feedWaterTank.summary.wall.'T[2]';
  downComer_feedWaterTank.'heat[2]'.T = downComer_feedWaterTank.summary.wall.'T[2]';
  downComer_feedWaterTank.heatTransfer.'heat[3]'.T = downComer_feedWaterTank.summary.wall.'T[3]';
  downComer_feedWaterTank.'heat[3]'.T = downComer_feedWaterTank.summary.wall.'T[3]';
  valveControl_preheater_LP1.'eye_int[1]'.h = valveControl_preheater_LP1.eye.h;
  valveControl_preheater_LP1.'eye_int[1]'.T = valveControl_preheater_LP1.eye.T;
  valveControl_preheater_LP1.'eye_int[1]'.s = valveControl_preheater_LP1.eye.s;
  PI_Pump_cond.activate_.y = PI_Pump_cond.switch_OnOff.u2;
  PI_Pump_cond.time_lag_I_activation.u = PI_Pump_cond.switch_OnOff.u2;
  PI_Pump_cond.booleanPassThrough.u = PI_Pump_cond.switch_OnOff.u2;
  PI_Pump_cond.booleanPassThrough.y = PI_Pump_cond.switch_OnOff.u2;
  PI_Pump_cond.I_activation.y = PI_Pump_cond.switch_OnOff_I.u2;
  PI_valveControl_preheater_HP.activate_.y = PI_valveControl_preheater_HP.switch_OnOff.u2;
  PI_valveControl_preheater_HP.time_lag_I_activation.u = PI_valveControl_preheater_HP.switch_OnOff.u2;
  PI_valveControl_preheater_HP.booleanPassThrough.u = PI_valveControl_preheater_HP.switch_OnOff.u2;
  PI_valveControl_preheater_HP.booleanPassThrough.y = PI_valveControl_preheater_HP.switch_OnOff.u2;
  PI_valveControl_preheater_HP.I_activation.y = PI_valveControl_preheater_HP.switch_OnOff_I.u2;
  PI_preheater1.activate_.y = PI_preheater1.switch_OnOff.u2;
  PI_preheater1.time_lag_I_activation.u = PI_preheater1.switch_OnOff.u2;
  PI_preheater1.booleanPassThrough.u = PI_preheater1.switch_OnOff.u2;
  PI_preheater1.booleanPassThrough.y = PI_preheater1.switch_OnOff.u2;
  PI_preheater1.I_activation.y = PI_preheater1.switch_OnOff_I.u2;
  PID_preheaterLP4.activate_.y = PID_preheaterLP4.switch_OnOff.u2;
  PID_preheaterLP4.time_lag_I_activation.u = PID_preheaterLP4.switch_OnOff.u2;
  PID_preheaterLP4.booleanPassThrough.u = PID_preheaterLP4.switch_OnOff.u2;
  PID_preheaterLP4.booleanPassThrough.y = PID_preheaterLP4.switch_OnOff.u2;
  PID_preheaterLP4.I_activation.y = PID_preheaterLP4.switch_OnOff_I.u2;
  PID_preheaterLP3.activate_.y = PID_preheaterLP3.switch_OnOff.u2;
  PID_preheaterLP3.time_lag_I_activation.u = PID_preheaterLP3.switch_OnOff.u2;
  PID_preheaterLP3.booleanPassThrough.u = PID_preheaterLP3.switch_OnOff.u2;
  PID_preheaterLP3.booleanPassThrough.y = PID_preheaterLP3.switch_OnOff.u2;
  PID_preheaterLP3.I_activation.y = PID_preheaterLP3.switch_OnOff_I.u2;
  PID_NDVW3.activate_.y = PID_NDVW3.switch_OnOff.u2;
  PID_NDVW3.time_lag_I_activation.u = PID_NDVW3.switch_OnOff.u2;
  PID_NDVW3.booleanPassThrough.u = PID_NDVW3.switch_OnOff.u2;
  PID_NDVW3.booleanPassThrough.y = PID_NDVW3.switch_OnOff.u2;
  PID_NDVW3.I_activation.y = PID_NDVW3.switch_OnOff_I.u2;
  annotation (__Dymola_FMUImportVersion="Dymola 2023", __Dymola_FMUImportPath="D:/Work_JA/master_thesis_aka/code/modelica/ClaRaTester/ClaRaTester_SteamCycle.fmu", __Dymola_FMUImportIncludeAllVariables="true", __Dymola_FMUImportIntegrate="false", experiment(StartTime=0.0, StopTime=5000.0, Tolerance=1E-05),
    Icon(graphics={
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 2.0 CS")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 2.0</li>
<li>modelName = ClaRaTester_SteamCycle</li>
<li>generationTool = Dymola Version 2023 (64-bit), 2022-04-13</li>
<li>generationDateAndTime = 2024-02-12T12:59:07Z</li>
</ul>
<p><br><b>Co-Simulation Attributes</b></p>
<ul>
<li>needsExecutionTool = false</li>
<li>canHandleVariableCommunicationStepSize = true</li>
<li>canInterpolateInputs = true</li>
<li>maxOutputDerivativeOrder = 1</li>
<li>canRunAsynchronuously = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = false</li>
<li>canNotUseMemoryManagementFunctions = true</li>
<li>canGetAndSetFMUstate = true</li>
<li>canSerializeFMUstate = true</li>
<li>providesDirectionalDerivative = true</li>
</ul>
</html>"));
end ClaRaTester_SteamCycle_fmu;
